
Stm32f401rct6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000072e8  08000198  08000198  00001198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000260  08007480  08007480  00008480  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080076e0  080076e0  000091a0  2**0
                  CONTENTS
  4 .ARM          00000008  080076e0  080076e0  000086e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080076e8  080076e8  000091a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080076e8  080076e8  000086e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080076ec  080076ec  000086ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001a0  20000000  080076f0  00009000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000034d0  200001a0  08007890  000091a0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20003670  08007890  00009670  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000091a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c949  00000000  00000000  000091d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fca  00000000  00000000  00015b19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a50  00000000  00000000  00017ae8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000808  00000000  00000000  00018538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016459  00000000  00000000  00018d40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ee7f  00000000  00000000  0002f199  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008817c  00000000  00000000  0003e018  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c6194  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000030a8  00000000  00000000  000c61d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000c9280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200001a0 	.word	0x200001a0
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08007468 	.word	0x08007468

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200001a4 	.word	0x200001a4
 80001d4:	08007468 	.word	0x08007468

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	@ 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2iz>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ab8:	d215      	bcs.n	8000ae6 <__aeabi_d2iz+0x36>
 8000aba:	d511      	bpl.n	8000ae0 <__aeabi_d2iz+0x30>
 8000abc:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d912      	bls.n	8000aec <__aeabi_d2iz+0x3c>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ad6:	fa23 f002 	lsr.w	r0, r3, r2
 8000ada:	bf18      	it	ne
 8000adc:	4240      	negne	r0, r0
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d105      	bne.n	8000af8 <__aeabi_d2iz+0x48>
 8000aec:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000af0:	bf08      	it	eq
 8000af2:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_d2f>:
 8000b00:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b04:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b08:	bf24      	itt	cs
 8000b0a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b0e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b12:	d90d      	bls.n	8000b30 <__aeabi_d2f+0x30>
 8000b14:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b18:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b1c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b20:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b24:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b28:	bf08      	it	eq
 8000b2a:	f020 0001 	biceq.w	r0, r0, #1
 8000b2e:	4770      	bx	lr
 8000b30:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b34:	d121      	bne.n	8000b7a <__aeabi_d2f+0x7a>
 8000b36:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b3a:	bfbc      	itt	lt
 8000b3c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b40:	4770      	bxlt	lr
 8000b42:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b46:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b4a:	f1c2 0218 	rsb	r2, r2, #24
 8000b4e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b52:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b56:	fa20 f002 	lsr.w	r0, r0, r2
 8000b5a:	bf18      	it	ne
 8000b5c:	f040 0001 	orrne.w	r0, r0, #1
 8000b60:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b64:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b68:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b6c:	ea40 000c 	orr.w	r0, r0, ip
 8000b70:	fa23 f302 	lsr.w	r3, r3, r2
 8000b74:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b78:	e7cc      	b.n	8000b14 <__aeabi_d2f+0x14>
 8000b7a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b7e:	d107      	bne.n	8000b90 <__aeabi_d2f+0x90>
 8000b80:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b84:	bf1e      	ittt	ne
 8000b86:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b8a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b8e:	4770      	bxne	lr
 8000b90:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b94:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b98:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_uldivmod>:
 8000ba0:	b953      	cbnz	r3, 8000bb8 <__aeabi_uldivmod+0x18>
 8000ba2:	b94a      	cbnz	r2, 8000bb8 <__aeabi_uldivmod+0x18>
 8000ba4:	2900      	cmp	r1, #0
 8000ba6:	bf08      	it	eq
 8000ba8:	2800      	cmpeq	r0, #0
 8000baa:	bf1c      	itt	ne
 8000bac:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb0:	f04f 30ff 	movne.w	r0, #4294967295
 8000bb4:	f000 b96a 	b.w	8000e8c <__aeabi_idiv0>
 8000bb8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bbc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc0:	f000 f806 	bl	8000bd0 <__udivmoddi4>
 8000bc4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bcc:	b004      	add	sp, #16
 8000bce:	4770      	bx	lr

08000bd0 <__udivmoddi4>:
 8000bd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bd4:	9d08      	ldr	r5, [sp, #32]
 8000bd6:	460c      	mov	r4, r1
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d14e      	bne.n	8000c7a <__udivmoddi4+0xaa>
 8000bdc:	4694      	mov	ip, r2
 8000bde:	458c      	cmp	ip, r1
 8000be0:	4686      	mov	lr, r0
 8000be2:	fab2 f282 	clz	r2, r2
 8000be6:	d962      	bls.n	8000cae <__udivmoddi4+0xde>
 8000be8:	b14a      	cbz	r2, 8000bfe <__udivmoddi4+0x2e>
 8000bea:	f1c2 0320 	rsb	r3, r2, #32
 8000bee:	4091      	lsls	r1, r2
 8000bf0:	fa20 f303 	lsr.w	r3, r0, r3
 8000bf4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bf8:	4319      	orrs	r1, r3
 8000bfa:	fa00 fe02 	lsl.w	lr, r0, r2
 8000bfe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c02:	fa1f f68c 	uxth.w	r6, ip
 8000c06:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c0a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c0e:	fb07 1114 	mls	r1, r7, r4, r1
 8000c12:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c16:	fb04 f106 	mul.w	r1, r4, r6
 8000c1a:	4299      	cmp	r1, r3
 8000c1c:	d90a      	bls.n	8000c34 <__udivmoddi4+0x64>
 8000c1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c22:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c26:	f080 8112 	bcs.w	8000e4e <__udivmoddi4+0x27e>
 8000c2a:	4299      	cmp	r1, r3
 8000c2c:	f240 810f 	bls.w	8000e4e <__udivmoddi4+0x27e>
 8000c30:	3c02      	subs	r4, #2
 8000c32:	4463      	add	r3, ip
 8000c34:	1a59      	subs	r1, r3, r1
 8000c36:	fa1f f38e 	uxth.w	r3, lr
 8000c3a:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c3e:	fb07 1110 	mls	r1, r7, r0, r1
 8000c42:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c46:	fb00 f606 	mul.w	r6, r0, r6
 8000c4a:	429e      	cmp	r6, r3
 8000c4c:	d90a      	bls.n	8000c64 <__udivmoddi4+0x94>
 8000c4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c52:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c56:	f080 80fc 	bcs.w	8000e52 <__udivmoddi4+0x282>
 8000c5a:	429e      	cmp	r6, r3
 8000c5c:	f240 80f9 	bls.w	8000e52 <__udivmoddi4+0x282>
 8000c60:	4463      	add	r3, ip
 8000c62:	3802      	subs	r0, #2
 8000c64:	1b9b      	subs	r3, r3, r6
 8000c66:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c6a:	2100      	movs	r1, #0
 8000c6c:	b11d      	cbz	r5, 8000c76 <__udivmoddi4+0xa6>
 8000c6e:	40d3      	lsrs	r3, r2
 8000c70:	2200      	movs	r2, #0
 8000c72:	e9c5 3200 	strd	r3, r2, [r5]
 8000c76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7a:	428b      	cmp	r3, r1
 8000c7c:	d905      	bls.n	8000c8a <__udivmoddi4+0xba>
 8000c7e:	b10d      	cbz	r5, 8000c84 <__udivmoddi4+0xb4>
 8000c80:	e9c5 0100 	strd	r0, r1, [r5]
 8000c84:	2100      	movs	r1, #0
 8000c86:	4608      	mov	r0, r1
 8000c88:	e7f5      	b.n	8000c76 <__udivmoddi4+0xa6>
 8000c8a:	fab3 f183 	clz	r1, r3
 8000c8e:	2900      	cmp	r1, #0
 8000c90:	d146      	bne.n	8000d20 <__udivmoddi4+0x150>
 8000c92:	42a3      	cmp	r3, r4
 8000c94:	d302      	bcc.n	8000c9c <__udivmoddi4+0xcc>
 8000c96:	4290      	cmp	r0, r2
 8000c98:	f0c0 80f0 	bcc.w	8000e7c <__udivmoddi4+0x2ac>
 8000c9c:	1a86      	subs	r6, r0, r2
 8000c9e:	eb64 0303 	sbc.w	r3, r4, r3
 8000ca2:	2001      	movs	r0, #1
 8000ca4:	2d00      	cmp	r5, #0
 8000ca6:	d0e6      	beq.n	8000c76 <__udivmoddi4+0xa6>
 8000ca8:	e9c5 6300 	strd	r6, r3, [r5]
 8000cac:	e7e3      	b.n	8000c76 <__udivmoddi4+0xa6>
 8000cae:	2a00      	cmp	r2, #0
 8000cb0:	f040 8090 	bne.w	8000dd4 <__udivmoddi4+0x204>
 8000cb4:	eba1 040c 	sub.w	r4, r1, ip
 8000cb8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cbc:	fa1f f78c 	uxth.w	r7, ip
 8000cc0:	2101      	movs	r1, #1
 8000cc2:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cc6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cca:	fb08 4416 	mls	r4, r8, r6, r4
 8000cce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cd2:	fb07 f006 	mul.w	r0, r7, r6
 8000cd6:	4298      	cmp	r0, r3
 8000cd8:	d908      	bls.n	8000cec <__udivmoddi4+0x11c>
 8000cda:	eb1c 0303 	adds.w	r3, ip, r3
 8000cde:	f106 34ff 	add.w	r4, r6, #4294967295
 8000ce2:	d202      	bcs.n	8000cea <__udivmoddi4+0x11a>
 8000ce4:	4298      	cmp	r0, r3
 8000ce6:	f200 80cd 	bhi.w	8000e84 <__udivmoddi4+0x2b4>
 8000cea:	4626      	mov	r6, r4
 8000cec:	1a1c      	subs	r4, r3, r0
 8000cee:	fa1f f38e 	uxth.w	r3, lr
 8000cf2:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cf6:	fb08 4410 	mls	r4, r8, r0, r4
 8000cfa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cfe:	fb00 f707 	mul.w	r7, r0, r7
 8000d02:	429f      	cmp	r7, r3
 8000d04:	d908      	bls.n	8000d18 <__udivmoddi4+0x148>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d0e:	d202      	bcs.n	8000d16 <__udivmoddi4+0x146>
 8000d10:	429f      	cmp	r7, r3
 8000d12:	f200 80b0 	bhi.w	8000e76 <__udivmoddi4+0x2a6>
 8000d16:	4620      	mov	r0, r4
 8000d18:	1bdb      	subs	r3, r3, r7
 8000d1a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d1e:	e7a5      	b.n	8000c6c <__udivmoddi4+0x9c>
 8000d20:	f1c1 0620 	rsb	r6, r1, #32
 8000d24:	408b      	lsls	r3, r1
 8000d26:	fa22 f706 	lsr.w	r7, r2, r6
 8000d2a:	431f      	orrs	r7, r3
 8000d2c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d30:	fa04 f301 	lsl.w	r3, r4, r1
 8000d34:	ea43 030c 	orr.w	r3, r3, ip
 8000d38:	40f4      	lsrs	r4, r6
 8000d3a:	fa00 f801 	lsl.w	r8, r0, r1
 8000d3e:	0c38      	lsrs	r0, r7, #16
 8000d40:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d44:	fbb4 fef0 	udiv	lr, r4, r0
 8000d48:	fa1f fc87 	uxth.w	ip, r7
 8000d4c:	fb00 441e 	mls	r4, r0, lr, r4
 8000d50:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d54:	fb0e f90c 	mul.w	r9, lr, ip
 8000d58:	45a1      	cmp	r9, r4
 8000d5a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d5e:	d90a      	bls.n	8000d76 <__udivmoddi4+0x1a6>
 8000d60:	193c      	adds	r4, r7, r4
 8000d62:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d66:	f080 8084 	bcs.w	8000e72 <__udivmoddi4+0x2a2>
 8000d6a:	45a1      	cmp	r9, r4
 8000d6c:	f240 8081 	bls.w	8000e72 <__udivmoddi4+0x2a2>
 8000d70:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d74:	443c      	add	r4, r7
 8000d76:	eba4 0409 	sub.w	r4, r4, r9
 8000d7a:	fa1f f983 	uxth.w	r9, r3
 8000d7e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d82:	fb00 4413 	mls	r4, r0, r3, r4
 8000d86:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d8a:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d8e:	45a4      	cmp	ip, r4
 8000d90:	d907      	bls.n	8000da2 <__udivmoddi4+0x1d2>
 8000d92:	193c      	adds	r4, r7, r4
 8000d94:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d98:	d267      	bcs.n	8000e6a <__udivmoddi4+0x29a>
 8000d9a:	45a4      	cmp	ip, r4
 8000d9c:	d965      	bls.n	8000e6a <__udivmoddi4+0x29a>
 8000d9e:	3b02      	subs	r3, #2
 8000da0:	443c      	add	r4, r7
 8000da2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000da6:	fba0 9302 	umull	r9, r3, r0, r2
 8000daa:	eba4 040c 	sub.w	r4, r4, ip
 8000dae:	429c      	cmp	r4, r3
 8000db0:	46ce      	mov	lr, r9
 8000db2:	469c      	mov	ip, r3
 8000db4:	d351      	bcc.n	8000e5a <__udivmoddi4+0x28a>
 8000db6:	d04e      	beq.n	8000e56 <__udivmoddi4+0x286>
 8000db8:	b155      	cbz	r5, 8000dd0 <__udivmoddi4+0x200>
 8000dba:	ebb8 030e 	subs.w	r3, r8, lr
 8000dbe:	eb64 040c 	sbc.w	r4, r4, ip
 8000dc2:	fa04 f606 	lsl.w	r6, r4, r6
 8000dc6:	40cb      	lsrs	r3, r1
 8000dc8:	431e      	orrs	r6, r3
 8000dca:	40cc      	lsrs	r4, r1
 8000dcc:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd0:	2100      	movs	r1, #0
 8000dd2:	e750      	b.n	8000c76 <__udivmoddi4+0xa6>
 8000dd4:	f1c2 0320 	rsb	r3, r2, #32
 8000dd8:	fa20 f103 	lsr.w	r1, r0, r3
 8000ddc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de0:	fa24 f303 	lsr.w	r3, r4, r3
 8000de4:	4094      	lsls	r4, r2
 8000de6:	430c      	orrs	r4, r1
 8000de8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000dec:	fa00 fe02 	lsl.w	lr, r0, r2
 8000df0:	fa1f f78c 	uxth.w	r7, ip
 8000df4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000df8:	fb08 3110 	mls	r1, r8, r0, r3
 8000dfc:	0c23      	lsrs	r3, r4, #16
 8000dfe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e02:	fb00 f107 	mul.w	r1, r0, r7
 8000e06:	4299      	cmp	r1, r3
 8000e08:	d908      	bls.n	8000e1c <__udivmoddi4+0x24c>
 8000e0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e0e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e12:	d22c      	bcs.n	8000e6e <__udivmoddi4+0x29e>
 8000e14:	4299      	cmp	r1, r3
 8000e16:	d92a      	bls.n	8000e6e <__udivmoddi4+0x29e>
 8000e18:	3802      	subs	r0, #2
 8000e1a:	4463      	add	r3, ip
 8000e1c:	1a5b      	subs	r3, r3, r1
 8000e1e:	b2a4      	uxth	r4, r4
 8000e20:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e24:	fb08 3311 	mls	r3, r8, r1, r3
 8000e28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e2c:	fb01 f307 	mul.w	r3, r1, r7
 8000e30:	42a3      	cmp	r3, r4
 8000e32:	d908      	bls.n	8000e46 <__udivmoddi4+0x276>
 8000e34:	eb1c 0404 	adds.w	r4, ip, r4
 8000e38:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e3c:	d213      	bcs.n	8000e66 <__udivmoddi4+0x296>
 8000e3e:	42a3      	cmp	r3, r4
 8000e40:	d911      	bls.n	8000e66 <__udivmoddi4+0x296>
 8000e42:	3902      	subs	r1, #2
 8000e44:	4464      	add	r4, ip
 8000e46:	1ae4      	subs	r4, r4, r3
 8000e48:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e4c:	e739      	b.n	8000cc2 <__udivmoddi4+0xf2>
 8000e4e:	4604      	mov	r4, r0
 8000e50:	e6f0      	b.n	8000c34 <__udivmoddi4+0x64>
 8000e52:	4608      	mov	r0, r1
 8000e54:	e706      	b.n	8000c64 <__udivmoddi4+0x94>
 8000e56:	45c8      	cmp	r8, r9
 8000e58:	d2ae      	bcs.n	8000db8 <__udivmoddi4+0x1e8>
 8000e5a:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e5e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e62:	3801      	subs	r0, #1
 8000e64:	e7a8      	b.n	8000db8 <__udivmoddi4+0x1e8>
 8000e66:	4631      	mov	r1, r6
 8000e68:	e7ed      	b.n	8000e46 <__udivmoddi4+0x276>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	e799      	b.n	8000da2 <__udivmoddi4+0x1d2>
 8000e6e:	4630      	mov	r0, r6
 8000e70:	e7d4      	b.n	8000e1c <__udivmoddi4+0x24c>
 8000e72:	46d6      	mov	lr, sl
 8000e74:	e77f      	b.n	8000d76 <__udivmoddi4+0x1a6>
 8000e76:	4463      	add	r3, ip
 8000e78:	3802      	subs	r0, #2
 8000e7a:	e74d      	b.n	8000d18 <__udivmoddi4+0x148>
 8000e7c:	4606      	mov	r6, r0
 8000e7e:	4623      	mov	r3, r4
 8000e80:	4608      	mov	r0, r1
 8000e82:	e70f      	b.n	8000ca4 <__udivmoddi4+0xd4>
 8000e84:	3e02      	subs	r6, #2
 8000e86:	4463      	add	r3, ip
 8000e88:	e730      	b.n	8000cec <__udivmoddi4+0x11c>
 8000e8a:	bf00      	nop

08000e8c <__aeabi_idiv0>:
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop

08000e90 <SimpleKalmanFilter_UpdateEstimate>:
    filter->last_estimate = 0;
    filter->current_estimate = 0;
}

// Function to update the estimate based on the new measurement
float SimpleKalmanFilter_UpdateEstimate(SimpleKalmanFilter *filter, float mea) {
 8000e90:	b480      	push	{r7}
 8000e92:	b083      	sub	sp, #12
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
 8000e98:	ed87 0a00 	vstr	s0, [r7]
    filter->kalman_gain = filter->err_estimate / (filter->err_estimate + filter->err_measure);
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	edd3 6a01 	vldr	s13, [r3, #4]
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	ed93 7a01 	vldr	s14, [r3, #4]
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	edd3 7a00 	vldr	s15, [r3]
 8000eae:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000eb2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	edc3 7a03 	vstr	s15, [r3, #12]
    filter->current_estimate = filter->last_estimate + filter->kalman_gain * (mea - filter->last_estimate);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	ed93 7a04 	vldr	s14, [r3, #16]
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	edd3 6a03 	vldr	s13, [r3, #12]
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	edd3 7a04 	vldr	s15, [r3, #16]
 8000ece:	ed97 6a00 	vldr	s12, [r7]
 8000ed2:	ee76 7a67 	vsub.f32	s15, s12, s15
 8000ed6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000eda:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	edc3 7a05 	vstr	s15, [r3, #20]
    filter->err_estimate = (1.0f - filter->kalman_gain) * filter->err_estimate +
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	edd3 7a03 	vldr	s15, [r3, #12]
 8000eea:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000eee:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	edd3 7a01 	vldr	s15, [r3, #4]
 8000ef8:	ee27 7a27 	vmul.f32	s14, s14, s15
                           fabsf(filter->last_estimate - filter->current_estimate) * filter->q;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	edd3 6a04 	vldr	s13, [r3, #16]
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	edd3 7a05 	vldr	s15, [r3, #20]
 8000f08:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000f0c:	eef0 6ae7 	vabs.f32	s13, s15
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	edd3 7a02 	vldr	s15, [r3, #8]
 8000f16:	ee66 7aa7 	vmul.f32	s15, s13, s15
    filter->err_estimate = (1.0f - filter->kalman_gain) * filter->err_estimate +
 8000f1a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	edc3 7a01 	vstr	s15, [r3, #4]
    filter->last_estimate = filter->current_estimate;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	695a      	ldr	r2, [r3, #20]
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	611a      	str	r2, [r3, #16]

    return filter->current_estimate;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	695b      	ldr	r3, [r3, #20]
 8000f30:	ee07 3a90 	vmov	s15, r3
}
 8000f34:	eeb0 0a67 	vmov.f32	s0, s15
 8000f38:	370c      	adds	r7, #12
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
	...

08000f44 <MX_I2C1_Init>:
  }

}*/

void MX_I2C1_Init(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000f48:	4b12      	ldr	r3, [pc, #72]	@ (8000f94 <MX_I2C1_Init+0x50>)
 8000f4a:	4a13      	ldr	r2, [pc, #76]	@ (8000f98 <MX_I2C1_Init+0x54>)
 8000f4c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000f4e:	4b11      	ldr	r3, [pc, #68]	@ (8000f94 <MX_I2C1_Init+0x50>)
 8000f50:	4a12      	ldr	r2, [pc, #72]	@ (8000f9c <MX_I2C1_Init+0x58>)
 8000f52:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f54:	4b0f      	ldr	r3, [pc, #60]	@ (8000f94 <MX_I2C1_Init+0x50>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000f5a:	4b0e      	ldr	r3, [pc, #56]	@ (8000f94 <MX_I2C1_Init+0x50>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f60:	4b0c      	ldr	r3, [pc, #48]	@ (8000f94 <MX_I2C1_Init+0x50>)
 8000f62:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000f66:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f68:	4b0a      	ldr	r3, [pc, #40]	@ (8000f94 <MX_I2C1_Init+0x50>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000f6e:	4b09      	ldr	r3, [pc, #36]	@ (8000f94 <MX_I2C1_Init+0x50>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f74:	4b07      	ldr	r3, [pc, #28]	@ (8000f94 <MX_I2C1_Init+0x50>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f7a:	4b06      	ldr	r3, [pc, #24]	@ (8000f94 <MX_I2C1_Init+0x50>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f80:	4804      	ldr	r0, [pc, #16]	@ (8000f94 <MX_I2C1_Init+0x50>)
 8000f82:	f002 f97f 	bl	8003284 <HAL_I2C_Init>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000f8c:	f000 f956 	bl	800123c <Error_Handler>
  }


}
 8000f90:	bf00      	nop
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	200001bc 	.word	0x200001bc
 8000f98:	40005400 	.word	0x40005400
 8000f9c:	00061a80 	.word	0x00061a80

08000fa0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fa4:	f001 fdb0 	bl	8002b08 <HAL_Init>
  //printf("khởi tạo thành công");

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fa8:	f000 f890 	bl	80010cc <SystemClock_Config>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
 // MX_GPIO_Init();
  MX_I2C1_Init();
 8000fac:	f7ff ffca 	bl	8000f44 <MX_I2C1_Init>
 // MX_USART1_UART_Init();
  MX_USART2_UART_Init();
 8000fb0:	f001 fd56 	bl	8002a60 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  while (MPU6050_Init(&hi2c1) == 1);
 8000fb4:	bf00      	nop
 8000fb6:	483c      	ldr	r0, [pc, #240]	@ (80010a8 <main+0x108>)
 8000fb8:	f000 f946 	bl	8001248 <MPU6050_Init>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b01      	cmp	r3, #1
 8000fc0:	d0f9      	beq.n	8000fb6 <main+0x16>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(status_MPU6050){
 8000fc2:	4b3a      	ldr	r3, [pc, #232]	@ (80010ac <main+0x10c>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d007      	beq.n	8000fda <main+0x3a>
			  MPU6050_Balance_Data(&hi2c1, &MPU6050);
 8000fca:	4939      	ldr	r1, [pc, #228]	@ (80010b0 <main+0x110>)
 8000fcc:	4836      	ldr	r0, [pc, #216]	@ (80010a8 <main+0x108>)
 8000fce:	f000 ffeb 	bl	8001fa8 <MPU6050_Balance_Data>
			  status_MPU6050 = false;
 8000fd2:	4b36      	ldr	r3, [pc, #216]	@ (80010ac <main+0x10c>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	601a      	str	r2, [r3, #0]
 8000fd8:	e061      	b.n	800109e <main+0xfe>
	  }else{
		 Filter_getAngleZ(&hi2c1, &MPU6050);
 8000fda:	4935      	ldr	r1, [pc, #212]	@ (80010b0 <main+0x110>)
 8000fdc:	4832      	ldr	r0, [pc, #200]	@ (80010a8 <main+0x108>)
 8000fde:	f000 f98b 	bl	80012f8 <Filter_getAngleZ>

		 gyro_z = MPU6050.Gyro_Z[0];
 8000fe2:	4b33      	ldr	r3, [pc, #204]	@ (80010b0 <main+0x110>)
 8000fe4:	f503 534a 	add.w	r3, r3, #12928	@ 0x3280
 8000fe8:	3310      	adds	r3, #16
 8000fea:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8000fee:	4610      	mov	r0, r2
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	f7ff fd85 	bl	8000b00 <__aeabi_d2f>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	4a2e      	ldr	r2, [pc, #184]	@ (80010b4 <main+0x114>)
 8000ffa:	6013      	str	r3, [r2, #0]

		 delta_gyroz2 = (int)(MPU6050.Gyro_Z[2] * 10);
 8000ffc:	4b2c      	ldr	r3, [pc, #176]	@ (80010b0 <main+0x110>)
 8000ffe:	f503 534a 	add.w	r3, r3, #12928	@ 0x3280
 8001002:	3320      	adds	r3, #32
 8001004:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8001008:	f04f 0200 	mov.w	r2, #0
 800100c:	4b2a      	ldr	r3, [pc, #168]	@ (80010b8 <main+0x118>)
 800100e:	f7ff fa9f 	bl	8000550 <__aeabi_dmul>
 8001012:	4602      	mov	r2, r0
 8001014:	460b      	mov	r3, r1
 8001016:	4610      	mov	r0, r2
 8001018:	4619      	mov	r1, r3
 800101a:	f7ff fd49 	bl	8000ab0 <__aeabi_d2iz>
 800101e:	ee07 0a90 	vmov	s15, r0
 8001022:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001026:	4b25      	ldr	r3, [pc, #148]	@ (80010bc <main+0x11c>)
 8001028:	edc3 7a00 	vstr	s15, [r3]
		 delta_gyroz1 = (int)(MPU6050.Gyro_Z[1] * 10);
 800102c:	4b20      	ldr	r3, [pc, #128]	@ (80010b0 <main+0x110>)
 800102e:	f503 534a 	add.w	r3, r3, #12928	@ 0x3280
 8001032:	3310      	adds	r3, #16
 8001034:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001038:	f04f 0200 	mov.w	r2, #0
 800103c:	4b1e      	ldr	r3, [pc, #120]	@ (80010b8 <main+0x118>)
 800103e:	f7ff fa87 	bl	8000550 <__aeabi_dmul>
 8001042:	4602      	mov	r2, r0
 8001044:	460b      	mov	r3, r1
 8001046:	4610      	mov	r0, r2
 8001048:	4619      	mov	r1, r3
 800104a:	f7ff fd31 	bl	8000ab0 <__aeabi_d2iz>
 800104e:	ee07 0a90 	vmov	s15, r0
 8001052:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001056:	4b1a      	ldr	r3, [pc, #104]	@ (80010c0 <main+0x120>)
 8001058:	edc3 7a00 	vstr	s15, [r3]
		 delta_gyroz0 = MPU6050.DeltaGyro_Z[0];
 800105c:	4b14      	ldr	r3, [pc, #80]	@ (80010b0 <main+0x110>)
 800105e:	f503 5349 	add.w	r3, r3, #12864	@ 0x3240
 8001062:	3330      	adds	r3, #48	@ 0x30
 8001064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001068:	4610      	mov	r0, r2
 800106a:	4619      	mov	r1, r3
 800106c:	f7ff fd48 	bl	8000b00 <__aeabi_d2f>
 8001070:	4603      	mov	r3, r0
 8001072:	4a14      	ldr	r2, [pc, #80]	@ (80010c4 <main+0x124>)
 8001074:	6013      	str	r3, [r2, #0]
		 K_gz = (int)(MPU6050.KalmanAngleZ * 10);
 8001076:	4b0e      	ldr	r3, [pc, #56]	@ (80010b0 <main+0x110>)
 8001078:	f503 534b 	add.w	r3, r3, #12992	@ 0x32c0
 800107c:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8001080:	f04f 0200 	mov.w	r2, #0
 8001084:	4b0c      	ldr	r3, [pc, #48]	@ (80010b8 <main+0x118>)
 8001086:	f7ff fa63 	bl	8000550 <__aeabi_dmul>
 800108a:	4602      	mov	r2, r0
 800108c:	460b      	mov	r3, r1
 800108e:	4610      	mov	r0, r2
 8001090:	4619      	mov	r1, r3
 8001092:	f7ff fd0d 	bl	8000ab0 <__aeabi_d2iz>
 8001096:	4603      	mov	r3, r0
 8001098:	b21a      	sxth	r2, r3
 800109a:	4b0b      	ldr	r3, [pc, #44]	@ (80010c8 <main+0x128>)
 800109c:	801a      	strh	r2, [r3, #0]

	  }
	 HAL_Delay(2);
 800109e:	2002      	movs	r0, #2
 80010a0:	f001 fda4 	bl	8002bec <HAL_Delay>
	  if(status_MPU6050){
 80010a4:	e78d      	b.n	8000fc2 <main+0x22>
 80010a6:	bf00      	nop
 80010a8:	200001bc 	.word	0x200001bc
 80010ac:	20000090 	.word	0x20000090
 80010b0:	20000210 	.word	0x20000210
 80010b4:	200034d8 	.word	0x200034d8
 80010b8:	40240000 	.word	0x40240000
 80010bc:	200034e4 	.word	0x200034e4
 80010c0:	200034dc 	.word	0x200034dc
 80010c4:	200034e0 	.word	0x200034e0
 80010c8:	200034d4 	.word	0x200034d4

080010cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b094      	sub	sp, #80	@ 0x50
 80010d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010d2:	f107 0320 	add.w	r3, r7, #32
 80010d6:	2230      	movs	r2, #48	@ 0x30
 80010d8:	2100      	movs	r1, #0
 80010da:	4618      	mov	r0, r3
 80010dc:	f004 fda4 	bl	8005c28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010e0:	f107 030c 	add.w	r3, r7, #12
 80010e4:	2200      	movs	r2, #0
 80010e6:	601a      	str	r2, [r3, #0]
 80010e8:	605a      	str	r2, [r3, #4]
 80010ea:	609a      	str	r2, [r3, #8]
 80010ec:	60da      	str	r2, [r3, #12]
 80010ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010f0:	2300      	movs	r3, #0
 80010f2:	60bb      	str	r3, [r7, #8]
 80010f4:	4b28      	ldr	r3, [pc, #160]	@ (8001198 <SystemClock_Config+0xcc>)
 80010f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010f8:	4a27      	ldr	r2, [pc, #156]	@ (8001198 <SystemClock_Config+0xcc>)
 80010fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010fe:	6413      	str	r3, [r2, #64]	@ 0x40
 8001100:	4b25      	ldr	r3, [pc, #148]	@ (8001198 <SystemClock_Config+0xcc>)
 8001102:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001104:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001108:	60bb      	str	r3, [r7, #8]
 800110a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800110c:	2300      	movs	r3, #0
 800110e:	607b      	str	r3, [r7, #4]
 8001110:	4b22      	ldr	r3, [pc, #136]	@ (800119c <SystemClock_Config+0xd0>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001118:	4a20      	ldr	r2, [pc, #128]	@ (800119c <SystemClock_Config+0xd0>)
 800111a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800111e:	6013      	str	r3, [r2, #0]
 8001120:	4b1e      	ldr	r3, [pc, #120]	@ (800119c <SystemClock_Config+0xd0>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001128:	607b      	str	r3, [r7, #4]
 800112a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800112c:	2302      	movs	r3, #2
 800112e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001130:	2301      	movs	r3, #1
 8001132:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001134:	2310      	movs	r3, #16
 8001136:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001138:	2302      	movs	r3, #2
 800113a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800113c:	2300      	movs	r3, #0
 800113e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001140:	2308      	movs	r3, #8
 8001142:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8001144:	2354      	movs	r3, #84	@ 0x54
 8001146:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001148:	2302      	movs	r3, #2
 800114a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800114c:	2304      	movs	r3, #4
 800114e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001150:	f107 0320 	add.w	r3, r7, #32
 8001154:	4618      	mov	r0, r3
 8001156:	f003 f8b9 	bl	80042cc <HAL_RCC_OscConfig>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001160:	f000 f86c 	bl	800123c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001164:	230f      	movs	r3, #15
 8001166:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001168:	2302      	movs	r3, #2
 800116a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800116c:	2300      	movs	r3, #0
 800116e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001170:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001174:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001176:	2300      	movs	r3, #0
 8001178:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800117a:	f107 030c 	add.w	r3, r7, #12
 800117e:	2102      	movs	r1, #2
 8001180:	4618      	mov	r0, r3
 8001182:	f003 fb1b 	bl	80047bc <HAL_RCC_ClockConfig>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800118c:	f000 f856 	bl	800123c <Error_Handler>
  }
}
 8001190:	bf00      	nop
 8001192:	3750      	adds	r7, #80	@ 0x50
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	40023800 	.word	0x40023800
 800119c:	40007000 	.word	0x40007000

080011a0 <HAL_UART_RxCpltCallback>:
  */


/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]

	if(huart->Instance == huart2.Instance){
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681a      	ldr	r2, [r3, #0]
 80011ac:	4b1d      	ldr	r3, [pc, #116]	@ (8001224 <HAL_UART_RxCpltCallback+0x84>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	429a      	cmp	r2, r3
 80011b2:	d133      	bne.n	800121c <HAL_UART_RxCpltCallback+0x7c>
		HAL_UART_Receive_IT(&huart2,(uint8_t*)&Receive_data,1);
 80011b4:	2201      	movs	r2, #1
 80011b6:	491c      	ldr	r1, [pc, #112]	@ (8001228 <HAL_UART_RxCpltCallback+0x88>)
 80011b8:	481a      	ldr	r0, [pc, #104]	@ (8001224 <HAL_UART_RxCpltCallback+0x84>)
 80011ba:	f003 fdba 	bl	8004d32 <HAL_UART_Receive_IT>
		if(Receive_data == 'z'){
 80011be:	4b1a      	ldr	r3, [pc, #104]	@ (8001228 <HAL_UART_RxCpltCallback+0x88>)
 80011c0:	781b      	ldrb	r3, [r3, #0]
 80011c2:	2b7a      	cmp	r3, #122	@ 0x7a
 80011c4:	d119      	bne.n	80011fa <HAL_UART_RxCpltCallback+0x5a>

			Buffer[0] = (K_gz >> 8) & 0xFF;
 80011c6:	4b19      	ldr	r3, [pc, #100]	@ (800122c <HAL_UART_RxCpltCallback+0x8c>)
 80011c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011cc:	121b      	asrs	r3, r3, #8
 80011ce:	b21b      	sxth	r3, r3
 80011d0:	b2da      	uxtb	r2, r3
 80011d2:	4b17      	ldr	r3, [pc, #92]	@ (8001230 <HAL_UART_RxCpltCallback+0x90>)
 80011d4:	701a      	strb	r2, [r3, #0]
			Buffer[1] = (K_gz) & 0xFF;
 80011d6:	4b15      	ldr	r3, [pc, #84]	@ (800122c <HAL_UART_RxCpltCallback+0x8c>)
 80011d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011dc:	b2da      	uxtb	r2, r3
 80011de:	4b14      	ldr	r3, [pc, #80]	@ (8001230 <HAL_UART_RxCpltCallback+0x90>)
 80011e0:	705a      	strb	r2, [r3, #1]
			HAL_UART_Transmit(&huart2,(uint8_t*)&Buffer[0], 1, 100);
 80011e2:	2364      	movs	r3, #100	@ 0x64
 80011e4:	2201      	movs	r2, #1
 80011e6:	4912      	ldr	r1, [pc, #72]	@ (8001230 <HAL_UART_RxCpltCallback+0x90>)
 80011e8:	480e      	ldr	r0, [pc, #56]	@ (8001224 <HAL_UART_RxCpltCallback+0x84>)
 80011ea:	f003 fd17 	bl	8004c1c <HAL_UART_Transmit>

			HAL_UART_Transmit(&huart2, (uint8_t*)&Buffer[1], 1, 100);
 80011ee:	2364      	movs	r3, #100	@ 0x64
 80011f0:	2201      	movs	r2, #1
 80011f2:	4910      	ldr	r1, [pc, #64]	@ (8001234 <HAL_UART_RxCpltCallback+0x94>)
 80011f4:	480b      	ldr	r0, [pc, #44]	@ (8001224 <HAL_UART_RxCpltCallback+0x84>)
 80011f6:	f003 fd11 	bl	8004c1c <HAL_UART_Transmit>
		}

		if(Receive_data == 'a'){
 80011fa:	4b0b      	ldr	r3, [pc, #44]	@ (8001228 <HAL_UART_RxCpltCallback+0x88>)
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	2b61      	cmp	r3, #97	@ 0x61
 8001200:	d10c      	bne.n	800121c <HAL_UART_RxCpltCallback+0x7c>
			K_gz = 0;
 8001202:	4b0a      	ldr	r3, [pc, #40]	@ (800122c <HAL_UART_RxCpltCallback+0x8c>)
 8001204:	2200      	movs	r2, #0
 8001206:	801a      	strh	r2, [r3, #0]
			MPU6050.KalmanAngleZ = 0;
 8001208:	4b0b      	ldr	r3, [pc, #44]	@ (8001238 <HAL_UART_RxCpltCallback+0x98>)
 800120a:	f503 534b 	add.w	r3, r3, #12992	@ 0x32c0
 800120e:	4619      	mov	r1, r3
 8001210:	f04f 0200 	mov.w	r2, #0
 8001214:	f04f 0300 	mov.w	r3, #0
 8001218:	e941 2302 	strd	r2, r3, [r1, #-8]
		}

	}
}
 800121c:	bf00      	nop
 800121e:	3708      	adds	r7, #8
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	200034ec 	.word	0x200034ec
 8001228:	200034d2 	.word	0x200034d2
 800122c:	200034d4 	.word	0x200034d4
 8001230:	200034d0 	.word	0x200034d0
 8001234:	200034d1 	.word	0x200034d1
 8001238:	20000210 	.word	0x20000210

0800123c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001240:	b672      	cpsid	i
}
 8001242:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001244:	bf00      	nop
 8001246:	e7fd      	b.n	8001244 <Error_Handler+0x8>

08001248 <MPU6050_Init>:
extern SimpleKalmanFilter Filter_Gx;




uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx) {
 8001248:	b580      	push	{r7, lr}
 800124a:	b088      	sub	sp, #32
 800124c:	af04      	add	r7, sp, #16
 800124e:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 8001250:	2364      	movs	r3, #100	@ 0x64
 8001252:	9302      	str	r3, [sp, #8]
 8001254:	2301      	movs	r3, #1
 8001256:	9301      	str	r3, [sp, #4]
 8001258:	f107 030f 	add.w	r3, r7, #15
 800125c:	9300      	str	r3, [sp, #0]
 800125e:	2301      	movs	r3, #1
 8001260:	2275      	movs	r2, #117	@ 0x75
 8001262:	21d0      	movs	r1, #208	@ 0xd0
 8001264:	6878      	ldr	r0, [r7, #4]
 8001266:	f002 fa4b 	bl	8003700 <HAL_I2C_Mem_Read>

    if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
 800126a:	7bfb      	ldrb	r3, [r7, #15]
 800126c:	2b68      	cmp	r3, #104	@ 0x68
 800126e:	d13d      	bne.n	80012ec <MPU6050_Init+0xa4>
    {
    	// thanh ghi quản lý nguồn 0X6B chúng ta nên ghi tất cả số 0 để đánh thức cảm biến
		Data = 0;
 8001270:	2300      	movs	r3, #0
 8001272:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 8001274:	2364      	movs	r3, #100	@ 0x64
 8001276:	9302      	str	r3, [sp, #8]
 8001278:	2301      	movs	r3, #1
 800127a:	9301      	str	r3, [sp, #4]
 800127c:	f107 030e 	add.w	r3, r7, #14
 8001280:	9300      	str	r3, [sp, #0]
 8001282:	2301      	movs	r3, #1
 8001284:	226b      	movs	r2, #107	@ 0x6b
 8001286:	21d0      	movs	r1, #208	@ 0xd0
 8001288:	6878      	ldr	r0, [r7, #4]
 800128a:	f002 f93f 	bl	800350c <HAL_I2C_Mem_Write>

        // Đặt TỐC ĐỘ DỮ LIỆU là 1KHz bằng cách ghi thanh ghi SMPLRT_DIV 8/(7+1)
        Data = 0x07;
 800128e:	2307      	movs	r3, #7
 8001290:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 8001292:	2364      	movs	r3, #100	@ 0x64
 8001294:	9302      	str	r3, [sp, #8]
 8001296:	2301      	movs	r3, #1
 8001298:	9301      	str	r3, [sp, #4]
 800129a:	f107 030e 	add.w	r3, r7, #14
 800129e:	9300      	str	r3, [sp, #0]
 80012a0:	2301      	movs	r3, #1
 80012a2:	2219      	movs	r2, #25
 80012a4:	21d0      	movs	r1, #208	@ 0xd0
 80012a6:	6878      	ldr	r0, [r7, #4]
 80012a8:	f002 f930 	bl	800350c <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g 4g 6g 8g
        Data = 0x00;
 80012ac:	2300      	movs	r3, #0
 80012ae:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 80012b0:	2364      	movs	r3, #100	@ 0x64
 80012b2:	9302      	str	r3, [sp, #8]
 80012b4:	2301      	movs	r3, #1
 80012b6:	9301      	str	r3, [sp, #4]
 80012b8:	f107 030e 	add.w	r3, r7, #14
 80012bc:	9300      	str	r3, [sp, #0]
 80012be:	2301      	movs	r3, #1
 80012c0:	221c      	movs	r2, #28
 80012c2:	21d0      	movs	r1, #208	@ 0xd0
 80012c4:	6878      	ldr	r0, [r7, #4]
 80012c6:	f002 f921 	bl	800350c <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x18;
 80012ca:	2318      	movs	r3, #24
 80012cc:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 80012ce:	2364      	movs	r3, #100	@ 0x64
 80012d0:	9302      	str	r3, [sp, #8]
 80012d2:	2301      	movs	r3, #1
 80012d4:	9301      	str	r3, [sp, #4]
 80012d6:	f107 030e 	add.w	r3, r7, #14
 80012da:	9300      	str	r3, [sp, #0]
 80012dc:	2301      	movs	r3, #1
 80012de:	221b      	movs	r2, #27
 80012e0:	21d0      	movs	r1, #208	@ 0xd0
 80012e2:	6878      	ldr	r0, [r7, #4]
 80012e4:	f002 f912 	bl	800350c <HAL_I2C_Mem_Write>
        return 0;
 80012e8:	2300      	movs	r3, #0
 80012ea:	e000      	b.n	80012ee <MPU6050_Init+0xa6>
    }
    return 1;
 80012ec:	2301      	movs	r3, #1
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3710      	adds	r7, #16
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
	...

080012f8 <Filter_getAngleZ>:
    DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0 + (float) 36.53);
}

bool st = true;
bool st_math = true;
void Filter_getAngleZ(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct){
 80012f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80012fc:	b0a6      	sub	sp, #152	@ 0x98
 80012fe:	af04      	add	r7, sp, #16
 8001300:	61f8      	str	r0, [r7, #28]
 8001302:	61b9      	str	r1, [r7, #24]
	uint8_t Rec_Data[14];
	int16_t temp;

	// Read 14 BYTES of data starting from ACCEL_XOUT_H register

	HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 8001304:	2364      	movs	r3, #100	@ 0x64
 8001306:	9302      	str	r3, [sp, #8]
 8001308:	230e      	movs	r3, #14
 800130a:	9301      	str	r3, [sp, #4]
 800130c:	f107 0320 	add.w	r3, r7, #32
 8001310:	9300      	str	r3, [sp, #0]
 8001312:	2301      	movs	r3, #1
 8001314:	223b      	movs	r2, #59	@ 0x3b
 8001316:	21d0      	movs	r1, #208	@ 0xd0
 8001318:	69f8      	ldr	r0, [r7, #28]
 800131a:	f002 f9f1 	bl	8003700 <HAL_I2C_Mem_Read>

	DataStruct->Accel_X_RAW = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
 800131e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001322:	021b      	lsls	r3, r3, #8
 8001324:	b21a      	sxth	r2, r3
 8001326:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800132a:	b21b      	sxth	r3, r3
 800132c:	4313      	orrs	r3, r2
 800132e:	b21a      	sxth	r2, r3
 8001330:	69bb      	ldr	r3, [r7, #24]
 8001332:	801a      	strh	r2, [r3, #0]
	DataStruct->Accel_Y_RAW = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 8001334:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001338:	021b      	lsls	r3, r3, #8
 800133a:	b21a      	sxth	r2, r3
 800133c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001340:	b21b      	sxth	r3, r3
 8001342:	4313      	orrs	r3, r2
 8001344:	b21a      	sxth	r2, r3
 8001346:	69bb      	ldr	r3, [r7, #24]
 8001348:	805a      	strh	r2, [r3, #2]
	DataStruct->Accel_Z_RAW = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 800134a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800134e:	021b      	lsls	r3, r3, #8
 8001350:	b21a      	sxth	r2, r3
 8001352:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001356:	b21b      	sxth	r3, r3
 8001358:	4313      	orrs	r3, r2
 800135a:	b21a      	sxth	r2, r3
 800135c:	69bb      	ldr	r3, [r7, #24]
 800135e:	809a      	strh	r2, [r3, #4]
	temp = (int16_t) (Rec_Data[6] << 8 | Rec_Data[7]);
 8001360:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001364:	021b      	lsls	r3, r3, #8
 8001366:	b21a      	sxth	r2, r3
 8001368:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800136c:	b21b      	sxth	r3, r3
 800136e:	4313      	orrs	r3, r2
 8001370:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
	DataStruct->Gyro_X_RAW = (int16_t) (Rec_Data[8] << 8 | Rec_Data[9]);
 8001374:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001378:	021b      	lsls	r3, r3, #8
 800137a:	b21a      	sxth	r2, r3
 800137c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8001380:	b21b      	sxth	r3, r3
 8001382:	4313      	orrs	r3, r2
 8001384:	b21a      	sxth	r2, r3
 8001386:	69bb      	ldr	r3, [r7, #24]
 8001388:	841a      	strh	r2, [r3, #32]
	DataStruct->Gyro_Y_RAW = (int16_t) (Rec_Data[10] << 8 | Rec_Data[11]);
 800138a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800138e:	021b      	lsls	r3, r3, #8
 8001390:	b21a      	sxth	r2, r3
 8001392:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8001396:	b21b      	sxth	r3, r3
 8001398:	4313      	orrs	r3, r2
 800139a:	b21a      	sxth	r2, r3
 800139c:	69bb      	ldr	r3, [r7, #24]
 800139e:	845a      	strh	r2, [r3, #34]	@ 0x22
	DataStruct->Gyro_Z_RAW = (int16_t) (Rec_Data[12] << 8 | Rec_Data[13]);
 80013a0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80013a4:	021b      	lsls	r3, r3, #8
 80013a6:	b21a      	sxth	r2, r3
 80013a8:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80013ac:	b21b      	sxth	r3, r3
 80013ae:	4313      	orrs	r3, r2
 80013b0:	b21a      	sxth	r2, r3
 80013b2:	69bb      	ldr	r3, [r7, #24]
 80013b4:	849a      	strh	r2, [r3, #36]	@ 0x24

		// Acc X, Y ,Z

	// Đọc giá trị thô

	DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0 - DataStruct->Num_X[0];
 80013b6:	69bb      	ldr	r3, [r7, #24]
 80013b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013bc:	4618      	mov	r0, r3
 80013be:	f7ff f85d 	bl	800047c <__aeabi_i2d>
 80013c2:	f04f 0200 	mov.w	r2, #0
 80013c6:	4bbc      	ldr	r3, [pc, #752]	@ (80016b8 <Filter_getAngleZ+0x3c0>)
 80013c8:	f7ff f9ec 	bl	80007a4 <__aeabi_ddiv>
 80013cc:	4602      	mov	r2, r0
 80013ce:	460b      	mov	r3, r1
 80013d0:	4610      	mov	r0, r2
 80013d2:	4619      	mov	r1, r3
 80013d4:	69bb      	ldr	r3, [r7, #24]
 80013d6:	f503 634f 	add.w	r3, r3, #3312	@ 0xcf0
 80013da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013de:	f7fe feff 	bl	80001e0 <__aeabi_dsub>
 80013e2:	4602      	mov	r2, r0
 80013e4:	460b      	mov	r3, r1
 80013e6:	69b9      	ldr	r1, [r7, #24]
 80013e8:	e9c1 2302 	strd	r2, r3, [r1, #8]
	DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0 - DataStruct->Num_Y[0];
 80013ec:	69bb      	ldr	r3, [r7, #24]
 80013ee:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80013f2:	4618      	mov	r0, r3
 80013f4:	f7ff f842 	bl	800047c <__aeabi_i2d>
 80013f8:	f04f 0200 	mov.w	r2, #0
 80013fc:	4bae      	ldr	r3, [pc, #696]	@ (80016b8 <Filter_getAngleZ+0x3c0>)
 80013fe:	f7ff f9d1 	bl	80007a4 <__aeabi_ddiv>
 8001402:	4602      	mov	r2, r0
 8001404:	460b      	mov	r3, r1
 8001406:	4610      	mov	r0, r2
 8001408:	4619      	mov	r1, r3
 800140a:	69bb      	ldr	r3, [r7, #24]
 800140c:	f503 53cb 	add.w	r3, r3, #6496	@ 0x1960
 8001410:	3310      	adds	r3, #16
 8001412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001416:	f7fe fee3 	bl	80001e0 <__aeabi_dsub>
 800141a:	4602      	mov	r2, r0
 800141c:	460b      	mov	r3, r1
 800141e:	69b9      	ldr	r1, [r7, #24]
 8001420:	e9c1 2304 	strd	r2, r3, [r1, #16]
	DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector - DataStruct->Num_Z[0];
 8001424:	69bb      	ldr	r3, [r7, #24]
 8001426:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800142a:	4618      	mov	r0, r3
 800142c:	f7ff f826 	bl	800047c <__aeabi_i2d>
 8001430:	a39d      	add	r3, pc, #628	@ (adr r3, 80016a8 <Filter_getAngleZ+0x3b0>)
 8001432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001436:	f7ff f9b5 	bl	80007a4 <__aeabi_ddiv>
 800143a:	4602      	mov	r2, r0
 800143c:	460b      	mov	r3, r1
 800143e:	4610      	mov	r0, r2
 8001440:	4619      	mov	r1, r3
 8001442:	69bb      	ldr	r3, [r7, #24]
 8001444:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	@ 0x70
 8001448:	f7fe feca 	bl	80001e0 <__aeabi_dsub>
 800144c:	4602      	mov	r2, r0
 800144e:	460b      	mov	r3, r1
 8001450:	69b9      	ldr	r1, [r7, #24]
 8001452:	e9c1 2306 	strd	r2, r3, [r1, #24]
	DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0 + (float) 36.53);
 8001456:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	@ 0x7e
 800145a:	ee07 3a90 	vmov	s15, r3
 800145e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001462:	eddf 6a96 	vldr	s13, [pc, #600]	@ 80016bc <Filter_getAngleZ+0x3c4>
 8001466:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800146a:	ed9f 7a95 	vldr	s14, [pc, #596]	@ 80016c0 <Filter_getAngleZ+0x3c8>
 800146e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001472:	69bb      	ldr	r3, [r7, #24]
 8001474:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8001478:	edc3 7aa8 	vstr	s15, [r3, #672]	@ 0x2a0
	DataStruct->Gx = DataStruct->Gyro_X_RAW / 16.4;
 800147c:	69bb      	ldr	r3, [r7, #24]
 800147e:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001482:	4618      	mov	r0, r3
 8001484:	f7fe fffa 	bl	800047c <__aeabi_i2d>
 8001488:	a389      	add	r3, pc, #548	@ (adr r3, 80016b0 <Filter_getAngleZ+0x3b8>)
 800148a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800148e:	f7ff f989 	bl	80007a4 <__aeabi_ddiv>
 8001492:	4602      	mov	r2, r0
 8001494:	460b      	mov	r3, r1
 8001496:	69b9      	ldr	r1, [r7, #24]
 8001498:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
	DataStruct->Gy = DataStruct->Gyro_Y_RAW / 16.4;
 800149c:	69bb      	ldr	r3, [r7, #24]
 800149e:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	@ 0x22
 80014a2:	4618      	mov	r0, r3
 80014a4:	f7fe ffea 	bl	800047c <__aeabi_i2d>
 80014a8:	a381      	add	r3, pc, #516	@ (adr r3, 80016b0 <Filter_getAngleZ+0x3b8>)
 80014aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ae:	f7ff f979 	bl	80007a4 <__aeabi_ddiv>
 80014b2:	4602      	mov	r2, r0
 80014b4:	460b      	mov	r3, r1
 80014b6:	69b9      	ldr	r1, [r7, #24]
 80014b8:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
	DataStruct->Gz = DataStruct->Gyro_Z_RAW / 16.4;
 80014bc:	69bb      	ldr	r3, [r7, #24]
 80014be:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 80014c2:	4618      	mov	r0, r3
 80014c4:	f7fe ffda 	bl	800047c <__aeabi_i2d>
 80014c8:	a379      	add	r3, pc, #484	@ (adr r3, 80016b0 <Filter_getAngleZ+0x3b8>)
 80014ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ce:	f7ff f969 	bl	80007a4 <__aeabi_ddiv>
 80014d2:	4602      	mov	r2, r0
 80014d4:	460b      	mov	r3, r1
 80014d6:	69b9      	ldr	r1, [r7, #24]
 80014d8:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38


	/// Filter làm mịn giá trị

	DataStruct->Ax = SimpleKalmanFilter_UpdateEstimate(&Filter_Ax, DataStruct->Ax);
 80014dc:	69bb      	ldr	r3, [r7, #24]
 80014de:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80014e2:	4610      	mov	r0, r2
 80014e4:	4619      	mov	r1, r3
 80014e6:	f7ff fb0b 	bl	8000b00 <__aeabi_d2f>
 80014ea:	4603      	mov	r3, r0
 80014ec:	ee00 3a10 	vmov	s0, r3
 80014f0:	4874      	ldr	r0, [pc, #464]	@ (80016c4 <Filter_getAngleZ+0x3cc>)
 80014f2:	f7ff fccd 	bl	8000e90 <SimpleKalmanFilter_UpdateEstimate>
 80014f6:	ee10 3a10 	vmov	r3, s0
 80014fa:	4618      	mov	r0, r3
 80014fc:	f7fe ffd0 	bl	80004a0 <__aeabi_f2d>
 8001500:	4602      	mov	r2, r0
 8001502:	460b      	mov	r3, r1
 8001504:	69b9      	ldr	r1, [r7, #24]
 8001506:	e9c1 2302 	strd	r2, r3, [r1, #8]
	DataStruct->Ay = SimpleKalmanFilter_UpdateEstimate(&Filter_Ay, DataStruct->Ay);
 800150a:	69bb      	ldr	r3, [r7, #24]
 800150c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001510:	4610      	mov	r0, r2
 8001512:	4619      	mov	r1, r3
 8001514:	f7ff faf4 	bl	8000b00 <__aeabi_d2f>
 8001518:	4603      	mov	r3, r0
 800151a:	ee00 3a10 	vmov	s0, r3
 800151e:	486a      	ldr	r0, [pc, #424]	@ (80016c8 <Filter_getAngleZ+0x3d0>)
 8001520:	f7ff fcb6 	bl	8000e90 <SimpleKalmanFilter_UpdateEstimate>
 8001524:	ee10 3a10 	vmov	r3, s0
 8001528:	4618      	mov	r0, r3
 800152a:	f7fe ffb9 	bl	80004a0 <__aeabi_f2d>
 800152e:	4602      	mov	r2, r0
 8001530:	460b      	mov	r3, r1
 8001532:	69b9      	ldr	r1, [r7, #24]
 8001534:	e9c1 2304 	strd	r2, r3, [r1, #16]
	DataStruct->Az = SimpleKalmanFilter_UpdateEstimate(&Filter_Az, DataStruct->Az);
 8001538:	69bb      	ldr	r3, [r7, #24]
 800153a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800153e:	4610      	mov	r0, r2
 8001540:	4619      	mov	r1, r3
 8001542:	f7ff fadd 	bl	8000b00 <__aeabi_d2f>
 8001546:	4603      	mov	r3, r0
 8001548:	ee00 3a10 	vmov	s0, r3
 800154c:	485f      	ldr	r0, [pc, #380]	@ (80016cc <Filter_getAngleZ+0x3d4>)
 800154e:	f7ff fc9f 	bl	8000e90 <SimpleKalmanFilter_UpdateEstimate>
 8001552:	ee10 3a10 	vmov	r3, s0
 8001556:	4618      	mov	r0, r3
 8001558:	f7fe ffa2 	bl	80004a0 <__aeabi_f2d>
 800155c:	4602      	mov	r2, r0
 800155e:	460b      	mov	r3, r1
 8001560:	69b9      	ldr	r1, [r7, #24]
 8001562:	e9c1 2306 	strd	r2, r3, [r1, #24]

	DataStruct->Gx = SimpleKalmanFilter_UpdateEstimate(&Filter_Gx, DataStruct->Gx - DataStruct->De_Gx);
 8001566:	69bb      	ldr	r3, [r7, #24]
 8001568:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 800156c:	69bb      	ldr	r3, [r7, #24]
 800156e:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8001572:	f7fe fe35 	bl	80001e0 <__aeabi_dsub>
 8001576:	4602      	mov	r2, r0
 8001578:	460b      	mov	r3, r1
 800157a:	4610      	mov	r0, r2
 800157c:	4619      	mov	r1, r3
 800157e:	f7ff fabf 	bl	8000b00 <__aeabi_d2f>
 8001582:	4603      	mov	r3, r0
 8001584:	ee00 3a10 	vmov	s0, r3
 8001588:	4851      	ldr	r0, [pc, #324]	@ (80016d0 <Filter_getAngleZ+0x3d8>)
 800158a:	f7ff fc81 	bl	8000e90 <SimpleKalmanFilter_UpdateEstimate>
 800158e:	ee10 3a10 	vmov	r3, s0
 8001592:	4618      	mov	r0, r3
 8001594:	f7fe ff84 	bl	80004a0 <__aeabi_f2d>
 8001598:	4602      	mov	r2, r0
 800159a:	460b      	mov	r3, r1
 800159c:	69b9      	ldr	r1, [r7, #24]
 800159e:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
	DataStruct->Gx = SimpleKalmanFilter_UpdateEstimate(&Filter_Gx, DataStruct->Gx);
 80015a2:	69bb      	ldr	r3, [r7, #24]
 80015a4:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 80015a8:	4610      	mov	r0, r2
 80015aa:	4619      	mov	r1, r3
 80015ac:	f7ff faa8 	bl	8000b00 <__aeabi_d2f>
 80015b0:	4603      	mov	r3, r0
 80015b2:	ee00 3a10 	vmov	s0, r3
 80015b6:	4846      	ldr	r0, [pc, #280]	@ (80016d0 <Filter_getAngleZ+0x3d8>)
 80015b8:	f7ff fc6a 	bl	8000e90 <SimpleKalmanFilter_UpdateEstimate>
 80015bc:	ee10 3a10 	vmov	r3, s0
 80015c0:	4618      	mov	r0, r3
 80015c2:	f7fe ff6d 	bl	80004a0 <__aeabi_f2d>
 80015c6:	4602      	mov	r2, r0
 80015c8:	460b      	mov	r3, r1
 80015ca:	69b9      	ldr	r1, [r7, #24]
 80015cc:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28

	DataStruct->Gy = SimpleKalmanFilter_UpdateEstimate(&Filter_Gy, DataStruct->Gy - DataStruct->De_Gy);
 80015d0:	69bb      	ldr	r3, [r7, #24]
 80015d2:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 80015d6:	69bb      	ldr	r3, [r7, #24]
 80015d8:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 80015dc:	f7fe fe00 	bl	80001e0 <__aeabi_dsub>
 80015e0:	4602      	mov	r2, r0
 80015e2:	460b      	mov	r3, r1
 80015e4:	4610      	mov	r0, r2
 80015e6:	4619      	mov	r1, r3
 80015e8:	f7ff fa8a 	bl	8000b00 <__aeabi_d2f>
 80015ec:	4603      	mov	r3, r0
 80015ee:	ee00 3a10 	vmov	s0, r3
 80015f2:	4838      	ldr	r0, [pc, #224]	@ (80016d4 <Filter_getAngleZ+0x3dc>)
 80015f4:	f7ff fc4c 	bl	8000e90 <SimpleKalmanFilter_UpdateEstimate>
 80015f8:	ee10 3a10 	vmov	r3, s0
 80015fc:	4618      	mov	r0, r3
 80015fe:	f7fe ff4f 	bl	80004a0 <__aeabi_f2d>
 8001602:	4602      	mov	r2, r0
 8001604:	460b      	mov	r3, r1
 8001606:	69b9      	ldr	r1, [r7, #24]
 8001608:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
	DataStruct->Gy = SimpleKalmanFilter_UpdateEstimate(&Filter_Gy, DataStruct->Gy);
 800160c:	69bb      	ldr	r3, [r7, #24]
 800160e:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001612:	4610      	mov	r0, r2
 8001614:	4619      	mov	r1, r3
 8001616:	f7ff fa73 	bl	8000b00 <__aeabi_d2f>
 800161a:	4603      	mov	r3, r0
 800161c:	ee00 3a10 	vmov	s0, r3
 8001620:	482c      	ldr	r0, [pc, #176]	@ (80016d4 <Filter_getAngleZ+0x3dc>)
 8001622:	f7ff fc35 	bl	8000e90 <SimpleKalmanFilter_UpdateEstimate>
 8001626:	ee10 3a10 	vmov	r3, s0
 800162a:	4618      	mov	r0, r3
 800162c:	f7fe ff38 	bl	80004a0 <__aeabi_f2d>
 8001630:	4602      	mov	r2, r0
 8001632:	460b      	mov	r3, r1
 8001634:	69b9      	ldr	r1, [r7, #24]
 8001636:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30

	DataStruct->Gz = SimpleKalmanFilter_UpdateEstimate(&Filter_Gz, DataStruct->Gz - DataStruct->De_Gz);
 800163a:	69bb      	ldr	r3, [r7, #24]
 800163c:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8001640:	69bb      	ldr	r3, [r7, #24]
 8001642:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 8001646:	f7fe fdcb 	bl	80001e0 <__aeabi_dsub>
 800164a:	4602      	mov	r2, r0
 800164c:	460b      	mov	r3, r1
 800164e:	4610      	mov	r0, r2
 8001650:	4619      	mov	r1, r3
 8001652:	f7ff fa55 	bl	8000b00 <__aeabi_d2f>
 8001656:	4603      	mov	r3, r0
 8001658:	ee00 3a10 	vmov	s0, r3
 800165c:	481e      	ldr	r0, [pc, #120]	@ (80016d8 <Filter_getAngleZ+0x3e0>)
 800165e:	f7ff fc17 	bl	8000e90 <SimpleKalmanFilter_UpdateEstimate>
 8001662:	ee10 3a10 	vmov	r3, s0
 8001666:	4618      	mov	r0, r3
 8001668:	f7fe ff1a 	bl	80004a0 <__aeabi_f2d>
 800166c:	4602      	mov	r2, r0
 800166e:	460b      	mov	r3, r1
 8001670:	69b9      	ldr	r1, [r7, #24]
 8001672:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
	DataStruct->Gz = SimpleKalmanFilter_UpdateEstimate(&Filter_Gz, DataStruct->Gz);
 8001676:	69bb      	ldr	r3, [r7, #24]
 8001678:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800167c:	4610      	mov	r0, r2
 800167e:	4619      	mov	r1, r3
 8001680:	f7ff fa3e 	bl	8000b00 <__aeabi_d2f>
 8001684:	4603      	mov	r3, r0
 8001686:	ee00 3a10 	vmov	s0, r3
 800168a:	4813      	ldr	r0, [pc, #76]	@ (80016d8 <Filter_getAngleZ+0x3e0>)
 800168c:	f7ff fc00 	bl	8000e90 <SimpleKalmanFilter_UpdateEstimate>
 8001690:	ee10 3a10 	vmov	r3, s0
 8001694:	4618      	mov	r0, r3
 8001696:	f7fe ff03 	bl	80004a0 <__aeabi_f2d>
 800169a:	4602      	mov	r2, r0
 800169c:	460b      	mov	r3, r1
 800169e:	69b9      	ldr	r1, [r7, #24]
 80016a0:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
	//DataStruct->Gz = SimpleKalmanFilter_UpdateEstimate(&Filter_Gz, DataStruct->Gz);
	DataStruct->Gyro_Z[0] = DataStruct->Gz;
 80016a4:	69bb      	ldr	r3, [r7, #24]
 80016a6:	e019      	b.n	80016dc <Filter_getAngleZ+0x3e4>
 80016a8:	00000000 	.word	0x00000000
 80016ac:	40cc2900 	.word	0x40cc2900
 80016b0:	66666666 	.word	0x66666666
 80016b4:	40306666 	.word	0x40306666
 80016b8:	40d00000 	.word	0x40d00000
 80016bc:	43aa0000 	.word	0x43aa0000
 80016c0:	42121eb8 	.word	0x42121eb8
 80016c4:	20000000 	.word	0x20000000
 80016c8:	20000018 	.word	0x20000018
 80016cc:	20000030 	.word	0x20000030
 80016d0:	20000078 	.word	0x20000078
 80016d4:	20000060 	.word	0x20000060
 80016d8:	20000048 	.word	0x20000048
 80016dc:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 80016e0:	69bb      	ldr	r3, [r7, #24]
 80016e2:	f503 534a 	add.w	r3, r3, #12928	@ 0x3280
 80016e6:	3310      	adds	r3, #16
 80016e8:	e943 0102 	strd	r0, r1, [r3, #-8]


	// Kalman angle solve
	double dt = (double) (HAL_GetTick() - timer) / 1000;
 80016ec:	f001 fa72 	bl	8002bd4 <HAL_GetTick>
 80016f0:	4602      	mov	r2, r0
 80016f2:	4b65      	ldr	r3, [pc, #404]	@ (8001888 <Filter_getAngleZ+0x590>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	1ad3      	subs	r3, r2, r3
 80016f8:	4618      	mov	r0, r3
 80016fa:	f7fe feaf 	bl	800045c <__aeabi_ui2d>
 80016fe:	f04f 0200 	mov.w	r2, #0
 8001702:	4b62      	ldr	r3, [pc, #392]	@ (800188c <Filter_getAngleZ+0x594>)
 8001704:	f7ff f84e 	bl	80007a4 <__aeabi_ddiv>
 8001708:	4602      	mov	r2, r0
 800170a:	460b      	mov	r3, r1
 800170c:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
	timer = HAL_GetTick();
 8001710:	f001 fa60 	bl	8002bd4 <HAL_GetTick>
 8001714:	4603      	mov	r3, r0
 8001716:	4a5c      	ldr	r2, [pc, #368]	@ (8001888 <Filter_getAngleZ+0x590>)
 8001718:	6013      	str	r3, [r2, #0]
	st_math = true;
 800171a:	4b5d      	ldr	r3, [pc, #372]	@ (8001890 <Filter_getAngleZ+0x598>)
 800171c:	2201      	movs	r2, #1
 800171e:	601a      	str	r2, [r3, #0]

	double roll;
	double roll_sqrt = sqrt(
			DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 8001720:	69bb      	ldr	r3, [r7, #24]
 8001722:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001726:	461a      	mov	r2, r3
 8001728:	69bb      	ldr	r3, [r7, #24]
 800172a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800172e:	fb03 f202 	mul.w	r2, r3, r2
 8001732:	69bb      	ldr	r3, [r7, #24]
 8001734:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001738:	4619      	mov	r1, r3
 800173a:	69bb      	ldr	r3, [r7, #24]
 800173c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001740:	fb01 f303 	mul.w	r3, r1, r3
 8001744:	4413      	add	r3, r2
	double roll_sqrt = sqrt(
 8001746:	4618      	mov	r0, r3
 8001748:	f7fe fe98 	bl	800047c <__aeabi_i2d>
 800174c:	4602      	mov	r2, r0
 800174e:	460b      	mov	r3, r1
 8001750:	ec43 2b10 	vmov	d0, r2, r3
 8001754:	f004 fa9c 	bl	8005c90 <sqrt>
 8001758:	ed87 0b1a 	vstr	d0, [r7, #104]	@ 0x68
	if (roll_sqrt != 0.0) {
 800175c:	f04f 0200 	mov.w	r2, #0
 8001760:	f04f 0300 	mov.w	r3, #0
 8001764:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8001768:	f7ff f95a 	bl	8000a20 <__aeabi_dcmpeq>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d11f      	bne.n	80017b2 <Filter_getAngleZ+0x4ba>
		roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 8001772:	69bb      	ldr	r3, [r7, #24]
 8001774:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001778:	4618      	mov	r0, r3
 800177a:	f7fe fe7f 	bl	800047c <__aeabi_i2d>
 800177e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8001782:	f7ff f80f 	bl	80007a4 <__aeabi_ddiv>
 8001786:	4602      	mov	r2, r0
 8001788:	460b      	mov	r3, r1
 800178a:	ec43 2b17 	vmov	d7, r2, r3
 800178e:	eeb0 0a47 	vmov.f32	s0, s14
 8001792:	eef0 0a67 	vmov.f32	s1, s15
 8001796:	f004 faa7 	bl	8005ce8 <atan>
 800179a:	ec51 0b10 	vmov	r0, r1, d0
 800179e:	a338      	add	r3, pc, #224	@ (adr r3, 8001880 <Filter_getAngleZ+0x588>)
 80017a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017a4:	f7fe fed4 	bl	8000550 <__aeabi_dmul>
 80017a8:	4602      	mov	r2, r0
 80017aa:	460b      	mov	r3, r1
 80017ac:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80
 80017b0:	e005      	b.n	80017be <Filter_getAngleZ+0x4c6>
	} else {
		roll = 0.0;
 80017b2:	f04f 0200 	mov.w	r2, #0
 80017b6:	f04f 0300 	mov.w	r3, #0
 80017ba:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80
	}
	double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 80017be:	69bb      	ldr	r3, [r7, #24]
 80017c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017c4:	425b      	negs	r3, r3
 80017c6:	4618      	mov	r0, r3
 80017c8:	f7fe fe58 	bl	800047c <__aeabi_i2d>
 80017cc:	4604      	mov	r4, r0
 80017ce:	460d      	mov	r5, r1
 80017d0:	69bb      	ldr	r3, [r7, #24]
 80017d2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80017d6:	4618      	mov	r0, r3
 80017d8:	f7fe fe50 	bl	800047c <__aeabi_i2d>
 80017dc:	4602      	mov	r2, r0
 80017de:	460b      	mov	r3, r1
 80017e0:	ec43 2b11 	vmov	d1, r2, r3
 80017e4:	ec45 4b10 	vmov	d0, r4, r5
 80017e8:	f004 fa50 	bl	8005c8c <atan2>
 80017ec:	ec51 0b10 	vmov	r0, r1, d0
 80017f0:	a323      	add	r3, pc, #140	@ (adr r3, 8001880 <Filter_getAngleZ+0x588>)
 80017f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017f6:	f7fe feab 	bl	8000550 <__aeabi_dmul>
 80017fa:	4602      	mov	r2, r0
 80017fc:	460b      	mov	r3, r1
 80017fe:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
	if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90)) {
 8001802:	f04f 0200 	mov.w	r2, #0
 8001806:	4b23      	ldr	r3, [pc, #140]	@ (8001894 <Filter_getAngleZ+0x59c>)
 8001808:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 800180c:	f7ff f912 	bl	8000a34 <__aeabi_dcmplt>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d00d      	beq.n	8001832 <Filter_getAngleZ+0x53a>
 8001816:	69bb      	ldr	r3, [r7, #24]
 8001818:	f503 534a 	add.w	r3, r3, #12928	@ 0x3280
 800181c:	3330      	adds	r3, #48	@ 0x30
 800181e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001822:	f04f 0200 	mov.w	r2, #0
 8001826:	4b1c      	ldr	r3, [pc, #112]	@ (8001898 <Filter_getAngleZ+0x5a0>)
 8001828:	f7ff f922 	bl	8000a70 <__aeabi_dcmpgt>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d117      	bne.n	8001862 <Filter_getAngleZ+0x56a>
 8001832:	f04f 0200 	mov.w	r2, #0
 8001836:	4b18      	ldr	r3, [pc, #96]	@ (8001898 <Filter_getAngleZ+0x5a0>)
 8001838:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 800183c:	f7ff f918 	bl	8000a70 <__aeabi_dcmpgt>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d02c      	beq.n	80018a0 <Filter_getAngleZ+0x5a8>
 8001846:	69bb      	ldr	r3, [r7, #24]
 8001848:	f503 534a 	add.w	r3, r3, #12928	@ 0x3280
 800184c:	3330      	adds	r3, #48	@ 0x30
 800184e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001852:	f04f 0200 	mov.w	r2, #0
 8001856:	4b0f      	ldr	r3, [pc, #60]	@ (8001894 <Filter_getAngleZ+0x59c>)
 8001858:	f7ff f8ec 	bl	8000a34 <__aeabi_dcmplt>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d01e      	beq.n	80018a0 <Filter_getAngleZ+0x5a8>
		KalmanY.angle = pitch;
 8001862:	490e      	ldr	r1, [pc, #56]	@ (800189c <Filter_getAngleZ+0x5a4>)
 8001864:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8001868:	e9c1 2306 	strd	r2, r3, [r1, #24]
		DataStruct->KalmanAngleY = pitch;
 800186c:	69bb      	ldr	r3, [r7, #24]
 800186e:	f503 534a 	add.w	r3, r3, #12928	@ 0x3280
 8001872:	3330      	adds	r3, #48	@ 0x30
 8001874:	4619      	mov	r1, r3
 8001876:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 800187a:	e9c1 2300 	strd	r2, r3, [r1]
 800187e:	e027      	b.n	80018d0 <Filter_getAngleZ+0x5d8>
 8001880:	1a63c1f8 	.word	0x1a63c1f8
 8001884:	404ca5dc 	.word	0x404ca5dc
 8001888:	200034e8 	.word	0x200034e8
 800188c:	408f4000 	.word	0x408f4000
 8001890:	2000012c 	.word	0x2000012c
 8001894:	c0568000 	.word	0xc0568000
 8001898:	40568000 	.word	0x40568000
 800189c:	200000e0 	.word	0x200000e0
	} else {
		DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch,DataStruct->Gy, dt);
 80018a0:	69bb      	ldr	r3, [r7, #24]
 80018a2:	ed93 7b0c 	vldr	d7, [r3, #48]	@ 0x30
 80018a6:	ed97 2b1c 	vldr	d2, [r7, #112]	@ 0x70
 80018aa:	eeb0 1a47 	vmov.f32	s2, s14
 80018ae:	eef0 1a67 	vmov.f32	s3, s15
 80018b2:	ed97 0b18 	vldr	d0, [r7, #96]	@ 0x60
 80018b6:	48c8      	ldr	r0, [pc, #800]	@ (8001bd8 <Filter_getAngleZ+0x8e0>)
 80018b8:	f000 fe36 	bl	8002528 <Kalman_getAngle>
 80018bc:	eeb0 7a40 	vmov.f32	s14, s0
 80018c0:	eef0 7a60 	vmov.f32	s15, s1
 80018c4:	69bb      	ldr	r3, [r7, #24]
 80018c6:	f503 534a 	add.w	r3, r3, #12928	@ 0x3280
 80018ca:	3330      	adds	r3, #48	@ 0x30
 80018cc:	ed83 7b00 	vstr	d7, [r3]
	}
	if (fabs(DataStruct->KalmanAngleY) > 90)
 80018d0:	69bb      	ldr	r3, [r7, #24]
 80018d2:	f503 534a 	add.w	r3, r3, #12928	@ 0x3280
 80018d6:	3330      	adds	r3, #48	@ 0x30
 80018d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018dc:	4692      	mov	sl, r2
 80018de:	f023 4b00 	bic.w	fp, r3, #2147483648	@ 0x80000000
 80018e2:	f04f 0200 	mov.w	r2, #0
 80018e6:	4bbd      	ldr	r3, [pc, #756]	@ (8001bdc <Filter_getAngleZ+0x8e4>)
 80018e8:	4650      	mov	r0, sl
 80018ea:	4659      	mov	r1, fp
 80018ec:	f7ff f8c0 	bl	8000a70 <__aeabi_dcmpgt>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d008      	beq.n	8001908 <Filter_getAngleZ+0x610>
		DataStruct->Gx = -DataStruct->Gx;
 80018f6:	69bb      	ldr	r3, [r7, #24]
 80018f8:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 80018fc:	4690      	mov	r8, r2
 80018fe:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
 8001902:	69bb      	ldr	r3, [r7, #24]
 8001904:	e9c3 890a 	strd	r8, r9, [r3, #40]	@ 0x28
	DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gx, dt);
 8001908:	69bb      	ldr	r3, [r7, #24]
 800190a:	ed93 7b0a 	vldr	d7, [r3, #40]	@ 0x28
 800190e:	ed97 2b1c 	vldr	d2, [r7, #112]	@ 0x70
 8001912:	eeb0 1a47 	vmov.f32	s2, s14
 8001916:	eef0 1a67 	vmov.f32	s3, s15
 800191a:	ed97 0b20 	vldr	d0, [r7, #128]	@ 0x80
 800191e:	48b0      	ldr	r0, [pc, #704]	@ (8001be0 <Filter_getAngleZ+0x8e8>)
 8001920:	f000 fe02 	bl	8002528 <Kalman_getAngle>
 8001924:	eeb0 7a40 	vmov.f32	s14, s0
 8001928:	eef0 7a60 	vmov.f32	s15, s1
 800192c:	69bb      	ldr	r3, [r7, #24]
 800192e:	f503 534a 	add.w	r3, r3, #12928	@ 0x3280
 8001932:	3330      	adds	r3, #48	@ 0x30
 8001934:	ed03 7b02 	vstr	d7, [r3, #-8]


	double sin_roll = sin(DataStruct->KalmanAngleX * DEG_TO_RAD);
 8001938:	69bb      	ldr	r3, [r7, #24]
 800193a:	f503 534a 	add.w	r3, r3, #12928	@ 0x3280
 800193e:	3330      	adds	r3, #48	@ 0x30
 8001940:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8001944:	a3a0      	add	r3, pc, #640	@ (adr r3, 8001bc8 <Filter_getAngleZ+0x8d0>)
 8001946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800194a:	f7fe ff2b 	bl	80007a4 <__aeabi_ddiv>
 800194e:	4602      	mov	r2, r0
 8001950:	460b      	mov	r3, r1
 8001952:	ec43 2b17 	vmov	d7, r2, r3
 8001956:	eeb0 0a47 	vmov.f32	s0, s14
 800195a:	eef0 0a67 	vmov.f32	s1, s15
 800195e:	f004 fbb7 	bl	80060d0 <sin>
 8001962:	ed87 0b16 	vstr	d0, [r7, #88]	@ 0x58
	double cos_roll = cos(DataStruct->KalmanAngleX * DEG_TO_RAD);
 8001966:	69bb      	ldr	r3, [r7, #24]
 8001968:	f503 534a 	add.w	r3, r3, #12928	@ 0x3280
 800196c:	3330      	adds	r3, #48	@ 0x30
 800196e:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8001972:	a395      	add	r3, pc, #596	@ (adr r3, 8001bc8 <Filter_getAngleZ+0x8d0>)
 8001974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001978:	f7fe ff14 	bl	80007a4 <__aeabi_ddiv>
 800197c:	4602      	mov	r2, r0
 800197e:	460b      	mov	r3, r1
 8001980:	ec43 2b17 	vmov	d7, r2, r3
 8001984:	eeb0 0a47 	vmov.f32	s0, s14
 8001988:	eef0 0a67 	vmov.f32	s1, s15
 800198c:	f004 fb44 	bl	8006018 <cos>
 8001990:	ed87 0b14 	vstr	d0, [r7, #80]	@ 0x50
	double sin_pitch = sin(DataStruct->KalmanAngleY * DEG_TO_RAD);
 8001994:	69bb      	ldr	r3, [r7, #24]
 8001996:	f503 534a 	add.w	r3, r3, #12928	@ 0x3280
 800199a:	3330      	adds	r3, #48	@ 0x30
 800199c:	e9d3 0100 	ldrd	r0, r1, [r3]
 80019a0:	a389      	add	r3, pc, #548	@ (adr r3, 8001bc8 <Filter_getAngleZ+0x8d0>)
 80019a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019a6:	f7fe fefd 	bl	80007a4 <__aeabi_ddiv>
 80019aa:	4602      	mov	r2, r0
 80019ac:	460b      	mov	r3, r1
 80019ae:	ec43 2b17 	vmov	d7, r2, r3
 80019b2:	eeb0 0a47 	vmov.f32	s0, s14
 80019b6:	eef0 0a67 	vmov.f32	s1, s15
 80019ba:	f004 fb89 	bl	80060d0 <sin>
 80019be:	ed87 0b12 	vstr	d0, [r7, #72]	@ 0x48
	double cos_pitch = cos(DataStruct->KalmanAngleY * DEG_TO_RAD);
 80019c2:	69bb      	ldr	r3, [r7, #24]
 80019c4:	f503 534a 	add.w	r3, r3, #12928	@ 0x3280
 80019c8:	3330      	adds	r3, #48	@ 0x30
 80019ca:	e9d3 0100 	ldrd	r0, r1, [r3]
 80019ce:	a37e      	add	r3, pc, #504	@ (adr r3, 8001bc8 <Filter_getAngleZ+0x8d0>)
 80019d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019d4:	f7fe fee6 	bl	80007a4 <__aeabi_ddiv>
 80019d8:	4602      	mov	r2, r0
 80019da:	460b      	mov	r3, r1
 80019dc:	ec43 2b17 	vmov	d7, r2, r3
 80019e0:	eeb0 0a47 	vmov.f32	s0, s14
 80019e4:	eef0 0a67 	vmov.f32	s1, s15
 80019e8:	f004 fb16 	bl	8006018 <cos>
 80019ec:	ed87 0b10 	vstr	d0, [r7, #64]	@ 0x40

	// Sử dụng công thức tính yaw hiệu chỉnh dựa trên roll, pitch và yaw
	double yaw_corrected = atan2(sin_roll * sin_pitch * cos_pitch + cos_roll * sin_pitch, cos_pitch) * RAD_TO_DEG;
 80019f0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80019f4:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 80019f8:	f7fe fdaa 	bl	8000550 <__aeabi_dmul>
 80019fc:	4602      	mov	r2, r0
 80019fe:	460b      	mov	r3, r1
 8001a00:	4610      	mov	r0, r2
 8001a02:	4619      	mov	r1, r3
 8001a04:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001a08:	f7fe fda2 	bl	8000550 <__aeabi_dmul>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	460b      	mov	r3, r1
 8001a10:	4614      	mov	r4, r2
 8001a12:	461d      	mov	r5, r3
 8001a14:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001a18:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8001a1c:	f7fe fd98 	bl	8000550 <__aeabi_dmul>
 8001a20:	4602      	mov	r2, r0
 8001a22:	460b      	mov	r3, r1
 8001a24:	4620      	mov	r0, r4
 8001a26:	4629      	mov	r1, r5
 8001a28:	f7fe fbdc 	bl	80001e4 <__adddf3>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	460b      	mov	r3, r1
 8001a30:	ec43 2b17 	vmov	d7, r2, r3
 8001a34:	ed97 1b10 	vldr	d1, [r7, #64]	@ 0x40
 8001a38:	eeb0 0a47 	vmov.f32	s0, s14
 8001a3c:	eef0 0a67 	vmov.f32	s1, s15
 8001a40:	f004 f924 	bl	8005c8c <atan2>
 8001a44:	ec51 0b10 	vmov	r0, r1, d0
 8001a48:	a35f      	add	r3, pc, #380	@ (adr r3, 8001bc8 <Filter_getAngleZ+0x8d0>)
 8001a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a4e:	f7fe fd7f 	bl	8000550 <__aeabi_dmul>
 8001a52:	4602      	mov	r2, r0
 8001a54:	460b      	mov	r3, r1
 8001a56:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
	double yaw_correctedd = atan2(sin_pitch * sin_roll * cos_roll + cos_pitch * sin_roll, cos_roll)* RAD_TO_DEG;
 8001a5a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001a5e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8001a62:	f7fe fd75 	bl	8000550 <__aeabi_dmul>
 8001a66:	4602      	mov	r2, r0
 8001a68:	460b      	mov	r3, r1
 8001a6a:	4610      	mov	r0, r2
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001a72:	f7fe fd6d 	bl	8000550 <__aeabi_dmul>
 8001a76:	4602      	mov	r2, r0
 8001a78:	460b      	mov	r3, r1
 8001a7a:	4614      	mov	r4, r2
 8001a7c:	461d      	mov	r5, r3
 8001a7e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001a82:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8001a86:	f7fe fd63 	bl	8000550 <__aeabi_dmul>
 8001a8a:	4602      	mov	r2, r0
 8001a8c:	460b      	mov	r3, r1
 8001a8e:	4620      	mov	r0, r4
 8001a90:	4629      	mov	r1, r5
 8001a92:	f7fe fba7 	bl	80001e4 <__adddf3>
 8001a96:	4602      	mov	r2, r0
 8001a98:	460b      	mov	r3, r1
 8001a9a:	ec43 2b17 	vmov	d7, r2, r3
 8001a9e:	ed97 1b14 	vldr	d1, [r7, #80]	@ 0x50
 8001aa2:	eeb0 0a47 	vmov.f32	s0, s14
 8001aa6:	eef0 0a67 	vmov.f32	s1, s15
 8001aaa:	f004 f8ef 	bl	8005c8c <atan2>
 8001aae:	ec51 0b10 	vmov	r0, r1, d0
 8001ab2:	a345      	add	r3, pc, #276	@ (adr r3, 8001bc8 <Filter_getAngleZ+0x8d0>)
 8001ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ab8:	f7fe fd4a 	bl	8000550 <__aeabi_dmul>
 8001abc:	4602      	mov	r2, r0
 8001abe:	460b      	mov	r3, r1
 8001ac0:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

	DataStruct->Gyro_Z[2] = yaw_corrected;
 8001ac4:	69bb      	ldr	r3, [r7, #24]
 8001ac6:	f503 534a 	add.w	r3, r3, #12928	@ 0x3280
 8001aca:	3320      	adds	r3, #32
 8001acc:	4619      	mov	r1, r3
 8001ace:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001ad2:	e941 2302 	strd	r2, r3, [r1, #-8]
	DataStruct->Gyro_Z[1] = yaw_correctedd;
 8001ad6:	69bb      	ldr	r3, [r7, #24]
 8001ad8:	f503 534a 	add.w	r3, r3, #12928	@ 0x3280
 8001adc:	3310      	adds	r3, #16
 8001ade:	4619      	mov	r1, r3
 8001ae0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001ae4:	e9c1 2300 	strd	r2, r3, [r1]
	DataStruct->DeltaGyro_Z[0] = (DataStruct->Gyro_Z[1] + DataStruct->Gyro_Z[2]) ;
 8001ae8:	69bb      	ldr	r3, [r7, #24]
 8001aea:	f503 534a 	add.w	r3, r3, #12928	@ 0x3280
 8001aee:	3310      	adds	r3, #16
 8001af0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001af4:	69bb      	ldr	r3, [r7, #24]
 8001af6:	f503 534a 	add.w	r3, r3, #12928	@ 0x3280
 8001afa:	3320      	adds	r3, #32
 8001afc:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8001b00:	f7fe fb70 	bl	80001e4 <__adddf3>
 8001b04:	4602      	mov	r2, r0
 8001b06:	460b      	mov	r3, r1
 8001b08:	4610      	mov	r0, r2
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	69bb      	ldr	r3, [r7, #24]
 8001b0e:	f503 5349 	add.w	r3, r3, #12864	@ 0x3240
 8001b12:	3330      	adds	r3, #48	@ 0x30
 8001b14:	e9c3 0100 	strd	r0, r1, [r3]
	/// trước tính toán
	//DataStruct->DeltaGyro_Z[0] = fabs(DataStruct->DeltaGyro_Z[0]);

	// tính toán

	if(DataStruct->DeltaGyro_Z[0] <= 10.0 && st_math){
 8001b18:	69bb      	ldr	r3, [r7, #24]
 8001b1a:	f503 5349 	add.w	r3, r3, #12864	@ 0x3240
 8001b1e:	3330      	adds	r3, #48	@ 0x30
 8001b20:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b24:	f04f 0200 	mov.w	r2, #0
 8001b28:	4b2e      	ldr	r3, [pc, #184]	@ (8001be4 <Filter_getAngleZ+0x8ec>)
 8001b2a:	f7fe ff8d 	bl	8000a48 <__aeabi_dcmple>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	f000 80b0 	beq.w	8001c96 <Filter_getAngleZ+0x99e>
 8001b36:	4b2c      	ldr	r3, [pc, #176]	@ (8001be8 <Filter_getAngleZ+0x8f0>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	f000 80ab 	beq.w	8001c96 <Filter_getAngleZ+0x99e>

		//DataStruct->KalmanAngleZ += DataStruct->Gyro_Z[0] * dt;
		if(fabs(DataStruct->Gyro_Z[0]) > 0.5){
 8001b40:	69bb      	ldr	r3, [r7, #24]
 8001b42:	f503 534a 	add.w	r3, r3, #12928	@ 0x3280
 8001b46:	3310      	adds	r3, #16
 8001b48:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8001b4c:	613a      	str	r2, [r7, #16]
 8001b4e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001b52:	617b      	str	r3, [r7, #20]
 8001b54:	f04f 0200 	mov.w	r2, #0
 8001b58:	4b24      	ldr	r3, [pc, #144]	@ (8001bec <Filter_getAngleZ+0x8f4>)
 8001b5a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001b5e:	f7fe ff87 	bl	8000a70 <__aeabi_dcmpgt>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d055      	beq.n	8001c14 <Filter_getAngleZ+0x91c>
			DataStruct->KalmanAngleZ += ( DataStruct->Gyro_Z[0] + DataStruct->Gyro_Z[0] * DataStruct->DeltaGyro_Z[0] / 150.0) * dt;
 8001b68:	69bb      	ldr	r3, [r7, #24]
 8001b6a:	f503 534b 	add.w	r3, r3, #12992	@ 0x32c0
 8001b6e:	e953 4502 	ldrd	r4, r5, [r3, #-8]
 8001b72:	69bb      	ldr	r3, [r7, #24]
 8001b74:	f503 534a 	add.w	r3, r3, #12928	@ 0x3280
 8001b78:	3310      	adds	r3, #16
 8001b7a:	e953 8902 	ldrd	r8, r9, [r3, #-8]
 8001b7e:	69bb      	ldr	r3, [r7, #24]
 8001b80:	f503 534a 	add.w	r3, r3, #12928	@ 0x3280
 8001b84:	3310      	adds	r3, #16
 8001b86:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8001b8a:	69bb      	ldr	r3, [r7, #24]
 8001b8c:	f503 5349 	add.w	r3, r3, #12864	@ 0x3240
 8001b90:	3330      	adds	r3, #48	@ 0x30
 8001b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b96:	f7fe fcdb 	bl	8000550 <__aeabi_dmul>
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	460b      	mov	r3, r1
 8001b9e:	4610      	mov	r0, r2
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	a30b      	add	r3, pc, #44	@ (adr r3, 8001bd0 <Filter_getAngleZ+0x8d8>)
 8001ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ba8:	f7fe fdfc 	bl	80007a4 <__aeabi_ddiv>
 8001bac:	4602      	mov	r2, r0
 8001bae:	460b      	mov	r3, r1
 8001bb0:	4640      	mov	r0, r8
 8001bb2:	4649      	mov	r1, r9
 8001bb4:	f7fe fb16 	bl	80001e4 <__adddf3>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	460b      	mov	r3, r1
 8001bbc:	4610      	mov	r0, r2
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	e016      	b.n	8001bf0 <Filter_getAngleZ+0x8f8>
 8001bc2:	bf00      	nop
 8001bc4:	f3af 8000 	nop.w
 8001bc8:	1a63c1f8 	.word	0x1a63c1f8
 8001bcc:	404ca5dc 	.word	0x404ca5dc
 8001bd0:	00000000 	.word	0x00000000
 8001bd4:	4062c000 	.word	0x4062c000
 8001bd8:	200000e0 	.word	0x200000e0
 8001bdc:	40568000 	.word	0x40568000
 8001be0:	20000098 	.word	0x20000098
 8001be4:	40240000 	.word	0x40240000
 8001be8:	2000012c 	.word	0x2000012c
 8001bec:	3fe00000 	.word	0x3fe00000
 8001bf0:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001bf4:	f7fe fcac 	bl	8000550 <__aeabi_dmul>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	460b      	mov	r3, r1
 8001bfc:	4620      	mov	r0, r4
 8001bfe:	4629      	mov	r1, r5
 8001c00:	f7fe faf0 	bl	80001e4 <__adddf3>
 8001c04:	4602      	mov	r2, r0
 8001c06:	460b      	mov	r3, r1
 8001c08:	69b9      	ldr	r1, [r7, #24]
 8001c0a:	f501 514b 	add.w	r1, r1, #12992	@ 0x32c0
 8001c0e:	e941 2302 	strd	r2, r3, [r1, #-8]
 8001c12:	e03c      	b.n	8001c8e <Filter_getAngleZ+0x996>

		}else DataStruct->KalmanAngleZ += ( DataStruct->Gyro_Z[0] - DataStruct->Gyro_Z[0] * DataStruct->DeltaGyro_Z[0] / 121.0) * dt;
 8001c14:	69bb      	ldr	r3, [r7, #24]
 8001c16:	f503 534b 	add.w	r3, r3, #12992	@ 0x32c0
 8001c1a:	e953 4502 	ldrd	r4, r5, [r3, #-8]
 8001c1e:	69bb      	ldr	r3, [r7, #24]
 8001c20:	f503 534a 	add.w	r3, r3, #12928	@ 0x3280
 8001c24:	3310      	adds	r3, #16
 8001c26:	e953 8902 	ldrd	r8, r9, [r3, #-8]
 8001c2a:	69bb      	ldr	r3, [r7, #24]
 8001c2c:	f503 534a 	add.w	r3, r3, #12928	@ 0x3280
 8001c30:	3310      	adds	r3, #16
 8001c32:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8001c36:	69bb      	ldr	r3, [r7, #24]
 8001c38:	f503 5349 	add.w	r3, r3, #12864	@ 0x3240
 8001c3c:	3330      	adds	r3, #48	@ 0x30
 8001c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c42:	f7fe fc85 	bl	8000550 <__aeabi_dmul>
 8001c46:	4602      	mov	r2, r0
 8001c48:	460b      	mov	r3, r1
 8001c4a:	4610      	mov	r0, r2
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	f04f 0200 	mov.w	r2, #0
 8001c52:	4ba1      	ldr	r3, [pc, #644]	@ (8001ed8 <Filter_getAngleZ+0xbe0>)
 8001c54:	f7fe fda6 	bl	80007a4 <__aeabi_ddiv>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	460b      	mov	r3, r1
 8001c5c:	4640      	mov	r0, r8
 8001c5e:	4649      	mov	r1, r9
 8001c60:	f7fe fabe 	bl	80001e0 <__aeabi_dsub>
 8001c64:	4602      	mov	r2, r0
 8001c66:	460b      	mov	r3, r1
 8001c68:	4610      	mov	r0, r2
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001c70:	f7fe fc6e 	bl	8000550 <__aeabi_dmul>
 8001c74:	4602      	mov	r2, r0
 8001c76:	460b      	mov	r3, r1
 8001c78:	4620      	mov	r0, r4
 8001c7a:	4629      	mov	r1, r5
 8001c7c:	f7fe fab2 	bl	80001e4 <__adddf3>
 8001c80:	4602      	mov	r2, r0
 8001c82:	460b      	mov	r3, r1
 8001c84:	69b9      	ldr	r1, [r7, #24]
 8001c86:	f501 514b 	add.w	r1, r1, #12992	@ 0x32c0
 8001c8a:	e941 2302 	strd	r2, r3, [r1, #-8]

		st_math = false;
 8001c8e:	4b93      	ldr	r3, [pc, #588]	@ (8001edc <Filter_getAngleZ+0xbe4>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	601a      	str	r2, [r3, #0]
 8001c94:	e16c      	b.n	8001f70 <Filter_getAngleZ+0xc78>
	}else if(DataStruct->DeltaGyro_Z[0] > 10.0 && DataStruct->DeltaGyro_Z[0] <= 50.0 && st_math){
 8001c96:	69bb      	ldr	r3, [r7, #24]
 8001c98:	f503 5349 	add.w	r3, r3, #12864	@ 0x3240
 8001c9c:	3330      	adds	r3, #48	@ 0x30
 8001c9e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001ca2:	f04f 0200 	mov.w	r2, #0
 8001ca6:	4b8e      	ldr	r3, [pc, #568]	@ (8001ee0 <Filter_getAngleZ+0xbe8>)
 8001ca8:	f7fe fee2 	bl	8000a70 <__aeabi_dcmpgt>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	f000 80a7 	beq.w	8001e02 <Filter_getAngleZ+0xb0a>
 8001cb4:	69bb      	ldr	r3, [r7, #24]
 8001cb6:	f503 5349 	add.w	r3, r3, #12864	@ 0x3240
 8001cba:	3330      	adds	r3, #48	@ 0x30
 8001cbc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001cc0:	f04f 0200 	mov.w	r2, #0
 8001cc4:	4b87      	ldr	r3, [pc, #540]	@ (8001ee4 <Filter_getAngleZ+0xbec>)
 8001cc6:	f7fe febf 	bl	8000a48 <__aeabi_dcmple>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	f000 8098 	beq.w	8001e02 <Filter_getAngleZ+0xb0a>
 8001cd2:	4b82      	ldr	r3, [pc, #520]	@ (8001edc <Filter_getAngleZ+0xbe4>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	f000 8093 	beq.w	8001e02 <Filter_getAngleZ+0xb0a>

		if(fabs(DataStruct->Gyro_Z[0]) > 0.5)
 8001cdc:	69bb      	ldr	r3, [r7, #24]
 8001cde:	f503 534a 	add.w	r3, r3, #12928	@ 0x3280
 8001ce2:	3310      	adds	r3, #16
 8001ce4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8001ce8:	60ba      	str	r2, [r7, #8]
 8001cea:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001cee:	60fb      	str	r3, [r7, #12]
 8001cf0:	f04f 0200 	mov.w	r2, #0
 8001cf4:	4b7c      	ldr	r3, [pc, #496]	@ (8001ee8 <Filter_getAngleZ+0xbf0>)
 8001cf6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001cfa:	f7fe feb9 	bl	8000a70 <__aeabi_dcmpgt>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d03d      	beq.n	8001d80 <Filter_getAngleZ+0xa88>

			DataStruct->KalmanAngleZ += ( DataStruct->Gyro_Z[0] + DataStruct->Gyro_Z[0] * DataStruct->DeltaGyro_Z[0] / 131.005) * dt;
 8001d04:	69bb      	ldr	r3, [r7, #24]
 8001d06:	f503 534b 	add.w	r3, r3, #12992	@ 0x32c0
 8001d0a:	e953 4502 	ldrd	r4, r5, [r3, #-8]
 8001d0e:	69bb      	ldr	r3, [r7, #24]
 8001d10:	f503 534a 	add.w	r3, r3, #12928	@ 0x3280
 8001d14:	3310      	adds	r3, #16
 8001d16:	e953 8902 	ldrd	r8, r9, [r3, #-8]
 8001d1a:	69bb      	ldr	r3, [r7, #24]
 8001d1c:	f503 534a 	add.w	r3, r3, #12928	@ 0x3280
 8001d20:	3310      	adds	r3, #16
 8001d22:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8001d26:	69bb      	ldr	r3, [r7, #24]
 8001d28:	f503 5349 	add.w	r3, r3, #12864	@ 0x3240
 8001d2c:	3330      	adds	r3, #48	@ 0x30
 8001d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d32:	f7fe fc0d 	bl	8000550 <__aeabi_dmul>
 8001d36:	4602      	mov	r2, r0
 8001d38:	460b      	mov	r3, r1
 8001d3a:	4610      	mov	r0, r2
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	a364      	add	r3, pc, #400	@ (adr r3, 8001ed0 <Filter_getAngleZ+0xbd8>)
 8001d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d44:	f7fe fd2e 	bl	80007a4 <__aeabi_ddiv>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	460b      	mov	r3, r1
 8001d4c:	4640      	mov	r0, r8
 8001d4e:	4649      	mov	r1, r9
 8001d50:	f7fe fa48 	bl	80001e4 <__adddf3>
 8001d54:	4602      	mov	r2, r0
 8001d56:	460b      	mov	r3, r1
 8001d58:	4610      	mov	r0, r2
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001d60:	f7fe fbf6 	bl	8000550 <__aeabi_dmul>
 8001d64:	4602      	mov	r2, r0
 8001d66:	460b      	mov	r3, r1
 8001d68:	4620      	mov	r0, r4
 8001d6a:	4629      	mov	r1, r5
 8001d6c:	f7fe fa3a 	bl	80001e4 <__adddf3>
 8001d70:	4602      	mov	r2, r0
 8001d72:	460b      	mov	r3, r1
 8001d74:	69b9      	ldr	r1, [r7, #24]
 8001d76:	f501 514b 	add.w	r1, r1, #12992	@ 0x32c0
 8001d7a:	e941 2302 	strd	r2, r3, [r1, #-8]
 8001d7e:	e03c      	b.n	8001dfa <Filter_getAngleZ+0xb02>

		else DataStruct->KalmanAngleZ += ( DataStruct->Gyro_Z[0] - DataStruct->Gyro_Z[0] * DataStruct->DeltaGyro_Z[0] / 121.0) * dt;
 8001d80:	69bb      	ldr	r3, [r7, #24]
 8001d82:	f503 534b 	add.w	r3, r3, #12992	@ 0x32c0
 8001d86:	e953 4502 	ldrd	r4, r5, [r3, #-8]
 8001d8a:	69bb      	ldr	r3, [r7, #24]
 8001d8c:	f503 534a 	add.w	r3, r3, #12928	@ 0x3280
 8001d90:	3310      	adds	r3, #16
 8001d92:	e953 8902 	ldrd	r8, r9, [r3, #-8]
 8001d96:	69bb      	ldr	r3, [r7, #24]
 8001d98:	f503 534a 	add.w	r3, r3, #12928	@ 0x3280
 8001d9c:	3310      	adds	r3, #16
 8001d9e:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8001da2:	69bb      	ldr	r3, [r7, #24]
 8001da4:	f503 5349 	add.w	r3, r3, #12864	@ 0x3240
 8001da8:	3330      	adds	r3, #48	@ 0x30
 8001daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dae:	f7fe fbcf 	bl	8000550 <__aeabi_dmul>
 8001db2:	4602      	mov	r2, r0
 8001db4:	460b      	mov	r3, r1
 8001db6:	4610      	mov	r0, r2
 8001db8:	4619      	mov	r1, r3
 8001dba:	f04f 0200 	mov.w	r2, #0
 8001dbe:	4b46      	ldr	r3, [pc, #280]	@ (8001ed8 <Filter_getAngleZ+0xbe0>)
 8001dc0:	f7fe fcf0 	bl	80007a4 <__aeabi_ddiv>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	460b      	mov	r3, r1
 8001dc8:	4640      	mov	r0, r8
 8001dca:	4649      	mov	r1, r9
 8001dcc:	f7fe fa08 	bl	80001e0 <__aeabi_dsub>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	460b      	mov	r3, r1
 8001dd4:	4610      	mov	r0, r2
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001ddc:	f7fe fbb8 	bl	8000550 <__aeabi_dmul>
 8001de0:	4602      	mov	r2, r0
 8001de2:	460b      	mov	r3, r1
 8001de4:	4620      	mov	r0, r4
 8001de6:	4629      	mov	r1, r5
 8001de8:	f7fe f9fc 	bl	80001e4 <__adddf3>
 8001dec:	4602      	mov	r2, r0
 8001dee:	460b      	mov	r3, r1
 8001df0:	69b9      	ldr	r1, [r7, #24]
 8001df2:	f501 514b 	add.w	r1, r1, #12992	@ 0x32c0
 8001df6:	e941 2302 	strd	r2, r3, [r1, #-8]

		st_math = false;
 8001dfa:	4b38      	ldr	r3, [pc, #224]	@ (8001edc <Filter_getAngleZ+0xbe4>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	601a      	str	r2, [r3, #0]
 8001e00:	e0b6      	b.n	8001f70 <Filter_getAngleZ+0xc78>

	}else if(DataStruct->DeltaGyro_Z[0] > 50.0 && st_math){
 8001e02:	69bb      	ldr	r3, [r7, #24]
 8001e04:	f503 5349 	add.w	r3, r3, #12864	@ 0x3240
 8001e08:	3330      	adds	r3, #48	@ 0x30
 8001e0a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e0e:	f04f 0200 	mov.w	r2, #0
 8001e12:	4b34      	ldr	r3, [pc, #208]	@ (8001ee4 <Filter_getAngleZ+0xbec>)
 8001e14:	f7fe fe2c 	bl	8000a70 <__aeabi_dcmpgt>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	f000 80a8 	beq.w	8001f70 <Filter_getAngleZ+0xc78>
 8001e20:	4b2e      	ldr	r3, [pc, #184]	@ (8001edc <Filter_getAngleZ+0xbe4>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	f000 80a3 	beq.w	8001f70 <Filter_getAngleZ+0xc78>

		if(fabs(DataStruct->Gyro_Z[0]) > 0.5)
 8001e2a:	69bb      	ldr	r3, [r7, #24]
 8001e2c:	f503 534a 	add.w	r3, r3, #12928	@ 0x3280
 8001e30:	3310      	adds	r3, #16
 8001e32:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8001e36:	603a      	str	r2, [r7, #0]
 8001e38:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001e3c:	607b      	str	r3, [r7, #4]
 8001e3e:	f04f 0200 	mov.w	r2, #0
 8001e42:	4b29      	ldr	r3, [pc, #164]	@ (8001ee8 <Filter_getAngleZ+0xbf0>)
 8001e44:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001e48:	f7fe fe12 	bl	8000a70 <__aeabi_dcmpgt>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d04e      	beq.n	8001ef0 <Filter_getAngleZ+0xbf8>

			DataStruct->KalmanAngleZ += ( DataStruct->Gyro_Z[0] + DataStruct->Gyro_Z[0] * DataStruct->DeltaGyro_Z[0] / 85.0) * dt;
 8001e52:	69bb      	ldr	r3, [r7, #24]
 8001e54:	f503 534b 	add.w	r3, r3, #12992	@ 0x32c0
 8001e58:	e953 4502 	ldrd	r4, r5, [r3, #-8]
 8001e5c:	69bb      	ldr	r3, [r7, #24]
 8001e5e:	f503 534a 	add.w	r3, r3, #12928	@ 0x3280
 8001e62:	3310      	adds	r3, #16
 8001e64:	e953 8902 	ldrd	r8, r9, [r3, #-8]
 8001e68:	69bb      	ldr	r3, [r7, #24]
 8001e6a:	f503 534a 	add.w	r3, r3, #12928	@ 0x3280
 8001e6e:	3310      	adds	r3, #16
 8001e70:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8001e74:	69bb      	ldr	r3, [r7, #24]
 8001e76:	f503 5349 	add.w	r3, r3, #12864	@ 0x3240
 8001e7a:	3330      	adds	r3, #48	@ 0x30
 8001e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e80:	f7fe fb66 	bl	8000550 <__aeabi_dmul>
 8001e84:	4602      	mov	r2, r0
 8001e86:	460b      	mov	r3, r1
 8001e88:	4610      	mov	r0, r2
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	f04f 0200 	mov.w	r2, #0
 8001e90:	4b16      	ldr	r3, [pc, #88]	@ (8001eec <Filter_getAngleZ+0xbf4>)
 8001e92:	f7fe fc87 	bl	80007a4 <__aeabi_ddiv>
 8001e96:	4602      	mov	r2, r0
 8001e98:	460b      	mov	r3, r1
 8001e9a:	4640      	mov	r0, r8
 8001e9c:	4649      	mov	r1, r9
 8001e9e:	f7fe f9a1 	bl	80001e4 <__adddf3>
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	460b      	mov	r3, r1
 8001ea6:	4610      	mov	r0, r2
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001eae:	f7fe fb4f 	bl	8000550 <__aeabi_dmul>
 8001eb2:	4602      	mov	r2, r0
 8001eb4:	460b      	mov	r3, r1
 8001eb6:	4620      	mov	r0, r4
 8001eb8:	4629      	mov	r1, r5
 8001eba:	f7fe f993 	bl	80001e4 <__adddf3>
 8001ebe:	4602      	mov	r2, r0
 8001ec0:	460b      	mov	r3, r1
 8001ec2:	69b9      	ldr	r1, [r7, #24]
 8001ec4:	f501 514b 	add.w	r1, r1, #12992	@ 0x32c0
 8001ec8:	e941 2302 	strd	r2, r3, [r1, #-8]
 8001ecc:	e04d      	b.n	8001f6a <Filter_getAngleZ+0xc72>
 8001ece:	bf00      	nop
 8001ed0:	f5c28f5c 	.word	0xf5c28f5c
 8001ed4:	40606028 	.word	0x40606028
 8001ed8:	405e4000 	.word	0x405e4000
 8001edc:	2000012c 	.word	0x2000012c
 8001ee0:	40240000 	.word	0x40240000
 8001ee4:	40490000 	.word	0x40490000
 8001ee8:	3fe00000 	.word	0x3fe00000
 8001eec:	40554000 	.word	0x40554000

		else DataStruct->KalmanAngleZ += ( DataStruct->Gyro_Z[0] - DataStruct->Gyro_Z[0] * DataStruct->DeltaGyro_Z[0] / 121.0) * dt;
 8001ef0:	69bb      	ldr	r3, [r7, #24]
 8001ef2:	f503 534b 	add.w	r3, r3, #12992	@ 0x32c0
 8001ef6:	e953 4502 	ldrd	r4, r5, [r3, #-8]
 8001efa:	69bb      	ldr	r3, [r7, #24]
 8001efc:	f503 534a 	add.w	r3, r3, #12928	@ 0x3280
 8001f00:	3310      	adds	r3, #16
 8001f02:	e953 8902 	ldrd	r8, r9, [r3, #-8]
 8001f06:	69bb      	ldr	r3, [r7, #24]
 8001f08:	f503 534a 	add.w	r3, r3, #12928	@ 0x3280
 8001f0c:	3310      	adds	r3, #16
 8001f0e:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8001f12:	69bb      	ldr	r3, [r7, #24]
 8001f14:	f503 5349 	add.w	r3, r3, #12864	@ 0x3240
 8001f18:	3330      	adds	r3, #48	@ 0x30
 8001f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f1e:	f7fe fb17 	bl	8000550 <__aeabi_dmul>
 8001f22:	4602      	mov	r2, r0
 8001f24:	460b      	mov	r3, r1
 8001f26:	4610      	mov	r0, r2
 8001f28:	4619      	mov	r1, r3
 8001f2a:	f04f 0200 	mov.w	r2, #0
 8001f2e:	4b1b      	ldr	r3, [pc, #108]	@ (8001f9c <Filter_getAngleZ+0xca4>)
 8001f30:	f7fe fc38 	bl	80007a4 <__aeabi_ddiv>
 8001f34:	4602      	mov	r2, r0
 8001f36:	460b      	mov	r3, r1
 8001f38:	4640      	mov	r0, r8
 8001f3a:	4649      	mov	r1, r9
 8001f3c:	f7fe f950 	bl	80001e0 <__aeabi_dsub>
 8001f40:	4602      	mov	r2, r0
 8001f42:	460b      	mov	r3, r1
 8001f44:	4610      	mov	r0, r2
 8001f46:	4619      	mov	r1, r3
 8001f48:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001f4c:	f7fe fb00 	bl	8000550 <__aeabi_dmul>
 8001f50:	4602      	mov	r2, r0
 8001f52:	460b      	mov	r3, r1
 8001f54:	4620      	mov	r0, r4
 8001f56:	4629      	mov	r1, r5
 8001f58:	f7fe f944 	bl	80001e4 <__adddf3>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	460b      	mov	r3, r1
 8001f60:	69b9      	ldr	r1, [r7, #24]
 8001f62:	f501 514b 	add.w	r1, r1, #12992	@ 0x32c0
 8001f66:	e941 2302 	strd	r2, r3, [r1, #-8]

		st_math = false;
 8001f6a:	4b0d      	ldr	r3, [pc, #52]	@ (8001fa0 <Filter_getAngleZ+0xca8>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	601a      	str	r2, [r3, #0]
	}

	// khởi tạo đầu khi tính toán
	if(st){
 8001f70:	4b0c      	ldr	r3, [pc, #48]	@ (8001fa4 <Filter_getAngleZ+0xcac>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d00c      	beq.n	8001f92 <Filter_getAngleZ+0xc9a>
		DataStruct->KalmanAngleZ = 0;
 8001f78:	69bb      	ldr	r3, [r7, #24]
 8001f7a:	f503 534b 	add.w	r3, r3, #12992	@ 0x32c0
 8001f7e:	4619      	mov	r1, r3
 8001f80:	f04f 0200 	mov.w	r2, #0
 8001f84:	f04f 0300 	mov.w	r3, #0
 8001f88:	e941 2302 	strd	r2, r3, [r1, #-8]
		st = false;
 8001f8c:	4b05      	ldr	r3, [pc, #20]	@ (8001fa4 <Filter_getAngleZ+0xcac>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	601a      	str	r2, [r3, #0]

	}

}
 8001f92:	bf00      	nop
 8001f94:	3788      	adds	r7, #136	@ 0x88
 8001f96:	46bd      	mov	sp, r7
 8001f98:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001f9c:	405e4000 	.word	0x405e4000
 8001fa0:	2000012c 	.word	0x2000012c
 8001fa4:	20000128 	.word	0x20000128

08001fa8 <MPU6050_Balance_Data>:

//// --------------------- Lấy mẫu ban đầu 4s ------------------------------ ////

void MPU6050_Balance_Data(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct){
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b08c      	sub	sp, #48	@ 0x30
 8001fac:	af04      	add	r7, sp, #16
 8001fae:	6078      	str	r0, [r7, #4]
 8001fb0:	6039      	str	r1, [r7, #0]
	uint8_t Rec_Data[14];
	int16_t temp;

	// Read 14 BYTES of data starting from ACCEL_XOUT_H register

	int i = 0;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	61fb      	str	r3, [r7, #28]
	for(i = 0;i < 400;i++){
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	61fb      	str	r3, [r7, #28]
 8001fba:	e13b      	b.n	8002234 <MPU6050_Balance_Data+0x28c>
		HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 8001fbc:	2364      	movs	r3, #100	@ 0x64
 8001fbe:	9302      	str	r3, [sp, #8]
 8001fc0:	230e      	movs	r3, #14
 8001fc2:	9301      	str	r3, [sp, #4]
 8001fc4:	f107 030c 	add.w	r3, r7, #12
 8001fc8:	9300      	str	r3, [sp, #0]
 8001fca:	2301      	movs	r3, #1
 8001fcc:	223b      	movs	r2, #59	@ 0x3b
 8001fce:	21d0      	movs	r1, #208	@ 0xd0
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	f001 fb95 	bl	8003700 <HAL_I2C_Mem_Read>

		DataStruct->Accel_X_RAW = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
 8001fd6:	7b3b      	ldrb	r3, [r7, #12]
 8001fd8:	021b      	lsls	r3, r3, #8
 8001fda:	b21a      	sxth	r2, r3
 8001fdc:	7b7b      	ldrb	r3, [r7, #13]
 8001fde:	b21b      	sxth	r3, r3
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	b21a      	sxth	r2, r3
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	801a      	strh	r2, [r3, #0]
		DataStruct->Accel_Y_RAW = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 8001fe8:	7bbb      	ldrb	r3, [r7, #14]
 8001fea:	021b      	lsls	r3, r3, #8
 8001fec:	b21a      	sxth	r2, r3
 8001fee:	7bfb      	ldrb	r3, [r7, #15]
 8001ff0:	b21b      	sxth	r3, r3
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	b21a      	sxth	r2, r3
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	805a      	strh	r2, [r3, #2]
		DataStruct->Accel_Z_RAW = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 8001ffa:	7c3b      	ldrb	r3, [r7, #16]
 8001ffc:	021b      	lsls	r3, r3, #8
 8001ffe:	b21a      	sxth	r2, r3
 8002000:	7c7b      	ldrb	r3, [r7, #17]
 8002002:	b21b      	sxth	r3, r3
 8002004:	4313      	orrs	r3, r2
 8002006:	b21a      	sxth	r2, r3
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	809a      	strh	r2, [r3, #4]
		temp = (int16_t) (Rec_Data[6] << 8 | Rec_Data[7]);
 800200c:	7cbb      	ldrb	r3, [r7, #18]
 800200e:	021b      	lsls	r3, r3, #8
 8002010:	b21a      	sxth	r2, r3
 8002012:	7cfb      	ldrb	r3, [r7, #19]
 8002014:	b21b      	sxth	r3, r3
 8002016:	4313      	orrs	r3, r2
 8002018:	837b      	strh	r3, [r7, #26]
		DataStruct->Gyro_X_RAW = (int16_t) (Rec_Data[8] << 8 | Rec_Data[9]);
 800201a:	7d3b      	ldrb	r3, [r7, #20]
 800201c:	021b      	lsls	r3, r3, #8
 800201e:	b21a      	sxth	r2, r3
 8002020:	7d7b      	ldrb	r3, [r7, #21]
 8002022:	b21b      	sxth	r3, r3
 8002024:	4313      	orrs	r3, r2
 8002026:	b21a      	sxth	r2, r3
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	841a      	strh	r2, [r3, #32]
		DataStruct->Gyro_Y_RAW = (int16_t) (Rec_Data[10] << 8 | Rec_Data[11]);
 800202c:	7dbb      	ldrb	r3, [r7, #22]
 800202e:	021b      	lsls	r3, r3, #8
 8002030:	b21a      	sxth	r2, r3
 8002032:	7dfb      	ldrb	r3, [r7, #23]
 8002034:	b21b      	sxth	r3, r3
 8002036:	4313      	orrs	r3, r2
 8002038:	b21a      	sxth	r2, r3
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	845a      	strh	r2, [r3, #34]	@ 0x22
		DataStruct->Gyro_Z_RAW = (int16_t) (Rec_Data[12] << 8 | Rec_Data[13]);
 800203e:	7e3b      	ldrb	r3, [r7, #24]
 8002040:	021b      	lsls	r3, r3, #8
 8002042:	b21a      	sxth	r2, r3
 8002044:	7e7b      	ldrb	r3, [r7, #25]
 8002046:	b21b      	sxth	r3, r3
 8002048:	4313      	orrs	r3, r2
 800204a:	b21a      	sxth	r2, r3
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	849a      	strh	r2, [r3, #36]	@ 0x24

		DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002056:	4618      	mov	r0, r3
 8002058:	f7fe fa10 	bl	800047c <__aeabi_i2d>
 800205c:	f04f 0200 	mov.w	r2, #0
 8002060:	4ba3      	ldr	r3, [pc, #652]	@ (80022f0 <MPU6050_Balance_Data+0x348>)
 8002062:	f7fe fb9f 	bl	80007a4 <__aeabi_ddiv>
 8002066:	4602      	mov	r2, r0
 8002068:	460b      	mov	r3, r1
 800206a:	6839      	ldr	r1, [r7, #0]
 800206c:	e9c1 2302 	strd	r2, r3, [r1, #8]
		DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002076:	4618      	mov	r0, r3
 8002078:	f7fe fa00 	bl	800047c <__aeabi_i2d>
 800207c:	f04f 0200 	mov.w	r2, #0
 8002080:	4b9b      	ldr	r3, [pc, #620]	@ (80022f0 <MPU6050_Balance_Data+0x348>)
 8002082:	f7fe fb8f 	bl	80007a4 <__aeabi_ddiv>
 8002086:	4602      	mov	r2, r0
 8002088:	460b      	mov	r3, r1
 800208a:	6839      	ldr	r1, [r7, #0]
 800208c:	e9c1 2304 	strd	r2, r3, [r1, #16]
		DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002096:	4618      	mov	r0, r3
 8002098:	f7fe f9f0 	bl	800047c <__aeabi_i2d>
 800209c:	a390      	add	r3, pc, #576	@ (adr r3, 80022e0 <MPU6050_Balance_Data+0x338>)
 800209e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020a2:	f7fe fb7f 	bl	80007a4 <__aeabi_ddiv>
 80020a6:	4602      	mov	r2, r0
 80020a8:	460b      	mov	r3, r1
 80020aa:	6839      	ldr	r1, [r7, #0]
 80020ac:	e9c1 2306 	strd	r2, r3, [r1, #24]
		DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0 + (float) 36.53);
 80020b0:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80020b4:	ee07 3a90 	vmov	s15, r3
 80020b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020bc:	eddf 6a8d 	vldr	s13, [pc, #564]	@ 80022f4 <MPU6050_Balance_Data+0x34c>
 80020c0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80020c4:	ed9f 7a8c 	vldr	s14, [pc, #560]	@ 80022f8 <MPU6050_Balance_Data+0x350>
 80020c8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 80020d2:	edc3 7aa8 	vstr	s15, [r3, #672]	@ 0x2a0
		DataStruct->Gx = DataStruct->Gyro_X_RAW / 16.4;
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80020dc:	4618      	mov	r0, r3
 80020de:	f7fe f9cd 	bl	800047c <__aeabi_i2d>
 80020e2:	a381      	add	r3, pc, #516	@ (adr r3, 80022e8 <MPU6050_Balance_Data+0x340>)
 80020e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020e8:	f7fe fb5c 	bl	80007a4 <__aeabi_ddiv>
 80020ec:	4602      	mov	r2, r0
 80020ee:	460b      	mov	r3, r1
 80020f0:	6839      	ldr	r1, [r7, #0]
 80020f2:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
		DataStruct->Gy = DataStruct->Gyro_Y_RAW / 16.4;
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	@ 0x22
 80020fc:	4618      	mov	r0, r3
 80020fe:	f7fe f9bd 	bl	800047c <__aeabi_i2d>
 8002102:	a379      	add	r3, pc, #484	@ (adr r3, 80022e8 <MPU6050_Balance_Data+0x340>)
 8002104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002108:	f7fe fb4c 	bl	80007a4 <__aeabi_ddiv>
 800210c:	4602      	mov	r2, r0
 800210e:	460b      	mov	r3, r1
 8002110:	6839      	ldr	r1, [r7, #0]
 8002112:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
		DataStruct->Gz = DataStruct->Gyro_Z_RAW / 16.4;
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 800211c:	4618      	mov	r0, r3
 800211e:	f7fe f9ad 	bl	800047c <__aeabi_i2d>
 8002122:	a371      	add	r3, pc, #452	@ (adr r3, 80022e8 <MPU6050_Balance_Data+0x340>)
 8002124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002128:	f7fe fb3c 	bl	80007a4 <__aeabi_ddiv>
 800212c:	4602      	mov	r2, r0
 800212e:	460b      	mov	r3, r1
 8002130:	6839      	ldr	r1, [r7, #0]
 8002132:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38

		DataStruct->De_Gx += DataStruct->Gx;
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8002142:	f7fe f84f 	bl	80001e4 <__adddf3>
 8002146:	4602      	mov	r2, r0
 8002148:	460b      	mov	r3, r1
 800214a:	6839      	ldr	r1, [r7, #0]
 800214c:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
		DataStruct->De_Gy += DataStruct->Gy;
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	@ 0x48
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800215c:	f7fe f842 	bl	80001e4 <__adddf3>
 8002160:	4602      	mov	r2, r0
 8002162:	460b      	mov	r3, r1
 8002164:	6839      	ldr	r1, [r7, #0]
 8002166:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48
		DataStruct->De_Gz += DataStruct->Gz;
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8002176:	f7fe f835 	bl	80001e4 <__adddf3>
 800217a:	4602      	mov	r2, r0
 800217c:	460b      	mov	r3, r1
 800217e:	6839      	ldr	r1, [r7, #0]
 8002180:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
		DataStruct->De_Ax += DataStruct->Ax;
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	@ 0x58
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002190:	f7fe f828 	bl	80001e4 <__adddf3>
 8002194:	4602      	mov	r2, r0
 8002196:	460b      	mov	r3, r1
 8002198:	6839      	ldr	r1, [r7, #0]
 800219a:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
		DataStruct->De_Ay += DataStruct->Ay;
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	@ 0x60
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80021aa:	f7fe f81b 	bl	80001e4 <__adddf3>
 80021ae:	4602      	mov	r2, r0
 80021b0:	460b      	mov	r3, r1
 80021b2:	6839      	ldr	r1, [r7, #0]
 80021b4:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
		DataStruct->De_Az += DataStruct->Az;
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	@ 0x68
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80021c4:	f7fe f80e 	bl	80001e4 <__adddf3>
 80021c8:	4602      	mov	r2, r0
 80021ca:	460b      	mov	r3, r1
 80021cc:	6839      	ldr	r1, [r7, #0]
 80021ce:	e9c1 231a 	strd	r2, r3, [r1, #104]	@ 0x68

		DataStruct->Num_Z[i] = DataStruct->Az;
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80021d8:	6838      	ldr	r0, [r7, #0]
 80021da:	69f9      	ldr	r1, [r7, #28]
 80021dc:	310e      	adds	r1, #14
 80021de:	00c9      	lsls	r1, r1, #3
 80021e0:	4401      	add	r1, r0
 80021e2:	e9c1 2300 	strd	r2, r3, [r1]
		DataStruct->Num_Y[i] = DataStruct->Ay;
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80021ec:	6838      	ldr	r0, [r7, #0]
 80021ee:	69f9      	ldr	r1, [r7, #28]
 80021f0:	f201 312e 	addw	r1, r1, #814	@ 0x32e
 80021f4:	00c9      	lsls	r1, r1, #3
 80021f6:	4401      	add	r1, r0
 80021f8:	e9c1 2300 	strd	r2, r3, [r1]
		DataStruct->Num_X[i] = DataStruct->Ax;
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002202:	6838      	ldr	r0, [r7, #0]
 8002204:	69f9      	ldr	r1, [r7, #28]
 8002206:	f501 71cf 	add.w	r1, r1, #414	@ 0x19e
 800220a:	00c9      	lsls	r1, r1, #3
 800220c:	4401      	add	r1, r0
 800220e:	e9c1 2300 	strd	r2, r3, [r1]
		DataStruct->Num_Gz[i] = DataStruct->Gz;
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8002218:	6838      	ldr	r0, [r7, #0]
 800221a:	69f9      	ldr	r1, [r7, #28]
 800221c:	f201 41be 	addw	r1, r1, #1214	@ 0x4be
 8002220:	00c9      	lsls	r1, r1, #3
 8002222:	4401      	add	r1, r0
 8002224:	e9c1 2300 	strd	r2, r3, [r1]

		HAL_Delay(10);
 8002228:	200a      	movs	r0, #10
 800222a:	f000 fcdf 	bl	8002bec <HAL_Delay>
	for(i = 0;i < 400;i++){
 800222e:	69fb      	ldr	r3, [r7, #28]
 8002230:	3301      	adds	r3, #1
 8002232:	61fb      	str	r3, [r7, #28]
 8002234:	69fb      	ldr	r3, [r7, #28]
 8002236:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 800223a:	f6ff aebf 	blt.w	8001fbc <MPU6050_Balance_Data+0x14>
	}
	DataStruct->De_Gx = DataStruct->De_Gx / 400.0;
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8002244:	f04f 0200 	mov.w	r2, #0
 8002248:	4b2c      	ldr	r3, [pc, #176]	@ (80022fc <MPU6050_Balance_Data+0x354>)
 800224a:	f7fe faab 	bl	80007a4 <__aeabi_ddiv>
 800224e:	4602      	mov	r2, r0
 8002250:	460b      	mov	r3, r1
 8002252:	6839      	ldr	r1, [r7, #0]
 8002254:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
	DataStruct->De_Gy = DataStruct->De_Gy / 400.0;
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	@ 0x48
 800225e:	f04f 0200 	mov.w	r2, #0
 8002262:	4b26      	ldr	r3, [pc, #152]	@ (80022fc <MPU6050_Balance_Data+0x354>)
 8002264:	f7fe fa9e 	bl	80007a4 <__aeabi_ddiv>
 8002268:	4602      	mov	r2, r0
 800226a:	460b      	mov	r3, r1
 800226c:	6839      	ldr	r1, [r7, #0]
 800226e:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48
	DataStruct->De_Gz = DataStruct->De_Gz / 400.0;
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 8002278:	f04f 0200 	mov.w	r2, #0
 800227c:	4b1f      	ldr	r3, [pc, #124]	@ (80022fc <MPU6050_Balance_Data+0x354>)
 800227e:	f7fe fa91 	bl	80007a4 <__aeabi_ddiv>
 8002282:	4602      	mov	r2, r0
 8002284:	460b      	mov	r3, r1
 8002286:	6839      	ldr	r1, [r7, #0]
 8002288:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
	DataStruct->De_Ax = DataStruct->De_Ax / 400.0;
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	@ 0x58
 8002292:	f04f 0200 	mov.w	r2, #0
 8002296:	4b19      	ldr	r3, [pc, #100]	@ (80022fc <MPU6050_Balance_Data+0x354>)
 8002298:	f7fe fa84 	bl	80007a4 <__aeabi_ddiv>
 800229c:	4602      	mov	r2, r0
 800229e:	460b      	mov	r3, r1
 80022a0:	6839      	ldr	r1, [r7, #0]
 80022a2:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
	DataStruct->De_Ay = DataStruct->De_Ay / 400.0;
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	@ 0x60
 80022ac:	f04f 0200 	mov.w	r2, #0
 80022b0:	4b12      	ldr	r3, [pc, #72]	@ (80022fc <MPU6050_Balance_Data+0x354>)
 80022b2:	f7fe fa77 	bl	80007a4 <__aeabi_ddiv>
 80022b6:	4602      	mov	r2, r0
 80022b8:	460b      	mov	r3, r1
 80022ba:	6839      	ldr	r1, [r7, #0]
 80022bc:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
	DataStruct->De_Az = DataStruct->De_Az / 400.0;
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	@ 0x68
 80022c6:	f04f 0200 	mov.w	r2, #0
 80022ca:	4b0c      	ldr	r3, [pc, #48]	@ (80022fc <MPU6050_Balance_Data+0x354>)
 80022cc:	f7fe fa6a 	bl	80007a4 <__aeabi_ddiv>
 80022d0:	4602      	mov	r2, r0
 80022d2:	460b      	mov	r3, r1
 80022d4:	6839      	ldr	r1, [r7, #0]
 80022d6:	e9c1 231a 	strd	r2, r3, [r1, #104]	@ 0x68

	for(i = 0; i < 400; i++){
 80022da:	2300      	movs	r3, #0
 80022dc:	61fb      	str	r3, [r7, #28]
 80022de:	e06c      	b.n	80023ba <MPU6050_Balance_Data+0x412>
 80022e0:	00000000 	.word	0x00000000
 80022e4:	40cc2900 	.word	0x40cc2900
 80022e8:	66666666 	.word	0x66666666
 80022ec:	40306666 	.word	0x40306666
 80022f0:	40d00000 	.word	0x40d00000
 80022f4:	43aa0000 	.word	0x43aa0000
 80022f8:	42121eb8 	.word	0x42121eb8
 80022fc:	40790000 	.word	0x40790000
		DataStruct->Num_Z[i] = DataStruct->Num_Z[i] - DataStruct->De_Az;
 8002300:	683a      	ldr	r2, [r7, #0]
 8002302:	69fb      	ldr	r3, [r7, #28]
 8002304:	330e      	adds	r3, #14
 8002306:	00db      	lsls	r3, r3, #3
 8002308:	4413      	add	r3, r2
 800230a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 8002314:	f7fd ff64 	bl	80001e0 <__aeabi_dsub>
 8002318:	4602      	mov	r2, r0
 800231a:	460b      	mov	r3, r1
 800231c:	6838      	ldr	r0, [r7, #0]
 800231e:	69f9      	ldr	r1, [r7, #28]
 8002320:	310e      	adds	r1, #14
 8002322:	00c9      	lsls	r1, r1, #3
 8002324:	4401      	add	r1, r0
 8002326:	e9c1 2300 	strd	r2, r3, [r1]
		DataStruct->Num_Y[i] = DataStruct->Num_Y[i] - DataStruct->De_Ay;
 800232a:	683a      	ldr	r2, [r7, #0]
 800232c:	69fb      	ldr	r3, [r7, #28]
 800232e:	f203 332e 	addw	r3, r3, #814	@ 0x32e
 8002332:	00db      	lsls	r3, r3, #3
 8002334:	4413      	add	r3, r2
 8002336:	e9d3 0100 	ldrd	r0, r1, [r3]
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8002340:	f7fd ff4e 	bl	80001e0 <__aeabi_dsub>
 8002344:	4602      	mov	r2, r0
 8002346:	460b      	mov	r3, r1
 8002348:	6838      	ldr	r0, [r7, #0]
 800234a:	69f9      	ldr	r1, [r7, #28]
 800234c:	f201 312e 	addw	r1, r1, #814	@ 0x32e
 8002350:	00c9      	lsls	r1, r1, #3
 8002352:	4401      	add	r1, r0
 8002354:	e9c1 2300 	strd	r2, r3, [r1]
		DataStruct->Num_X[i] = DataStruct->Num_X[i] - DataStruct->De_Ax;
 8002358:	683a      	ldr	r2, [r7, #0]
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	f503 73cf 	add.w	r3, r3, #414	@ 0x19e
 8002360:	00db      	lsls	r3, r3, #3
 8002362:	4413      	add	r3, r2
 8002364:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 800236e:	f7fd ff37 	bl	80001e0 <__aeabi_dsub>
 8002372:	4602      	mov	r2, r0
 8002374:	460b      	mov	r3, r1
 8002376:	6838      	ldr	r0, [r7, #0]
 8002378:	69f9      	ldr	r1, [r7, #28]
 800237a:	f501 71cf 	add.w	r1, r1, #414	@ 0x19e
 800237e:	00c9      	lsls	r1, r1, #3
 8002380:	4401      	add	r1, r0
 8002382:	e9c1 2300 	strd	r2, r3, [r1]
		DataStruct->Num_Gz[i] = DataStruct->Num_Gz[i] - DataStruct->De_Gz;
 8002386:	683a      	ldr	r2, [r7, #0]
 8002388:	69fb      	ldr	r3, [r7, #28]
 800238a:	f203 43be 	addw	r3, r3, #1214	@ 0x4be
 800238e:	00db      	lsls	r3, r3, #3
 8002390:	4413      	add	r3, r2
 8002392:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 800239c:	f7fd ff20 	bl	80001e0 <__aeabi_dsub>
 80023a0:	4602      	mov	r2, r0
 80023a2:	460b      	mov	r3, r1
 80023a4:	6838      	ldr	r0, [r7, #0]
 80023a6:	69f9      	ldr	r1, [r7, #28]
 80023a8:	f201 41be 	addw	r1, r1, #1214	@ 0x4be
 80023ac:	00c9      	lsls	r1, r1, #3
 80023ae:	4401      	add	r1, r0
 80023b0:	e9c1 2300 	strd	r2, r3, [r1]
	for(i = 0; i < 400; i++){
 80023b4:	69fb      	ldr	r3, [r7, #28]
 80023b6:	3301      	adds	r3, #1
 80023b8:	61fb      	str	r3, [r7, #28]
 80023ba:	69fb      	ldr	r3, [r7, #28]
 80023bc:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 80023c0:	db9e      	blt.n	8002300 <MPU6050_Balance_Data+0x358>
	}

	for(i = 1;i < 400;i++){
 80023c2:	2301      	movs	r3, #1
 80023c4:	61fb      	str	r3, [r7, #28]
 80023c6:	e05d      	b.n	8002484 <MPU6050_Balance_Data+0x4dc>
					DataStruct->Num_Z[0] += DataStruct->Num_Z[i];
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	@ 0x70
 80023ce:	683a      	ldr	r2, [r7, #0]
 80023d0:	69fb      	ldr	r3, [r7, #28]
 80023d2:	330e      	adds	r3, #14
 80023d4:	00db      	lsls	r3, r3, #3
 80023d6:	4413      	add	r3, r2
 80023d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023dc:	f7fd ff02 	bl	80001e4 <__adddf3>
 80023e0:	4602      	mov	r2, r0
 80023e2:	460b      	mov	r3, r1
 80023e4:	6839      	ldr	r1, [r7, #0]
 80023e6:	e9c1 231c 	strd	r2, r3, [r1, #112]	@ 0x70
					DataStruct->Num_Y[0] += DataStruct->Num_Y[i];
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	f503 53cb 	add.w	r3, r3, #6496	@ 0x1960
 80023f0:	3310      	adds	r3, #16
 80023f2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80023f6:	683a      	ldr	r2, [r7, #0]
 80023f8:	69fb      	ldr	r3, [r7, #28]
 80023fa:	f203 332e 	addw	r3, r3, #814	@ 0x32e
 80023fe:	00db      	lsls	r3, r3, #3
 8002400:	4413      	add	r3, r2
 8002402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002406:	f7fd feed 	bl	80001e4 <__adddf3>
 800240a:	4602      	mov	r2, r0
 800240c:	460b      	mov	r3, r1
 800240e:	4610      	mov	r0, r2
 8002410:	4619      	mov	r1, r3
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	f503 53cb 	add.w	r3, r3, #6496	@ 0x1960
 8002418:	3310      	adds	r3, #16
 800241a:	e9c3 0100 	strd	r0, r1, [r3]
					DataStruct->Num_X[0] += DataStruct->Num_X[i];
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	f503 634f 	add.w	r3, r3, #3312	@ 0xcf0
 8002424:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002428:	683a      	ldr	r2, [r7, #0]
 800242a:	69fb      	ldr	r3, [r7, #28]
 800242c:	f503 73cf 	add.w	r3, r3, #414	@ 0x19e
 8002430:	00db      	lsls	r3, r3, #3
 8002432:	4413      	add	r3, r2
 8002434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002438:	f7fd fed4 	bl	80001e4 <__adddf3>
 800243c:	4602      	mov	r2, r0
 800243e:	460b      	mov	r3, r1
 8002440:	6839      	ldr	r1, [r7, #0]
 8002442:	f501 614f 	add.w	r1, r1, #3312	@ 0xcf0
 8002446:	e9c1 2300 	strd	r2, r3, [r1]
					DataStruct->Num_Gz[0] += DataStruct->Num_Gz[i];
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	f503 5317 	add.w	r3, r3, #9664	@ 0x25c0
 8002450:	3330      	adds	r3, #48	@ 0x30
 8002452:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002456:	683a      	ldr	r2, [r7, #0]
 8002458:	69fb      	ldr	r3, [r7, #28]
 800245a:	f203 43be 	addw	r3, r3, #1214	@ 0x4be
 800245e:	00db      	lsls	r3, r3, #3
 8002460:	4413      	add	r3, r2
 8002462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002466:	f7fd febd 	bl	80001e4 <__adddf3>
 800246a:	4602      	mov	r2, r0
 800246c:	460b      	mov	r3, r1
 800246e:	4610      	mov	r0, r2
 8002470:	4619      	mov	r1, r3
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	f503 5317 	add.w	r3, r3, #9664	@ 0x25c0
 8002478:	3330      	adds	r3, #48	@ 0x30
 800247a:	e9c3 0100 	strd	r0, r1, [r3]
	for(i = 1;i < 400;i++){
 800247e:	69fb      	ldr	r3, [r7, #28]
 8002480:	3301      	adds	r3, #1
 8002482:	61fb      	str	r3, [r7, #28]
 8002484:	69fb      	ldr	r3, [r7, #28]
 8002486:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 800248a:	db9d      	blt.n	80023c8 <MPU6050_Balance_Data+0x420>

		}
	DataStruct->Num_Z[0] = DataStruct->Num_Z[0] / 400.0;
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	@ 0x70
 8002492:	f04f 0200 	mov.w	r2, #0
 8002496:	4b23      	ldr	r3, [pc, #140]	@ (8002524 <MPU6050_Balance_Data+0x57c>)
 8002498:	f7fe f984 	bl	80007a4 <__aeabi_ddiv>
 800249c:	4602      	mov	r2, r0
 800249e:	460b      	mov	r3, r1
 80024a0:	6839      	ldr	r1, [r7, #0]
 80024a2:	e9c1 231c 	strd	r2, r3, [r1, #112]	@ 0x70
	DataStruct->Num_Y[0] = DataStruct->Num_Y[0] / 400.0;
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	f503 53cb 	add.w	r3, r3, #6496	@ 0x1960
 80024ac:	3310      	adds	r3, #16
 80024ae:	e9d3 0100 	ldrd	r0, r1, [r3]
 80024b2:	f04f 0200 	mov.w	r2, #0
 80024b6:	4b1b      	ldr	r3, [pc, #108]	@ (8002524 <MPU6050_Balance_Data+0x57c>)
 80024b8:	f7fe f974 	bl	80007a4 <__aeabi_ddiv>
 80024bc:	4602      	mov	r2, r0
 80024be:	460b      	mov	r3, r1
 80024c0:	4610      	mov	r0, r2
 80024c2:	4619      	mov	r1, r3
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	f503 53cb 	add.w	r3, r3, #6496	@ 0x1960
 80024ca:	3310      	adds	r3, #16
 80024cc:	e9c3 0100 	strd	r0, r1, [r3]
	DataStruct->Num_X[0] = DataStruct->Num_X[0] / 400.0;
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	f503 634f 	add.w	r3, r3, #3312	@ 0xcf0
 80024d6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80024da:	f04f 0200 	mov.w	r2, #0
 80024de:	4b11      	ldr	r3, [pc, #68]	@ (8002524 <MPU6050_Balance_Data+0x57c>)
 80024e0:	f7fe f960 	bl	80007a4 <__aeabi_ddiv>
 80024e4:	4602      	mov	r2, r0
 80024e6:	460b      	mov	r3, r1
 80024e8:	6839      	ldr	r1, [r7, #0]
 80024ea:	f501 614f 	add.w	r1, r1, #3312	@ 0xcf0
 80024ee:	e9c1 2300 	strd	r2, r3, [r1]
	DataStruct->Num_Gz[0] = DataStruct->Num_Gz[0] / 400.0;
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	f503 5317 	add.w	r3, r3, #9664	@ 0x25c0
 80024f8:	3330      	adds	r3, #48	@ 0x30
 80024fa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80024fe:	f04f 0200 	mov.w	r2, #0
 8002502:	4b08      	ldr	r3, [pc, #32]	@ (8002524 <MPU6050_Balance_Data+0x57c>)
 8002504:	f7fe f94e 	bl	80007a4 <__aeabi_ddiv>
 8002508:	4602      	mov	r2, r0
 800250a:	460b      	mov	r3, r1
 800250c:	4610      	mov	r0, r2
 800250e:	4619      	mov	r1, r3
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	f503 5317 	add.w	r3, r3, #9664	@ 0x25c0
 8002516:	3330      	adds	r3, #48	@ 0x30
 8002518:	e9c3 0100 	strd	r0, r1, [r3]


}
 800251c:	bf00      	nop
 800251e:	3720      	adds	r7, #32
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}
 8002524:	40790000 	.word	0x40790000

08002528 <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt) {
 8002528:	b5b0      	push	{r4, r5, r7, lr}
 800252a:	b096      	sub	sp, #88	@ 0x58
 800252c:	af00      	add	r7, sp, #0
 800252e:	61f8      	str	r0, [r7, #28]
 8002530:	ed87 0b04 	vstr	d0, [r7, #16]
 8002534:	ed87 1b02 	vstr	d1, [r7, #8]
 8002538:	ed87 2b00 	vstr	d2, [r7]
    double rate = newRate - Kalman->bias;
 800253c:	69fb      	ldr	r3, [r7, #28]
 800253e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002542:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002546:	f7fd fe4b 	bl	80001e0 <__aeabi_dsub>
 800254a:	4602      	mov	r2, r0
 800254c:	460b      	mov	r3, r1
 800254e:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    Kalman->angle += dt * rate;
 8002552:	69fb      	ldr	r3, [r7, #28]
 8002554:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8002558:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800255c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002560:	f7fd fff6 	bl	8000550 <__aeabi_dmul>
 8002564:	4602      	mov	r2, r0
 8002566:	460b      	mov	r3, r1
 8002568:	4620      	mov	r0, r4
 800256a:	4629      	mov	r1, r5
 800256c:	f7fd fe3a 	bl	80001e4 <__adddf3>
 8002570:	4602      	mov	r2, r0
 8002572:	460b      	mov	r3, r1
 8002574:	69f9      	ldr	r1, [r7, #28]
 8002576:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	@ 0x28
 8002580:	69fb      	ldr	r3, [r7, #28]
 8002582:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8002586:	e9d7 2300 	ldrd	r2, r3, [r7]
 800258a:	f7fd ffe1 	bl	8000550 <__aeabi_dmul>
 800258e:	4602      	mov	r2, r0
 8002590:	460b      	mov	r3, r1
 8002592:	4610      	mov	r0, r2
 8002594:	4619      	mov	r1, r3
 8002596:	69fb      	ldr	r3, [r7, #28]
 8002598:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800259c:	f7fd fe20 	bl	80001e0 <__aeabi_dsub>
 80025a0:	4602      	mov	r2, r0
 80025a2:	460b      	mov	r3, r1
 80025a4:	4610      	mov	r0, r2
 80025a6:	4619      	mov	r1, r3
 80025a8:	69fb      	ldr	r3, [r7, #28]
 80025aa:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80025ae:	f7fd fe17 	bl	80001e0 <__aeabi_dsub>
 80025b2:	4602      	mov	r2, r0
 80025b4:	460b      	mov	r3, r1
 80025b6:	4610      	mov	r0, r2
 80025b8:	4619      	mov	r1, r3
 80025ba:	69fb      	ldr	r3, [r7, #28]
 80025bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025c0:	f7fd fe10 	bl	80001e4 <__adddf3>
 80025c4:	4602      	mov	r2, r0
 80025c6:	460b      	mov	r3, r1
 80025c8:	4610      	mov	r0, r2
 80025ca:	4619      	mov	r1, r3
 80025cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80025d0:	f7fd ffbe 	bl	8000550 <__aeabi_dmul>
 80025d4:	4602      	mov	r2, r0
 80025d6:	460b      	mov	r3, r1
 80025d8:	4620      	mov	r0, r4
 80025da:	4629      	mov	r1, r5
 80025dc:	f7fd fe02 	bl	80001e4 <__adddf3>
 80025e0:	4602      	mov	r2, r0
 80025e2:	460b      	mov	r3, r1
 80025e4:	69f9      	ldr	r1, [r7, #28]
 80025e6:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 80025ea:	69fb      	ldr	r3, [r7, #28]
 80025ec:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 80025f0:	69fb      	ldr	r3, [r7, #28]
 80025f2:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 80025f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80025fa:	f7fd ffa9 	bl	8000550 <__aeabi_dmul>
 80025fe:	4602      	mov	r2, r0
 8002600:	460b      	mov	r3, r1
 8002602:	4620      	mov	r0, r4
 8002604:	4629      	mov	r1, r5
 8002606:	f7fd fdeb 	bl	80001e0 <__aeabi_dsub>
 800260a:	4602      	mov	r2, r0
 800260c:	460b      	mov	r3, r1
 800260e:	69f9      	ldr	r1, [r7, #28]
 8002610:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8002614:	69fb      	ldr	r3, [r7, #28]
 8002616:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	@ 0x38
 800261a:	69fb      	ldr	r3, [r7, #28]
 800261c:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8002620:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002624:	f7fd ff94 	bl	8000550 <__aeabi_dmul>
 8002628:	4602      	mov	r2, r0
 800262a:	460b      	mov	r3, r1
 800262c:	4620      	mov	r0, r4
 800262e:	4629      	mov	r1, r5
 8002630:	f7fd fdd6 	bl	80001e0 <__aeabi_dsub>
 8002634:	4602      	mov	r2, r0
 8002636:	460b      	mov	r3, r1
 8002638:	69f9      	ldr	r1, [r7, #28]
 800263a:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
 8002644:	69fb      	ldr	r3, [r7, #28]
 8002646:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800264a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800264e:	f7fd ff7f 	bl	8000550 <__aeabi_dmul>
 8002652:	4602      	mov	r2, r0
 8002654:	460b      	mov	r3, r1
 8002656:	4620      	mov	r0, r4
 8002658:	4629      	mov	r1, r5
 800265a:	f7fd fdc3 	bl	80001e4 <__adddf3>
 800265e:	4602      	mov	r2, r0
 8002660:	460b      	mov	r3, r1
 8002662:	69f9      	ldr	r1, [r7, #28]
 8002664:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 8002668:	69fb      	ldr	r3, [r7, #28]
 800266a:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002674:	f7fd fdb6 	bl	80001e4 <__adddf3>
 8002678:	4602      	mov	r2, r0
 800267a:	460b      	mov	r3, r1
 800267c:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 8002680:	69fb      	ldr	r3, [r7, #28]
 8002682:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8002686:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800268a:	f7fe f88b 	bl	80007a4 <__aeabi_ddiv>
 800268e:	4602      	mov	r2, r0
 8002690:	460b      	mov	r3, r1
 8002692:	e9c7 2308 	strd	r2, r3, [r7, #32]
    K[1] = Kalman->P[1][0] / S;
 8002696:	69fb      	ldr	r3, [r7, #28]
 8002698:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800269c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80026a0:	f7fe f880 	bl	80007a4 <__aeabi_ddiv>
 80026a4:	4602      	mov	r2, r0
 80026a6:	460b      	mov	r3, r1
 80026a8:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

    double y = newAngle - Kalman->angle;
 80026ac:	69fb      	ldr	r3, [r7, #28]
 80026ae:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80026b2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80026b6:	f7fd fd93 	bl	80001e0 <__aeabi_dsub>
 80026ba:	4602      	mov	r2, r0
 80026bc:	460b      	mov	r3, r1
 80026be:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    Kalman->angle += K[0] * y;
 80026c2:	69fb      	ldr	r3, [r7, #28]
 80026c4:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80026c8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80026cc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80026d0:	f7fd ff3e 	bl	8000550 <__aeabi_dmul>
 80026d4:	4602      	mov	r2, r0
 80026d6:	460b      	mov	r3, r1
 80026d8:	4620      	mov	r0, r4
 80026da:	4629      	mov	r1, r5
 80026dc:	f7fd fd82 	bl	80001e4 <__adddf3>
 80026e0:	4602      	mov	r2, r0
 80026e2:	460b      	mov	r3, r1
 80026e4:	69f9      	ldr	r1, [r7, #28]
 80026e6:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 80026ea:	69fb      	ldr	r3, [r7, #28]
 80026ec:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 80026f0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80026f4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80026f8:	f7fd ff2a 	bl	8000550 <__aeabi_dmul>
 80026fc:	4602      	mov	r2, r0
 80026fe:	460b      	mov	r3, r1
 8002700:	4620      	mov	r0, r4
 8002702:	4629      	mov	r1, r5
 8002704:	f7fd fd6e 	bl	80001e4 <__adddf3>
 8002708:	4602      	mov	r2, r0
 800270a:	460b      	mov	r3, r1
 800270c:	69f9      	ldr	r1, [r7, #28]
 800270e:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8002718:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    double P01_temp = Kalman->P[0][1];
 800271c:	69fb      	ldr	r3, [r7, #28]
 800271e:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8002722:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    Kalman->P[0][0] -= K[0] * P00_temp;
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	@ 0x28
 800272c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002730:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002734:	f7fd ff0c 	bl	8000550 <__aeabi_dmul>
 8002738:	4602      	mov	r2, r0
 800273a:	460b      	mov	r3, r1
 800273c:	4620      	mov	r0, r4
 800273e:	4629      	mov	r1, r5
 8002740:	f7fd fd4e 	bl	80001e0 <__aeabi_dsub>
 8002744:	4602      	mov	r2, r0
 8002746:	460b      	mov	r3, r1
 8002748:	69f9      	ldr	r1, [r7, #28]
 800274a:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 800274e:	69fb      	ldr	r3, [r7, #28]
 8002750:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 8002754:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002758:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800275c:	f7fd fef8 	bl	8000550 <__aeabi_dmul>
 8002760:	4602      	mov	r2, r0
 8002762:	460b      	mov	r3, r1
 8002764:	4620      	mov	r0, r4
 8002766:	4629      	mov	r1, r5
 8002768:	f7fd fd3a 	bl	80001e0 <__aeabi_dsub>
 800276c:	4602      	mov	r2, r0
 800276e:	460b      	mov	r3, r1
 8002770:	69f9      	ldr	r1, [r7, #28]
 8002772:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 8002776:	69fb      	ldr	r3, [r7, #28]
 8002778:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	@ 0x38
 800277c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002780:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002784:	f7fd fee4 	bl	8000550 <__aeabi_dmul>
 8002788:	4602      	mov	r2, r0
 800278a:	460b      	mov	r3, r1
 800278c:	4620      	mov	r0, r4
 800278e:	4629      	mov	r1, r5
 8002790:	f7fd fd26 	bl	80001e0 <__aeabi_dsub>
 8002794:	4602      	mov	r2, r0
 8002796:	460b      	mov	r3, r1
 8002798:	69f9      	ldr	r1, [r7, #28]
 800279a:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
 80027a4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80027a8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80027ac:	f7fd fed0 	bl	8000550 <__aeabi_dmul>
 80027b0:	4602      	mov	r2, r0
 80027b2:	460b      	mov	r3, r1
 80027b4:	4620      	mov	r0, r4
 80027b6:	4629      	mov	r1, r5
 80027b8:	f7fd fd12 	bl	80001e0 <__aeabi_dsub>
 80027bc:	4602      	mov	r2, r0
 80027be:	460b      	mov	r3, r1
 80027c0:	69f9      	ldr	r1, [r7, #28]
 80027c2:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

    return Kalman->angle;
 80027c6:	69fb      	ldr	r3, [r7, #28]
 80027c8:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80027cc:	ec43 2b17 	vmov	d7, r2, r3
};
 80027d0:	eeb0 0a47 	vmov.f32	s0, s14
 80027d4:	eef0 0a67 	vmov.f32	s1, s15
 80027d8:	3758      	adds	r7, #88	@ 0x58
 80027da:	46bd      	mov	sp, r7
 80027dc:	bdb0      	pop	{r4, r5, r7, pc}
	...

080027e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b083      	sub	sp, #12
 80027e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027e6:	2300      	movs	r3, #0
 80027e8:	607b      	str	r3, [r7, #4]
 80027ea:	4b10      	ldr	r3, [pc, #64]	@ (800282c <HAL_MspInit+0x4c>)
 80027ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027ee:	4a0f      	ldr	r2, [pc, #60]	@ (800282c <HAL_MspInit+0x4c>)
 80027f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80027f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80027f6:	4b0d      	ldr	r3, [pc, #52]	@ (800282c <HAL_MspInit+0x4c>)
 80027f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80027fe:	607b      	str	r3, [r7, #4]
 8002800:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002802:	2300      	movs	r3, #0
 8002804:	603b      	str	r3, [r7, #0]
 8002806:	4b09      	ldr	r3, [pc, #36]	@ (800282c <HAL_MspInit+0x4c>)
 8002808:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800280a:	4a08      	ldr	r2, [pc, #32]	@ (800282c <HAL_MspInit+0x4c>)
 800280c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002810:	6413      	str	r3, [r2, #64]	@ 0x40
 8002812:	4b06      	ldr	r3, [pc, #24]	@ (800282c <HAL_MspInit+0x4c>)
 8002814:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002816:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800281a:	603b      	str	r3, [r7, #0]
 800281c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800281e:	bf00      	nop
 8002820:	370c      	adds	r7, #12
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr
 800282a:	bf00      	nop
 800282c:	40023800 	.word	0x40023800

08002830 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b08a      	sub	sp, #40	@ 0x28
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002838:	f107 0314 	add.w	r3, r7, #20
 800283c:	2200      	movs	r2, #0
 800283e:	601a      	str	r2, [r3, #0]
 8002840:	605a      	str	r2, [r3, #4]
 8002842:	609a      	str	r2, [r3, #8]
 8002844:	60da      	str	r2, [r3, #12]
 8002846:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a19      	ldr	r2, [pc, #100]	@ (80028b4 <HAL_I2C_MspInit+0x84>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d12b      	bne.n	80028aa <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002852:	2300      	movs	r3, #0
 8002854:	613b      	str	r3, [r7, #16]
 8002856:	4b18      	ldr	r3, [pc, #96]	@ (80028b8 <HAL_I2C_MspInit+0x88>)
 8002858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800285a:	4a17      	ldr	r2, [pc, #92]	@ (80028b8 <HAL_I2C_MspInit+0x88>)
 800285c:	f043 0302 	orr.w	r3, r3, #2
 8002860:	6313      	str	r3, [r2, #48]	@ 0x30
 8002862:	4b15      	ldr	r3, [pc, #84]	@ (80028b8 <HAL_I2C_MspInit+0x88>)
 8002864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002866:	f003 0302 	and.w	r3, r3, #2
 800286a:	613b      	str	r3, [r7, #16]
 800286c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C_SCL_Pin|I2C_SDA_Pin;
 800286e:	23c0      	movs	r3, #192	@ 0xc0
 8002870:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002872:	2312      	movs	r3, #18
 8002874:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002876:	2300      	movs	r3, #0
 8002878:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800287a:	2303      	movs	r3, #3
 800287c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800287e:	2304      	movs	r3, #4
 8002880:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002882:	f107 0314 	add.w	r3, r7, #20
 8002886:	4619      	mov	r1, r3
 8002888:	480c      	ldr	r0, [pc, #48]	@ (80028bc <HAL_I2C_MspInit+0x8c>)
 800288a:	f000 fb77 	bl	8002f7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800288e:	2300      	movs	r3, #0
 8002890:	60fb      	str	r3, [r7, #12]
 8002892:	4b09      	ldr	r3, [pc, #36]	@ (80028b8 <HAL_I2C_MspInit+0x88>)
 8002894:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002896:	4a08      	ldr	r2, [pc, #32]	@ (80028b8 <HAL_I2C_MspInit+0x88>)
 8002898:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800289c:	6413      	str	r3, [r2, #64]	@ 0x40
 800289e:	4b06      	ldr	r3, [pc, #24]	@ (80028b8 <HAL_I2C_MspInit+0x88>)
 80028a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028a2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80028a6:	60fb      	str	r3, [r7, #12]
 80028a8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80028aa:	bf00      	nop
 80028ac:	3728      	adds	r7, #40	@ 0x28
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop
 80028b4:	40005400 	.word	0x40005400
 80028b8:	40023800 	.word	0x40023800
 80028bc:	40020400 	.word	0x40020400

080028c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b08c      	sub	sp, #48	@ 0x30
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028c8:	f107 031c 	add.w	r3, r7, #28
 80028cc:	2200      	movs	r2, #0
 80028ce:	601a      	str	r2, [r3, #0]
 80028d0:	605a      	str	r2, [r3, #4]
 80028d2:	609a      	str	r2, [r3, #8]
 80028d4:	60da      	str	r2, [r3, #12]
 80028d6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a36      	ldr	r2, [pc, #216]	@ (80029b8 <HAL_UART_MspInit+0xf8>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d12d      	bne.n	800293e <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80028e2:	2300      	movs	r3, #0
 80028e4:	61bb      	str	r3, [r7, #24]
 80028e6:	4b35      	ldr	r3, [pc, #212]	@ (80029bc <HAL_UART_MspInit+0xfc>)
 80028e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028ea:	4a34      	ldr	r2, [pc, #208]	@ (80029bc <HAL_UART_MspInit+0xfc>)
 80028ec:	f043 0310 	orr.w	r3, r3, #16
 80028f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80028f2:	4b32      	ldr	r3, [pc, #200]	@ (80029bc <HAL_UART_MspInit+0xfc>)
 80028f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028f6:	f003 0310 	and.w	r3, r3, #16
 80028fa:	61bb      	str	r3, [r7, #24]
 80028fc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028fe:	2300      	movs	r3, #0
 8002900:	617b      	str	r3, [r7, #20]
 8002902:	4b2e      	ldr	r3, [pc, #184]	@ (80029bc <HAL_UART_MspInit+0xfc>)
 8002904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002906:	4a2d      	ldr	r2, [pc, #180]	@ (80029bc <HAL_UART_MspInit+0xfc>)
 8002908:	f043 0301 	orr.w	r3, r3, #1
 800290c:	6313      	str	r3, [r2, #48]	@ 0x30
 800290e:	4b2b      	ldr	r3, [pc, #172]	@ (80029bc <HAL_UART_MspInit+0xfc>)
 8002910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002912:	f003 0301 	and.w	r3, r3, #1
 8002916:	617b      	str	r3, [r7, #20]
 8002918:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800291a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800291e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002920:	2302      	movs	r3, #2
 8002922:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002924:	2300      	movs	r3, #0
 8002926:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002928:	2303      	movs	r3, #3
 800292a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800292c:	2307      	movs	r3, #7
 800292e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002930:	f107 031c 	add.w	r3, r7, #28
 8002934:	4619      	mov	r1, r3
 8002936:	4822      	ldr	r0, [pc, #136]	@ (80029c0 <HAL_UART_MspInit+0x100>)
 8002938:	f000 fb20 	bl	8002f7c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800293c:	e038      	b.n	80029b0 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a20      	ldr	r2, [pc, #128]	@ (80029c4 <HAL_UART_MspInit+0x104>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d133      	bne.n	80029b0 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002948:	2300      	movs	r3, #0
 800294a:	613b      	str	r3, [r7, #16]
 800294c:	4b1b      	ldr	r3, [pc, #108]	@ (80029bc <HAL_UART_MspInit+0xfc>)
 800294e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002950:	4a1a      	ldr	r2, [pc, #104]	@ (80029bc <HAL_UART_MspInit+0xfc>)
 8002952:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002956:	6413      	str	r3, [r2, #64]	@ 0x40
 8002958:	4b18      	ldr	r3, [pc, #96]	@ (80029bc <HAL_UART_MspInit+0xfc>)
 800295a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800295c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002960:	613b      	str	r3, [r7, #16]
 8002962:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002964:	2300      	movs	r3, #0
 8002966:	60fb      	str	r3, [r7, #12]
 8002968:	4b14      	ldr	r3, [pc, #80]	@ (80029bc <HAL_UART_MspInit+0xfc>)
 800296a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800296c:	4a13      	ldr	r2, [pc, #76]	@ (80029bc <HAL_UART_MspInit+0xfc>)
 800296e:	f043 0301 	orr.w	r3, r3, #1
 8002972:	6313      	str	r3, [r2, #48]	@ 0x30
 8002974:	4b11      	ldr	r3, [pc, #68]	@ (80029bc <HAL_UART_MspInit+0xfc>)
 8002976:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002978:	f003 0301 	and.w	r3, r3, #1
 800297c:	60fb      	str	r3, [r7, #12]
 800297e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002980:	230c      	movs	r3, #12
 8002982:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002984:	2302      	movs	r3, #2
 8002986:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002988:	2300      	movs	r3, #0
 800298a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800298c:	2303      	movs	r3, #3
 800298e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002990:	2307      	movs	r3, #7
 8002992:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002994:	f107 031c 	add.w	r3, r7, #28
 8002998:	4619      	mov	r1, r3
 800299a:	4809      	ldr	r0, [pc, #36]	@ (80029c0 <HAL_UART_MspInit+0x100>)
 800299c:	f000 faee 	bl	8002f7c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 80029a0:	2200      	movs	r2, #0
 80029a2:	2101      	movs	r1, #1
 80029a4:	2026      	movs	r0, #38	@ 0x26
 80029a6:	f000 fa20 	bl	8002dea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80029aa:	2026      	movs	r0, #38	@ 0x26
 80029ac:	f000 fa39 	bl	8002e22 <HAL_NVIC_EnableIRQ>
}
 80029b0:	bf00      	nop
 80029b2:	3730      	adds	r7, #48	@ 0x30
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}
 80029b8:	40011000 	.word	0x40011000
 80029bc:	40023800 	.word	0x40023800
 80029c0:	40020000 	.word	0x40020000
 80029c4:	40004400 	.word	0x40004400

080029c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80029c8:	b480      	push	{r7}
 80029ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80029cc:	bf00      	nop
 80029ce:	e7fd      	b.n	80029cc <NMI_Handler+0x4>

080029d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80029d0:	b480      	push	{r7}
 80029d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80029d4:	bf00      	nop
 80029d6:	e7fd      	b.n	80029d4 <HardFault_Handler+0x4>

080029d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80029d8:	b480      	push	{r7}
 80029da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80029dc:	bf00      	nop
 80029de:	e7fd      	b.n	80029dc <MemManage_Handler+0x4>

080029e0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80029e0:	b480      	push	{r7}
 80029e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80029e4:	bf00      	nop
 80029e6:	e7fd      	b.n	80029e4 <BusFault_Handler+0x4>

080029e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80029e8:	b480      	push	{r7}
 80029ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80029ec:	bf00      	nop
 80029ee:	e7fd      	b.n	80029ec <UsageFault_Handler+0x4>

080029f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80029f0:	b480      	push	{r7}
 80029f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80029f4:	bf00      	nop
 80029f6:	46bd      	mov	sp, r7
 80029f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fc:	4770      	bx	lr

080029fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80029fe:	b480      	push	{r7}
 8002a00:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a02:	bf00      	nop
 8002a04:	46bd      	mov	sp, r7
 8002a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0a:	4770      	bx	lr

08002a0c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a10:	bf00      	nop
 8002a12:	46bd      	mov	sp, r7
 8002a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a18:	4770      	bx	lr

08002a1a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a1a:	b580      	push	{r7, lr}
 8002a1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a1e:	f000 f8c5 	bl	8002bac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a22:	bf00      	nop
 8002a24:	bd80      	pop	{r7, pc}
	...

08002a28 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002a2c:	4802      	ldr	r0, [pc, #8]	@ (8002a38 <USART2_IRQHandler+0x10>)
 8002a2e:	f002 f9a5 	bl	8004d7c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002a32:	bf00      	nop
 8002a34:	bd80      	pop	{r7, pc}
 8002a36:	bf00      	nop
 8002a38:	200034ec 	.word	0x200034ec

08002a3c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002a40:	4b06      	ldr	r3, [pc, #24]	@ (8002a5c <SystemInit+0x20>)
 8002a42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a46:	4a05      	ldr	r2, [pc, #20]	@ (8002a5c <SystemInit+0x20>)
 8002a48:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002a4c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a50:	bf00      	nop
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr
 8002a5a:	bf00      	nop
 8002a5c:	e000ed00 	.word	0xe000ed00

08002a60 <MX_USART2_UART_Init>:
  }

}
*/
void MX_USART2_UART_Init(void)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8002a64:	4b11      	ldr	r3, [pc, #68]	@ (8002aac <MX_USART2_UART_Init+0x4c>)
 8002a66:	4a12      	ldr	r2, [pc, #72]	@ (8002ab0 <MX_USART2_UART_Init+0x50>)
 8002a68:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002a6a:	4b10      	ldr	r3, [pc, #64]	@ (8002aac <MX_USART2_UART_Init+0x4c>)
 8002a6c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002a70:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002a72:	4b0e      	ldr	r3, [pc, #56]	@ (8002aac <MX_USART2_UART_Init+0x4c>)
 8002a74:	2200      	movs	r2, #0
 8002a76:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002a78:	4b0c      	ldr	r3, [pc, #48]	@ (8002aac <MX_USART2_UART_Init+0x4c>)
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002a7e:	4b0b      	ldr	r3, [pc, #44]	@ (8002aac <MX_USART2_UART_Init+0x4c>)
 8002a80:	2200      	movs	r2, #0
 8002a82:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002a84:	4b09      	ldr	r3, [pc, #36]	@ (8002aac <MX_USART2_UART_Init+0x4c>)
 8002a86:	220c      	movs	r2, #12
 8002a88:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a8a:	4b08      	ldr	r3, [pc, #32]	@ (8002aac <MX_USART2_UART_Init+0x4c>)
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a90:	4b06      	ldr	r3, [pc, #24]	@ (8002aac <MX_USART2_UART_Init+0x4c>)
 8002a92:	2200      	movs	r2, #0
 8002a94:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002a96:	4805      	ldr	r0, [pc, #20]	@ (8002aac <MX_USART2_UART_Init+0x4c>)
 8002a98:	f002 f870 	bl	8004b7c <HAL_UART_Init>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d001      	beq.n	8002aa6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002aa2:	f7fe fbcb 	bl	800123c <Error_Handler>
  }

  // cấu hình ngắt
//  __HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);

}
 8002aa6:	bf00      	nop
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	200034ec 	.word	0x200034ec
 8002ab0:	40004400 	.word	0x40004400

08002ab4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002ab4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002aec <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002ab8:	f7ff ffc0 	bl	8002a3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002abc:	480c      	ldr	r0, [pc, #48]	@ (8002af0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002abe:	490d      	ldr	r1, [pc, #52]	@ (8002af4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002ac0:	4a0d      	ldr	r2, [pc, #52]	@ (8002af8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002ac2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ac4:	e002      	b.n	8002acc <LoopCopyDataInit>

08002ac6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ac6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ac8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002aca:	3304      	adds	r3, #4

08002acc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002acc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ace:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ad0:	d3f9      	bcc.n	8002ac6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ad2:	4a0a      	ldr	r2, [pc, #40]	@ (8002afc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002ad4:	4c0a      	ldr	r4, [pc, #40]	@ (8002b00 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002ad6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ad8:	e001      	b.n	8002ade <LoopFillZerobss>

08002ada <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ada:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002adc:	3204      	adds	r2, #4

08002ade <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ade:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ae0:	d3fb      	bcc.n	8002ada <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002ae2:	f003 f8af 	bl	8005c44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002ae6:	f7fe fa5b 	bl	8000fa0 <main>
  bx  lr    
 8002aea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002aec:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002af0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002af4:	200001a0 	.word	0x200001a0
  ldr r2, =_sidata
 8002af8:	080076f0 	.word	0x080076f0
  ldr r2, =_sbss
 8002afc:	200001a0 	.word	0x200001a0
  ldr r4, =_ebss
 8002b00:	20003670 	.word	0x20003670

08002b04 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002b04:	e7fe      	b.n	8002b04 <ADC_IRQHandler>
	...

08002b08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002b0c:	4b0e      	ldr	r3, [pc, #56]	@ (8002b48 <HAL_Init+0x40>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a0d      	ldr	r2, [pc, #52]	@ (8002b48 <HAL_Init+0x40>)
 8002b12:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002b16:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002b18:	4b0b      	ldr	r3, [pc, #44]	@ (8002b48 <HAL_Init+0x40>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a0a      	ldr	r2, [pc, #40]	@ (8002b48 <HAL_Init+0x40>)
 8002b1e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002b22:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b24:	4b08      	ldr	r3, [pc, #32]	@ (8002b48 <HAL_Init+0x40>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a07      	ldr	r2, [pc, #28]	@ (8002b48 <HAL_Init+0x40>)
 8002b2a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b2e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b30:	2003      	movs	r0, #3
 8002b32:	f000 f94f 	bl	8002dd4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b36:	200f      	movs	r0, #15
 8002b38:	f000 f808 	bl	8002b4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b3c:	f7ff fe50 	bl	80027e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b40:	2300      	movs	r3, #0
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	bf00      	nop
 8002b48:	40023c00 	.word	0x40023c00

08002b4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b082      	sub	sp, #8
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b54:	4b12      	ldr	r3, [pc, #72]	@ (8002ba0 <HAL_InitTick+0x54>)
 8002b56:	681a      	ldr	r2, [r3, #0]
 8002b58:	4b12      	ldr	r3, [pc, #72]	@ (8002ba4 <HAL_InitTick+0x58>)
 8002b5a:	781b      	ldrb	r3, [r3, #0]
 8002b5c:	4619      	mov	r1, r3
 8002b5e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002b62:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b66:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f000 f967 	bl	8002e3e <HAL_SYSTICK_Config>
 8002b70:	4603      	mov	r3, r0
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d001      	beq.n	8002b7a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	e00e      	b.n	8002b98 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2b0f      	cmp	r3, #15
 8002b7e:	d80a      	bhi.n	8002b96 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b80:	2200      	movs	r2, #0
 8002b82:	6879      	ldr	r1, [r7, #4]
 8002b84:	f04f 30ff 	mov.w	r0, #4294967295
 8002b88:	f000 f92f 	bl	8002dea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b8c:	4a06      	ldr	r2, [pc, #24]	@ (8002ba8 <HAL_InitTick+0x5c>)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b92:	2300      	movs	r3, #0
 8002b94:	e000      	b.n	8002b98 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	3708      	adds	r7, #8
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}
 8002ba0:	20000130 	.word	0x20000130
 8002ba4:	20000138 	.word	0x20000138
 8002ba8:	20000134 	.word	0x20000134

08002bac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002bac:	b480      	push	{r7}
 8002bae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002bb0:	4b06      	ldr	r3, [pc, #24]	@ (8002bcc <HAL_IncTick+0x20>)
 8002bb2:	781b      	ldrb	r3, [r3, #0]
 8002bb4:	461a      	mov	r2, r3
 8002bb6:	4b06      	ldr	r3, [pc, #24]	@ (8002bd0 <HAL_IncTick+0x24>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4413      	add	r3, r2
 8002bbc:	4a04      	ldr	r2, [pc, #16]	@ (8002bd0 <HAL_IncTick+0x24>)
 8002bbe:	6013      	str	r3, [r2, #0]
}
 8002bc0:	bf00      	nop
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr
 8002bca:	bf00      	nop
 8002bcc:	20000138 	.word	0x20000138
 8002bd0:	20003534 	.word	0x20003534

08002bd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	af00      	add	r7, sp, #0
  return uwTick;
 8002bd8:	4b03      	ldr	r3, [pc, #12]	@ (8002be8 <HAL_GetTick+0x14>)
 8002bda:	681b      	ldr	r3, [r3, #0]
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr
 8002be6:	bf00      	nop
 8002be8:	20003534 	.word	0x20003534

08002bec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b084      	sub	sp, #16
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002bf4:	f7ff ffee 	bl	8002bd4 <HAL_GetTick>
 8002bf8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c04:	d005      	beq.n	8002c12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c06:	4b0a      	ldr	r3, [pc, #40]	@ (8002c30 <HAL_Delay+0x44>)
 8002c08:	781b      	ldrb	r3, [r3, #0]
 8002c0a:	461a      	mov	r2, r3
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	4413      	add	r3, r2
 8002c10:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002c12:	bf00      	nop
 8002c14:	f7ff ffde 	bl	8002bd4 <HAL_GetTick>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	68fa      	ldr	r2, [r7, #12]
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d8f7      	bhi.n	8002c14 <HAL_Delay+0x28>
  {
  }
}
 8002c24:	bf00      	nop
 8002c26:	bf00      	nop
 8002c28:	3710      	adds	r7, #16
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}
 8002c2e:	bf00      	nop
 8002c30:	20000138 	.word	0x20000138

08002c34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b085      	sub	sp, #20
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	f003 0307 	and.w	r3, r3, #7
 8002c42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c44:	4b0c      	ldr	r3, [pc, #48]	@ (8002c78 <__NVIC_SetPriorityGrouping+0x44>)
 8002c46:	68db      	ldr	r3, [r3, #12]
 8002c48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c4a:	68ba      	ldr	r2, [r7, #8]
 8002c4c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002c50:	4013      	ands	r3, r2
 8002c52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c5c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002c60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c66:	4a04      	ldr	r2, [pc, #16]	@ (8002c78 <__NVIC_SetPriorityGrouping+0x44>)
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	60d3      	str	r3, [r2, #12]
}
 8002c6c:	bf00      	nop
 8002c6e:	3714      	adds	r7, #20
 8002c70:	46bd      	mov	sp, r7
 8002c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c76:	4770      	bx	lr
 8002c78:	e000ed00 	.word	0xe000ed00

08002c7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c80:	4b04      	ldr	r3, [pc, #16]	@ (8002c94 <__NVIC_GetPriorityGrouping+0x18>)
 8002c82:	68db      	ldr	r3, [r3, #12]
 8002c84:	0a1b      	lsrs	r3, r3, #8
 8002c86:	f003 0307 	and.w	r3, r3, #7
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c92:	4770      	bx	lr
 8002c94:	e000ed00 	.word	0xe000ed00

08002c98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b083      	sub	sp, #12
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	db0b      	blt.n	8002cc2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002caa:	79fb      	ldrb	r3, [r7, #7]
 8002cac:	f003 021f 	and.w	r2, r3, #31
 8002cb0:	4907      	ldr	r1, [pc, #28]	@ (8002cd0 <__NVIC_EnableIRQ+0x38>)
 8002cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cb6:	095b      	lsrs	r3, r3, #5
 8002cb8:	2001      	movs	r0, #1
 8002cba:	fa00 f202 	lsl.w	r2, r0, r2
 8002cbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002cc2:	bf00      	nop
 8002cc4:	370c      	adds	r7, #12
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr
 8002cce:	bf00      	nop
 8002cd0:	e000e100 	.word	0xe000e100

08002cd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b083      	sub	sp, #12
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	4603      	mov	r3, r0
 8002cdc:	6039      	str	r1, [r7, #0]
 8002cde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ce0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	db0a      	blt.n	8002cfe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	b2da      	uxtb	r2, r3
 8002cec:	490c      	ldr	r1, [pc, #48]	@ (8002d20 <__NVIC_SetPriority+0x4c>)
 8002cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cf2:	0112      	lsls	r2, r2, #4
 8002cf4:	b2d2      	uxtb	r2, r2
 8002cf6:	440b      	add	r3, r1
 8002cf8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002cfc:	e00a      	b.n	8002d14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	b2da      	uxtb	r2, r3
 8002d02:	4908      	ldr	r1, [pc, #32]	@ (8002d24 <__NVIC_SetPriority+0x50>)
 8002d04:	79fb      	ldrb	r3, [r7, #7]
 8002d06:	f003 030f 	and.w	r3, r3, #15
 8002d0a:	3b04      	subs	r3, #4
 8002d0c:	0112      	lsls	r2, r2, #4
 8002d0e:	b2d2      	uxtb	r2, r2
 8002d10:	440b      	add	r3, r1
 8002d12:	761a      	strb	r2, [r3, #24]
}
 8002d14:	bf00      	nop
 8002d16:	370c      	adds	r7, #12
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1e:	4770      	bx	lr
 8002d20:	e000e100 	.word	0xe000e100
 8002d24:	e000ed00 	.word	0xe000ed00

08002d28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b089      	sub	sp, #36	@ 0x24
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	60f8      	str	r0, [r7, #12]
 8002d30:	60b9      	str	r1, [r7, #8]
 8002d32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	f003 0307 	and.w	r3, r3, #7
 8002d3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d3c:	69fb      	ldr	r3, [r7, #28]
 8002d3e:	f1c3 0307 	rsb	r3, r3, #7
 8002d42:	2b04      	cmp	r3, #4
 8002d44:	bf28      	it	cs
 8002d46:	2304      	movcs	r3, #4
 8002d48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d4a:	69fb      	ldr	r3, [r7, #28]
 8002d4c:	3304      	adds	r3, #4
 8002d4e:	2b06      	cmp	r3, #6
 8002d50:	d902      	bls.n	8002d58 <NVIC_EncodePriority+0x30>
 8002d52:	69fb      	ldr	r3, [r7, #28]
 8002d54:	3b03      	subs	r3, #3
 8002d56:	e000      	b.n	8002d5a <NVIC_EncodePriority+0x32>
 8002d58:	2300      	movs	r3, #0
 8002d5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d5c:	f04f 32ff 	mov.w	r2, #4294967295
 8002d60:	69bb      	ldr	r3, [r7, #24]
 8002d62:	fa02 f303 	lsl.w	r3, r2, r3
 8002d66:	43da      	mvns	r2, r3
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	401a      	ands	r2, r3
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d70:	f04f 31ff 	mov.w	r1, #4294967295
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	fa01 f303 	lsl.w	r3, r1, r3
 8002d7a:	43d9      	mvns	r1, r3
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d80:	4313      	orrs	r3, r2
         );
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	3724      	adds	r7, #36	@ 0x24
 8002d86:	46bd      	mov	sp, r7
 8002d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8c:	4770      	bx	lr
	...

08002d90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b082      	sub	sp, #8
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	3b01      	subs	r3, #1
 8002d9c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002da0:	d301      	bcc.n	8002da6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002da2:	2301      	movs	r3, #1
 8002da4:	e00f      	b.n	8002dc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002da6:	4a0a      	ldr	r2, [pc, #40]	@ (8002dd0 <SysTick_Config+0x40>)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	3b01      	subs	r3, #1
 8002dac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002dae:	210f      	movs	r1, #15
 8002db0:	f04f 30ff 	mov.w	r0, #4294967295
 8002db4:	f7ff ff8e 	bl	8002cd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002db8:	4b05      	ldr	r3, [pc, #20]	@ (8002dd0 <SysTick_Config+0x40>)
 8002dba:	2200      	movs	r2, #0
 8002dbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002dbe:	4b04      	ldr	r3, [pc, #16]	@ (8002dd0 <SysTick_Config+0x40>)
 8002dc0:	2207      	movs	r2, #7
 8002dc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002dc4:	2300      	movs	r3, #0
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	3708      	adds	r7, #8
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}
 8002dce:	bf00      	nop
 8002dd0:	e000e010 	.word	0xe000e010

08002dd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b082      	sub	sp, #8
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ddc:	6878      	ldr	r0, [r7, #4]
 8002dde:	f7ff ff29 	bl	8002c34 <__NVIC_SetPriorityGrouping>
}
 8002de2:	bf00      	nop
 8002de4:	3708      	adds	r7, #8
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}

08002dea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002dea:	b580      	push	{r7, lr}
 8002dec:	b086      	sub	sp, #24
 8002dee:	af00      	add	r7, sp, #0
 8002df0:	4603      	mov	r3, r0
 8002df2:	60b9      	str	r1, [r7, #8]
 8002df4:	607a      	str	r2, [r7, #4]
 8002df6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002dfc:	f7ff ff3e 	bl	8002c7c <__NVIC_GetPriorityGrouping>
 8002e00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e02:	687a      	ldr	r2, [r7, #4]
 8002e04:	68b9      	ldr	r1, [r7, #8]
 8002e06:	6978      	ldr	r0, [r7, #20]
 8002e08:	f7ff ff8e 	bl	8002d28 <NVIC_EncodePriority>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e12:	4611      	mov	r1, r2
 8002e14:	4618      	mov	r0, r3
 8002e16:	f7ff ff5d 	bl	8002cd4 <__NVIC_SetPriority>
}
 8002e1a:	bf00      	nop
 8002e1c:	3718      	adds	r7, #24
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}

08002e22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e22:	b580      	push	{r7, lr}
 8002e24:	b082      	sub	sp, #8
 8002e26:	af00      	add	r7, sp, #0
 8002e28:	4603      	mov	r3, r0
 8002e2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e30:	4618      	mov	r0, r3
 8002e32:	f7ff ff31 	bl	8002c98 <__NVIC_EnableIRQ>
}
 8002e36:	bf00      	nop
 8002e38:	3708      	adds	r7, #8
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}

08002e3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e3e:	b580      	push	{r7, lr}
 8002e40:	b082      	sub	sp, #8
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	f7ff ffa2 	bl	8002d90 <SysTick_Config>
 8002e4c:	4603      	mov	r3, r0
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	3708      	adds	r7, #8
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}

08002e56 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002e56:	b580      	push	{r7, lr}
 8002e58:	b084      	sub	sp, #16
 8002e5a:	af00      	add	r7, sp, #0
 8002e5c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e62:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002e64:	f7ff feb6 	bl	8002bd4 <HAL_GetTick>
 8002e68:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002e70:	b2db      	uxtb	r3, r3
 8002e72:	2b02      	cmp	r3, #2
 8002e74:	d008      	beq.n	8002e88 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2280      	movs	r2, #128	@ 0x80
 8002e7a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	e052      	b.n	8002f2e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f022 0216 	bic.w	r2, r2, #22
 8002e96:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	695a      	ldr	r2, [r3, #20]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002ea6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d103      	bne.n	8002eb8 <HAL_DMA_Abort+0x62>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d007      	beq.n	8002ec8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f022 0208 	bic.w	r2, r2, #8
 8002ec6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	681a      	ldr	r2, [r3, #0]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f022 0201 	bic.w	r2, r2, #1
 8002ed6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ed8:	e013      	b.n	8002f02 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002eda:	f7ff fe7b 	bl	8002bd4 <HAL_GetTick>
 8002ede:	4602      	mov	r2, r0
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	1ad3      	subs	r3, r2, r3
 8002ee4:	2b05      	cmp	r3, #5
 8002ee6:	d90c      	bls.n	8002f02 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2220      	movs	r2, #32
 8002eec:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2203      	movs	r2, #3
 8002ef2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002efe:	2303      	movs	r3, #3
 8002f00:	e015      	b.n	8002f2e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f003 0301 	and.w	r3, r3, #1
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d1e4      	bne.n	8002eda <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f14:	223f      	movs	r2, #63	@ 0x3f
 8002f16:	409a      	lsls	r2, r3
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2201      	movs	r2, #1
 8002f20:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2200      	movs	r2, #0
 8002f28:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002f2c:	2300      	movs	r3, #0
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3710      	adds	r7, #16
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}

08002f36 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002f36:	b480      	push	{r7}
 8002f38:	b083      	sub	sp, #12
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	2b02      	cmp	r3, #2
 8002f48:	d004      	beq.n	8002f54 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2280      	movs	r2, #128	@ 0x80
 8002f4e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	e00c      	b.n	8002f6e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2205      	movs	r2, #5
 8002f58:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f022 0201 	bic.w	r2, r2, #1
 8002f6a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002f6c:	2300      	movs	r3, #0
}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	370c      	adds	r7, #12
 8002f72:	46bd      	mov	sp, r7
 8002f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f78:	4770      	bx	lr
	...

08002f7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b089      	sub	sp, #36	@ 0x24
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
 8002f84:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002f86:	2300      	movs	r3, #0
 8002f88:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f92:	2300      	movs	r3, #0
 8002f94:	61fb      	str	r3, [r7, #28]
 8002f96:	e159      	b.n	800324c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f98:	2201      	movs	r2, #1
 8002f9a:	69fb      	ldr	r3, [r7, #28]
 8002f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	697a      	ldr	r2, [r7, #20]
 8002fa8:	4013      	ands	r3, r2
 8002faa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002fac:	693a      	ldr	r2, [r7, #16]
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	f040 8148 	bne.w	8003246 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	f003 0303 	and.w	r3, r3, #3
 8002fbe:	2b01      	cmp	r3, #1
 8002fc0:	d005      	beq.n	8002fce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002fca:	2b02      	cmp	r3, #2
 8002fcc:	d130      	bne.n	8003030 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002fd4:	69fb      	ldr	r3, [r7, #28]
 8002fd6:	005b      	lsls	r3, r3, #1
 8002fd8:	2203      	movs	r2, #3
 8002fda:	fa02 f303 	lsl.w	r3, r2, r3
 8002fde:	43db      	mvns	r3, r3
 8002fe0:	69ba      	ldr	r2, [r7, #24]
 8002fe2:	4013      	ands	r3, r2
 8002fe4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	68da      	ldr	r2, [r3, #12]
 8002fea:	69fb      	ldr	r3, [r7, #28]
 8002fec:	005b      	lsls	r3, r3, #1
 8002fee:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff2:	69ba      	ldr	r2, [r7, #24]
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	69ba      	ldr	r2, [r7, #24]
 8002ffc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003004:	2201      	movs	r2, #1
 8003006:	69fb      	ldr	r3, [r7, #28]
 8003008:	fa02 f303 	lsl.w	r3, r2, r3
 800300c:	43db      	mvns	r3, r3
 800300e:	69ba      	ldr	r2, [r7, #24]
 8003010:	4013      	ands	r3, r2
 8003012:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	091b      	lsrs	r3, r3, #4
 800301a:	f003 0201 	and.w	r2, r3, #1
 800301e:	69fb      	ldr	r3, [r7, #28]
 8003020:	fa02 f303 	lsl.w	r3, r2, r3
 8003024:	69ba      	ldr	r2, [r7, #24]
 8003026:	4313      	orrs	r3, r2
 8003028:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	69ba      	ldr	r2, [r7, #24]
 800302e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	f003 0303 	and.w	r3, r3, #3
 8003038:	2b03      	cmp	r3, #3
 800303a:	d017      	beq.n	800306c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	68db      	ldr	r3, [r3, #12]
 8003040:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003042:	69fb      	ldr	r3, [r7, #28]
 8003044:	005b      	lsls	r3, r3, #1
 8003046:	2203      	movs	r2, #3
 8003048:	fa02 f303 	lsl.w	r3, r2, r3
 800304c:	43db      	mvns	r3, r3
 800304e:	69ba      	ldr	r2, [r7, #24]
 8003050:	4013      	ands	r3, r2
 8003052:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	689a      	ldr	r2, [r3, #8]
 8003058:	69fb      	ldr	r3, [r7, #28]
 800305a:	005b      	lsls	r3, r3, #1
 800305c:	fa02 f303 	lsl.w	r3, r2, r3
 8003060:	69ba      	ldr	r2, [r7, #24]
 8003062:	4313      	orrs	r3, r2
 8003064:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	69ba      	ldr	r2, [r7, #24]
 800306a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	f003 0303 	and.w	r3, r3, #3
 8003074:	2b02      	cmp	r3, #2
 8003076:	d123      	bne.n	80030c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003078:	69fb      	ldr	r3, [r7, #28]
 800307a:	08da      	lsrs	r2, r3, #3
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	3208      	adds	r2, #8
 8003080:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003084:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003086:	69fb      	ldr	r3, [r7, #28]
 8003088:	f003 0307 	and.w	r3, r3, #7
 800308c:	009b      	lsls	r3, r3, #2
 800308e:	220f      	movs	r2, #15
 8003090:	fa02 f303 	lsl.w	r3, r2, r3
 8003094:	43db      	mvns	r3, r3
 8003096:	69ba      	ldr	r2, [r7, #24]
 8003098:	4013      	ands	r3, r2
 800309a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	691a      	ldr	r2, [r3, #16]
 80030a0:	69fb      	ldr	r3, [r7, #28]
 80030a2:	f003 0307 	and.w	r3, r3, #7
 80030a6:	009b      	lsls	r3, r3, #2
 80030a8:	fa02 f303 	lsl.w	r3, r2, r3
 80030ac:	69ba      	ldr	r2, [r7, #24]
 80030ae:	4313      	orrs	r3, r2
 80030b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80030b2:	69fb      	ldr	r3, [r7, #28]
 80030b4:	08da      	lsrs	r2, r3, #3
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	3208      	adds	r2, #8
 80030ba:	69b9      	ldr	r1, [r7, #24]
 80030bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80030c6:	69fb      	ldr	r3, [r7, #28]
 80030c8:	005b      	lsls	r3, r3, #1
 80030ca:	2203      	movs	r2, #3
 80030cc:	fa02 f303 	lsl.w	r3, r2, r3
 80030d0:	43db      	mvns	r3, r3
 80030d2:	69ba      	ldr	r2, [r7, #24]
 80030d4:	4013      	ands	r3, r2
 80030d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	f003 0203 	and.w	r2, r3, #3
 80030e0:	69fb      	ldr	r3, [r7, #28]
 80030e2:	005b      	lsls	r3, r3, #1
 80030e4:	fa02 f303 	lsl.w	r3, r2, r3
 80030e8:	69ba      	ldr	r2, [r7, #24]
 80030ea:	4313      	orrs	r3, r2
 80030ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	69ba      	ldr	r2, [r7, #24]
 80030f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	f000 80a2 	beq.w	8003246 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003102:	2300      	movs	r3, #0
 8003104:	60fb      	str	r3, [r7, #12]
 8003106:	4b57      	ldr	r3, [pc, #348]	@ (8003264 <HAL_GPIO_Init+0x2e8>)
 8003108:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800310a:	4a56      	ldr	r2, [pc, #344]	@ (8003264 <HAL_GPIO_Init+0x2e8>)
 800310c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003110:	6453      	str	r3, [r2, #68]	@ 0x44
 8003112:	4b54      	ldr	r3, [pc, #336]	@ (8003264 <HAL_GPIO_Init+0x2e8>)
 8003114:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003116:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800311a:	60fb      	str	r3, [r7, #12]
 800311c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800311e:	4a52      	ldr	r2, [pc, #328]	@ (8003268 <HAL_GPIO_Init+0x2ec>)
 8003120:	69fb      	ldr	r3, [r7, #28]
 8003122:	089b      	lsrs	r3, r3, #2
 8003124:	3302      	adds	r3, #2
 8003126:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800312a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800312c:	69fb      	ldr	r3, [r7, #28]
 800312e:	f003 0303 	and.w	r3, r3, #3
 8003132:	009b      	lsls	r3, r3, #2
 8003134:	220f      	movs	r2, #15
 8003136:	fa02 f303 	lsl.w	r3, r2, r3
 800313a:	43db      	mvns	r3, r3
 800313c:	69ba      	ldr	r2, [r7, #24]
 800313e:	4013      	ands	r3, r2
 8003140:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	4a49      	ldr	r2, [pc, #292]	@ (800326c <HAL_GPIO_Init+0x2f0>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d019      	beq.n	800317e <HAL_GPIO_Init+0x202>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	4a48      	ldr	r2, [pc, #288]	@ (8003270 <HAL_GPIO_Init+0x2f4>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d013      	beq.n	800317a <HAL_GPIO_Init+0x1fe>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	4a47      	ldr	r2, [pc, #284]	@ (8003274 <HAL_GPIO_Init+0x2f8>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d00d      	beq.n	8003176 <HAL_GPIO_Init+0x1fa>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	4a46      	ldr	r2, [pc, #280]	@ (8003278 <HAL_GPIO_Init+0x2fc>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d007      	beq.n	8003172 <HAL_GPIO_Init+0x1f6>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	4a45      	ldr	r2, [pc, #276]	@ (800327c <HAL_GPIO_Init+0x300>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d101      	bne.n	800316e <HAL_GPIO_Init+0x1f2>
 800316a:	2304      	movs	r3, #4
 800316c:	e008      	b.n	8003180 <HAL_GPIO_Init+0x204>
 800316e:	2307      	movs	r3, #7
 8003170:	e006      	b.n	8003180 <HAL_GPIO_Init+0x204>
 8003172:	2303      	movs	r3, #3
 8003174:	e004      	b.n	8003180 <HAL_GPIO_Init+0x204>
 8003176:	2302      	movs	r3, #2
 8003178:	e002      	b.n	8003180 <HAL_GPIO_Init+0x204>
 800317a:	2301      	movs	r3, #1
 800317c:	e000      	b.n	8003180 <HAL_GPIO_Init+0x204>
 800317e:	2300      	movs	r3, #0
 8003180:	69fa      	ldr	r2, [r7, #28]
 8003182:	f002 0203 	and.w	r2, r2, #3
 8003186:	0092      	lsls	r2, r2, #2
 8003188:	4093      	lsls	r3, r2
 800318a:	69ba      	ldr	r2, [r7, #24]
 800318c:	4313      	orrs	r3, r2
 800318e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003190:	4935      	ldr	r1, [pc, #212]	@ (8003268 <HAL_GPIO_Init+0x2ec>)
 8003192:	69fb      	ldr	r3, [r7, #28]
 8003194:	089b      	lsrs	r3, r3, #2
 8003196:	3302      	adds	r3, #2
 8003198:	69ba      	ldr	r2, [r7, #24]
 800319a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800319e:	4b38      	ldr	r3, [pc, #224]	@ (8003280 <HAL_GPIO_Init+0x304>)
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	43db      	mvns	r3, r3
 80031a8:	69ba      	ldr	r2, [r7, #24]
 80031aa:	4013      	ands	r3, r2
 80031ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d003      	beq.n	80031c2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80031ba:	69ba      	ldr	r2, [r7, #24]
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	4313      	orrs	r3, r2
 80031c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80031c2:	4a2f      	ldr	r2, [pc, #188]	@ (8003280 <HAL_GPIO_Init+0x304>)
 80031c4:	69bb      	ldr	r3, [r7, #24]
 80031c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80031c8:	4b2d      	ldr	r3, [pc, #180]	@ (8003280 <HAL_GPIO_Init+0x304>)
 80031ca:	68db      	ldr	r3, [r3, #12]
 80031cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	43db      	mvns	r3, r3
 80031d2:	69ba      	ldr	r2, [r7, #24]
 80031d4:	4013      	ands	r3, r2
 80031d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d003      	beq.n	80031ec <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80031e4:	69ba      	ldr	r2, [r7, #24]
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	4313      	orrs	r3, r2
 80031ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80031ec:	4a24      	ldr	r2, [pc, #144]	@ (8003280 <HAL_GPIO_Init+0x304>)
 80031ee:	69bb      	ldr	r3, [r7, #24]
 80031f0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80031f2:	4b23      	ldr	r3, [pc, #140]	@ (8003280 <HAL_GPIO_Init+0x304>)
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	43db      	mvns	r3, r3
 80031fc:	69ba      	ldr	r2, [r7, #24]
 80031fe:	4013      	ands	r3, r2
 8003200:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800320a:	2b00      	cmp	r3, #0
 800320c:	d003      	beq.n	8003216 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800320e:	69ba      	ldr	r2, [r7, #24]
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	4313      	orrs	r3, r2
 8003214:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003216:	4a1a      	ldr	r2, [pc, #104]	@ (8003280 <HAL_GPIO_Init+0x304>)
 8003218:	69bb      	ldr	r3, [r7, #24]
 800321a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800321c:	4b18      	ldr	r3, [pc, #96]	@ (8003280 <HAL_GPIO_Init+0x304>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	43db      	mvns	r3, r3
 8003226:	69ba      	ldr	r2, [r7, #24]
 8003228:	4013      	ands	r3, r2
 800322a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003234:	2b00      	cmp	r3, #0
 8003236:	d003      	beq.n	8003240 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003238:	69ba      	ldr	r2, [r7, #24]
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	4313      	orrs	r3, r2
 800323e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003240:	4a0f      	ldr	r2, [pc, #60]	@ (8003280 <HAL_GPIO_Init+0x304>)
 8003242:	69bb      	ldr	r3, [r7, #24]
 8003244:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003246:	69fb      	ldr	r3, [r7, #28]
 8003248:	3301      	adds	r3, #1
 800324a:	61fb      	str	r3, [r7, #28]
 800324c:	69fb      	ldr	r3, [r7, #28]
 800324e:	2b0f      	cmp	r3, #15
 8003250:	f67f aea2 	bls.w	8002f98 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003254:	bf00      	nop
 8003256:	bf00      	nop
 8003258:	3724      	adds	r7, #36	@ 0x24
 800325a:	46bd      	mov	sp, r7
 800325c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003260:	4770      	bx	lr
 8003262:	bf00      	nop
 8003264:	40023800 	.word	0x40023800
 8003268:	40013800 	.word	0x40013800
 800326c:	40020000 	.word	0x40020000
 8003270:	40020400 	.word	0x40020400
 8003274:	40020800 	.word	0x40020800
 8003278:	40020c00 	.word	0x40020c00
 800327c:	40021000 	.word	0x40021000
 8003280:	40013c00 	.word	0x40013c00

08003284 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b084      	sub	sp, #16
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d101      	bne.n	8003296 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	e12b      	b.n	80034ee <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800329c:	b2db      	uxtb	r3, r3
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d106      	bne.n	80032b0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2200      	movs	r2, #0
 80032a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80032aa:	6878      	ldr	r0, [r7, #4]
 80032ac:	f7ff fac0 	bl	8002830 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2224      	movs	r2, #36	@ 0x24
 80032b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f022 0201 	bic.w	r2, r2, #1
 80032c6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80032d6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80032e6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80032e8:	f001 fc20 	bl	8004b2c <HAL_RCC_GetPCLK1Freq>
 80032ec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	4a81      	ldr	r2, [pc, #516]	@ (80034f8 <HAL_I2C_Init+0x274>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d807      	bhi.n	8003308 <HAL_I2C_Init+0x84>
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	4a80      	ldr	r2, [pc, #512]	@ (80034fc <HAL_I2C_Init+0x278>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	bf94      	ite	ls
 8003300:	2301      	movls	r3, #1
 8003302:	2300      	movhi	r3, #0
 8003304:	b2db      	uxtb	r3, r3
 8003306:	e006      	b.n	8003316 <HAL_I2C_Init+0x92>
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	4a7d      	ldr	r2, [pc, #500]	@ (8003500 <HAL_I2C_Init+0x27c>)
 800330c:	4293      	cmp	r3, r2
 800330e:	bf94      	ite	ls
 8003310:	2301      	movls	r3, #1
 8003312:	2300      	movhi	r3, #0
 8003314:	b2db      	uxtb	r3, r3
 8003316:	2b00      	cmp	r3, #0
 8003318:	d001      	beq.n	800331e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e0e7      	b.n	80034ee <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	4a78      	ldr	r2, [pc, #480]	@ (8003504 <HAL_I2C_Init+0x280>)
 8003322:	fba2 2303 	umull	r2, r3, r2, r3
 8003326:	0c9b      	lsrs	r3, r3, #18
 8003328:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	68ba      	ldr	r2, [r7, #8]
 800333a:	430a      	orrs	r2, r1
 800333c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	6a1b      	ldr	r3, [r3, #32]
 8003344:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	4a6a      	ldr	r2, [pc, #424]	@ (80034f8 <HAL_I2C_Init+0x274>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d802      	bhi.n	8003358 <HAL_I2C_Init+0xd4>
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	3301      	adds	r3, #1
 8003356:	e009      	b.n	800336c <HAL_I2C_Init+0xe8>
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800335e:	fb02 f303 	mul.w	r3, r2, r3
 8003362:	4a69      	ldr	r2, [pc, #420]	@ (8003508 <HAL_I2C_Init+0x284>)
 8003364:	fba2 2303 	umull	r2, r3, r2, r3
 8003368:	099b      	lsrs	r3, r3, #6
 800336a:	3301      	adds	r3, #1
 800336c:	687a      	ldr	r2, [r7, #4]
 800336e:	6812      	ldr	r2, [r2, #0]
 8003370:	430b      	orrs	r3, r1
 8003372:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	69db      	ldr	r3, [r3, #28]
 800337a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800337e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	495c      	ldr	r1, [pc, #368]	@ (80034f8 <HAL_I2C_Init+0x274>)
 8003388:	428b      	cmp	r3, r1
 800338a:	d819      	bhi.n	80033c0 <HAL_I2C_Init+0x13c>
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	1e59      	subs	r1, r3, #1
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	005b      	lsls	r3, r3, #1
 8003396:	fbb1 f3f3 	udiv	r3, r1, r3
 800339a:	1c59      	adds	r1, r3, #1
 800339c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80033a0:	400b      	ands	r3, r1
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d00a      	beq.n	80033bc <HAL_I2C_Init+0x138>
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	1e59      	subs	r1, r3, #1
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	005b      	lsls	r3, r3, #1
 80033b0:	fbb1 f3f3 	udiv	r3, r1, r3
 80033b4:	3301      	adds	r3, #1
 80033b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033ba:	e051      	b.n	8003460 <HAL_I2C_Init+0x1dc>
 80033bc:	2304      	movs	r3, #4
 80033be:	e04f      	b.n	8003460 <HAL_I2C_Init+0x1dc>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d111      	bne.n	80033ec <HAL_I2C_Init+0x168>
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	1e58      	subs	r0, r3, #1
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6859      	ldr	r1, [r3, #4]
 80033d0:	460b      	mov	r3, r1
 80033d2:	005b      	lsls	r3, r3, #1
 80033d4:	440b      	add	r3, r1
 80033d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80033da:	3301      	adds	r3, #1
 80033dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	bf0c      	ite	eq
 80033e4:	2301      	moveq	r3, #1
 80033e6:	2300      	movne	r3, #0
 80033e8:	b2db      	uxtb	r3, r3
 80033ea:	e012      	b.n	8003412 <HAL_I2C_Init+0x18e>
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	1e58      	subs	r0, r3, #1
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6859      	ldr	r1, [r3, #4]
 80033f4:	460b      	mov	r3, r1
 80033f6:	009b      	lsls	r3, r3, #2
 80033f8:	440b      	add	r3, r1
 80033fa:	0099      	lsls	r1, r3, #2
 80033fc:	440b      	add	r3, r1
 80033fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003402:	3301      	adds	r3, #1
 8003404:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003408:	2b00      	cmp	r3, #0
 800340a:	bf0c      	ite	eq
 800340c:	2301      	moveq	r3, #1
 800340e:	2300      	movne	r3, #0
 8003410:	b2db      	uxtb	r3, r3
 8003412:	2b00      	cmp	r3, #0
 8003414:	d001      	beq.n	800341a <HAL_I2C_Init+0x196>
 8003416:	2301      	movs	r3, #1
 8003418:	e022      	b.n	8003460 <HAL_I2C_Init+0x1dc>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d10e      	bne.n	8003440 <HAL_I2C_Init+0x1bc>
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	1e58      	subs	r0, r3, #1
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6859      	ldr	r1, [r3, #4]
 800342a:	460b      	mov	r3, r1
 800342c:	005b      	lsls	r3, r3, #1
 800342e:	440b      	add	r3, r1
 8003430:	fbb0 f3f3 	udiv	r3, r0, r3
 8003434:	3301      	adds	r3, #1
 8003436:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800343a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800343e:	e00f      	b.n	8003460 <HAL_I2C_Init+0x1dc>
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	1e58      	subs	r0, r3, #1
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6859      	ldr	r1, [r3, #4]
 8003448:	460b      	mov	r3, r1
 800344a:	009b      	lsls	r3, r3, #2
 800344c:	440b      	add	r3, r1
 800344e:	0099      	lsls	r1, r3, #2
 8003450:	440b      	add	r3, r1
 8003452:	fbb0 f3f3 	udiv	r3, r0, r3
 8003456:	3301      	adds	r3, #1
 8003458:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800345c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003460:	6879      	ldr	r1, [r7, #4]
 8003462:	6809      	ldr	r1, [r1, #0]
 8003464:	4313      	orrs	r3, r2
 8003466:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	69da      	ldr	r2, [r3, #28]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6a1b      	ldr	r3, [r3, #32]
 800347a:	431a      	orrs	r2, r3
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	430a      	orrs	r2, r1
 8003482:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800348e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003492:	687a      	ldr	r2, [r7, #4]
 8003494:	6911      	ldr	r1, [r2, #16]
 8003496:	687a      	ldr	r2, [r7, #4]
 8003498:	68d2      	ldr	r2, [r2, #12]
 800349a:	4311      	orrs	r1, r2
 800349c:	687a      	ldr	r2, [r7, #4]
 800349e:	6812      	ldr	r2, [r2, #0]
 80034a0:	430b      	orrs	r3, r1
 80034a2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	68db      	ldr	r3, [r3, #12]
 80034aa:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	695a      	ldr	r2, [r3, #20]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	699b      	ldr	r3, [r3, #24]
 80034b6:	431a      	orrs	r2, r3
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	430a      	orrs	r2, r1
 80034be:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	681a      	ldr	r2, [r3, #0]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f042 0201 	orr.w	r2, r2, #1
 80034ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2200      	movs	r2, #0
 80034d4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2220      	movs	r2, #32
 80034da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2200      	movs	r2, #0
 80034e2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2200      	movs	r2, #0
 80034e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80034ec:	2300      	movs	r3, #0
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	3710      	adds	r7, #16
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}
 80034f6:	bf00      	nop
 80034f8:	000186a0 	.word	0x000186a0
 80034fc:	001e847f 	.word	0x001e847f
 8003500:	003d08ff 	.word	0x003d08ff
 8003504:	431bde83 	.word	0x431bde83
 8003508:	10624dd3 	.word	0x10624dd3

0800350c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b088      	sub	sp, #32
 8003510:	af02      	add	r7, sp, #8
 8003512:	60f8      	str	r0, [r7, #12]
 8003514:	4608      	mov	r0, r1
 8003516:	4611      	mov	r1, r2
 8003518:	461a      	mov	r2, r3
 800351a:	4603      	mov	r3, r0
 800351c:	817b      	strh	r3, [r7, #10]
 800351e:	460b      	mov	r3, r1
 8003520:	813b      	strh	r3, [r7, #8]
 8003522:	4613      	mov	r3, r2
 8003524:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003526:	f7ff fb55 	bl	8002bd4 <HAL_GetTick>
 800352a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003532:	b2db      	uxtb	r3, r3
 8003534:	2b20      	cmp	r3, #32
 8003536:	f040 80d9 	bne.w	80036ec <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	9300      	str	r3, [sp, #0]
 800353e:	2319      	movs	r3, #25
 8003540:	2201      	movs	r2, #1
 8003542:	496d      	ldr	r1, [pc, #436]	@ (80036f8 <HAL_I2C_Mem_Write+0x1ec>)
 8003544:	68f8      	ldr	r0, [r7, #12]
 8003546:	f000 fc8b 	bl	8003e60 <I2C_WaitOnFlagUntilTimeout>
 800354a:	4603      	mov	r3, r0
 800354c:	2b00      	cmp	r3, #0
 800354e:	d001      	beq.n	8003554 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003550:	2302      	movs	r3, #2
 8003552:	e0cc      	b.n	80036ee <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800355a:	2b01      	cmp	r3, #1
 800355c:	d101      	bne.n	8003562 <HAL_I2C_Mem_Write+0x56>
 800355e:	2302      	movs	r3, #2
 8003560:	e0c5      	b.n	80036ee <HAL_I2C_Mem_Write+0x1e2>
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2201      	movs	r2, #1
 8003566:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f003 0301 	and.w	r3, r3, #1
 8003574:	2b01      	cmp	r3, #1
 8003576:	d007      	beq.n	8003588 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f042 0201 	orr.w	r2, r2, #1
 8003586:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003596:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	2221      	movs	r2, #33	@ 0x21
 800359c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2240      	movs	r2, #64	@ 0x40
 80035a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2200      	movs	r2, #0
 80035ac:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	6a3a      	ldr	r2, [r7, #32]
 80035b2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80035b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035be:	b29a      	uxth	r2, r3
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	4a4d      	ldr	r2, [pc, #308]	@ (80036fc <HAL_I2C_Mem_Write+0x1f0>)
 80035c8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80035ca:	88f8      	ldrh	r0, [r7, #6]
 80035cc:	893a      	ldrh	r2, [r7, #8]
 80035ce:	8979      	ldrh	r1, [r7, #10]
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	9301      	str	r3, [sp, #4]
 80035d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035d6:	9300      	str	r3, [sp, #0]
 80035d8:	4603      	mov	r3, r0
 80035da:	68f8      	ldr	r0, [r7, #12]
 80035dc:	f000 fac2 	bl	8003b64 <I2C_RequestMemoryWrite>
 80035e0:	4603      	mov	r3, r0
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d052      	beq.n	800368c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	e081      	b.n	80036ee <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035ea:	697a      	ldr	r2, [r7, #20]
 80035ec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80035ee:	68f8      	ldr	r0, [r7, #12]
 80035f0:	f000 fd50 	bl	8004094 <I2C_WaitOnTXEFlagUntilTimeout>
 80035f4:	4603      	mov	r3, r0
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d00d      	beq.n	8003616 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035fe:	2b04      	cmp	r3, #4
 8003600:	d107      	bne.n	8003612 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	681a      	ldr	r2, [r3, #0]
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003610:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	e06b      	b.n	80036ee <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800361a:	781a      	ldrb	r2, [r3, #0]
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003626:	1c5a      	adds	r2, r3, #1
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003630:	3b01      	subs	r3, #1
 8003632:	b29a      	uxth	r2, r3
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800363c:	b29b      	uxth	r3, r3
 800363e:	3b01      	subs	r3, #1
 8003640:	b29a      	uxth	r2, r3
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	695b      	ldr	r3, [r3, #20]
 800364c:	f003 0304 	and.w	r3, r3, #4
 8003650:	2b04      	cmp	r3, #4
 8003652:	d11b      	bne.n	800368c <HAL_I2C_Mem_Write+0x180>
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003658:	2b00      	cmp	r3, #0
 800365a:	d017      	beq.n	800368c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003660:	781a      	ldrb	r2, [r3, #0]
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800366c:	1c5a      	adds	r2, r3, #1
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003676:	3b01      	subs	r3, #1
 8003678:	b29a      	uxth	r2, r3
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003682:	b29b      	uxth	r3, r3
 8003684:	3b01      	subs	r3, #1
 8003686:	b29a      	uxth	r2, r3
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003690:	2b00      	cmp	r3, #0
 8003692:	d1aa      	bne.n	80035ea <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003694:	697a      	ldr	r2, [r7, #20]
 8003696:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003698:	68f8      	ldr	r0, [r7, #12]
 800369a:	f000 fd43 	bl	8004124 <I2C_WaitOnBTFFlagUntilTimeout>
 800369e:	4603      	mov	r3, r0
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d00d      	beq.n	80036c0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036a8:	2b04      	cmp	r3, #4
 80036aa:	d107      	bne.n	80036bc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	681a      	ldr	r2, [r3, #0]
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80036ba:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	e016      	b.n	80036ee <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80036ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	2220      	movs	r2, #32
 80036d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2200      	movs	r2, #0
 80036dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2200      	movs	r2, #0
 80036e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80036e8:	2300      	movs	r3, #0
 80036ea:	e000      	b.n	80036ee <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80036ec:	2302      	movs	r3, #2
  }
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	3718      	adds	r7, #24
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}
 80036f6:	bf00      	nop
 80036f8:	00100002 	.word	0x00100002
 80036fc:	ffff0000 	.word	0xffff0000

08003700 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b08c      	sub	sp, #48	@ 0x30
 8003704:	af02      	add	r7, sp, #8
 8003706:	60f8      	str	r0, [r7, #12]
 8003708:	4608      	mov	r0, r1
 800370a:	4611      	mov	r1, r2
 800370c:	461a      	mov	r2, r3
 800370e:	4603      	mov	r3, r0
 8003710:	817b      	strh	r3, [r7, #10]
 8003712:	460b      	mov	r3, r1
 8003714:	813b      	strh	r3, [r7, #8]
 8003716:	4613      	mov	r3, r2
 8003718:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800371a:	f7ff fa5b 	bl	8002bd4 <HAL_GetTick>
 800371e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003726:	b2db      	uxtb	r3, r3
 8003728:	2b20      	cmp	r3, #32
 800372a:	f040 8214 	bne.w	8003b56 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800372e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003730:	9300      	str	r3, [sp, #0]
 8003732:	2319      	movs	r3, #25
 8003734:	2201      	movs	r2, #1
 8003736:	497b      	ldr	r1, [pc, #492]	@ (8003924 <HAL_I2C_Mem_Read+0x224>)
 8003738:	68f8      	ldr	r0, [r7, #12]
 800373a:	f000 fb91 	bl	8003e60 <I2C_WaitOnFlagUntilTimeout>
 800373e:	4603      	mov	r3, r0
 8003740:	2b00      	cmp	r3, #0
 8003742:	d001      	beq.n	8003748 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003744:	2302      	movs	r3, #2
 8003746:	e207      	b.n	8003b58 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800374e:	2b01      	cmp	r3, #1
 8003750:	d101      	bne.n	8003756 <HAL_I2C_Mem_Read+0x56>
 8003752:	2302      	movs	r3, #2
 8003754:	e200      	b.n	8003b58 <HAL_I2C_Mem_Read+0x458>
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	2201      	movs	r2, #1
 800375a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f003 0301 	and.w	r3, r3, #1
 8003768:	2b01      	cmp	r3, #1
 800376a:	d007      	beq.n	800377c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	681a      	ldr	r2, [r3, #0]
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f042 0201 	orr.w	r2, r2, #1
 800377a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800378a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	2222      	movs	r2, #34	@ 0x22
 8003790:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	2240      	movs	r2, #64	@ 0x40
 8003798:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	2200      	movs	r2, #0
 80037a0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80037a6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80037ac:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037b2:	b29a      	uxth	r2, r3
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	4a5b      	ldr	r2, [pc, #364]	@ (8003928 <HAL_I2C_Mem_Read+0x228>)
 80037bc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80037be:	88f8      	ldrh	r0, [r7, #6]
 80037c0:	893a      	ldrh	r2, [r7, #8]
 80037c2:	8979      	ldrh	r1, [r7, #10]
 80037c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037c6:	9301      	str	r3, [sp, #4]
 80037c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037ca:	9300      	str	r3, [sp, #0]
 80037cc:	4603      	mov	r3, r0
 80037ce:	68f8      	ldr	r0, [r7, #12]
 80037d0:	f000 fa5e 	bl	8003c90 <I2C_RequestMemoryRead>
 80037d4:	4603      	mov	r3, r0
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d001      	beq.n	80037de <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	e1bc      	b.n	8003b58 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d113      	bne.n	800380e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037e6:	2300      	movs	r3, #0
 80037e8:	623b      	str	r3, [r7, #32]
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	695b      	ldr	r3, [r3, #20]
 80037f0:	623b      	str	r3, [r7, #32]
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	699b      	ldr	r3, [r3, #24]
 80037f8:	623b      	str	r3, [r7, #32]
 80037fa:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800380a:	601a      	str	r2, [r3, #0]
 800380c:	e190      	b.n	8003b30 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003812:	2b01      	cmp	r3, #1
 8003814:	d11b      	bne.n	800384e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003824:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003826:	2300      	movs	r3, #0
 8003828:	61fb      	str	r3, [r7, #28]
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	695b      	ldr	r3, [r3, #20]
 8003830:	61fb      	str	r3, [r7, #28]
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	699b      	ldr	r3, [r3, #24]
 8003838:	61fb      	str	r3, [r7, #28]
 800383a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800384a:	601a      	str	r2, [r3, #0]
 800384c:	e170      	b.n	8003b30 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003852:	2b02      	cmp	r3, #2
 8003854:	d11b      	bne.n	800388e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	681a      	ldr	r2, [r3, #0]
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003864:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003874:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003876:	2300      	movs	r3, #0
 8003878:	61bb      	str	r3, [r7, #24]
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	695b      	ldr	r3, [r3, #20]
 8003880:	61bb      	str	r3, [r7, #24]
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	699b      	ldr	r3, [r3, #24]
 8003888:	61bb      	str	r3, [r7, #24]
 800388a:	69bb      	ldr	r3, [r7, #24]
 800388c:	e150      	b.n	8003b30 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800388e:	2300      	movs	r3, #0
 8003890:	617b      	str	r3, [r7, #20]
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	695b      	ldr	r3, [r3, #20]
 8003898:	617b      	str	r3, [r7, #20]
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	699b      	ldr	r3, [r3, #24]
 80038a0:	617b      	str	r3, [r7, #20]
 80038a2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80038a4:	e144      	b.n	8003b30 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038aa:	2b03      	cmp	r3, #3
 80038ac:	f200 80f1 	bhi.w	8003a92 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	d123      	bne.n	8003900 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038ba:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80038bc:	68f8      	ldr	r0, [r7, #12]
 80038be:	f000 fc79 	bl	80041b4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80038c2:	4603      	mov	r3, r0
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d001      	beq.n	80038cc <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
 80038ca:	e145      	b.n	8003b58 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	691a      	ldr	r2, [r3, #16]
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038d6:	b2d2      	uxtb	r2, r2
 80038d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038de:	1c5a      	adds	r2, r3, #1
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038e8:	3b01      	subs	r3, #1
 80038ea:	b29a      	uxth	r2, r3
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038f4:	b29b      	uxth	r3, r3
 80038f6:	3b01      	subs	r3, #1
 80038f8:	b29a      	uxth	r2, r3
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80038fe:	e117      	b.n	8003b30 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003904:	2b02      	cmp	r3, #2
 8003906:	d14e      	bne.n	80039a6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003908:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800390a:	9300      	str	r3, [sp, #0]
 800390c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800390e:	2200      	movs	r2, #0
 8003910:	4906      	ldr	r1, [pc, #24]	@ (800392c <HAL_I2C_Mem_Read+0x22c>)
 8003912:	68f8      	ldr	r0, [r7, #12]
 8003914:	f000 faa4 	bl	8003e60 <I2C_WaitOnFlagUntilTimeout>
 8003918:	4603      	mov	r3, r0
 800391a:	2b00      	cmp	r3, #0
 800391c:	d008      	beq.n	8003930 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	e11a      	b.n	8003b58 <HAL_I2C_Mem_Read+0x458>
 8003922:	bf00      	nop
 8003924:	00100002 	.word	0x00100002
 8003928:	ffff0000 	.word	0xffff0000
 800392c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	681a      	ldr	r2, [r3, #0]
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800393e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	691a      	ldr	r2, [r3, #16]
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800394a:	b2d2      	uxtb	r2, r2
 800394c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003952:	1c5a      	adds	r2, r3, #1
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800395c:	3b01      	subs	r3, #1
 800395e:	b29a      	uxth	r2, r3
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003968:	b29b      	uxth	r3, r3
 800396a:	3b01      	subs	r3, #1
 800396c:	b29a      	uxth	r2, r3
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	691a      	ldr	r2, [r3, #16]
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800397c:	b2d2      	uxtb	r2, r2
 800397e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003984:	1c5a      	adds	r2, r3, #1
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800398e:	3b01      	subs	r3, #1
 8003990:	b29a      	uxth	r2, r3
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800399a:	b29b      	uxth	r3, r3
 800399c:	3b01      	subs	r3, #1
 800399e:	b29a      	uxth	r2, r3
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80039a4:	e0c4      	b.n	8003b30 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80039a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039a8:	9300      	str	r3, [sp, #0]
 80039aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039ac:	2200      	movs	r2, #0
 80039ae:	496c      	ldr	r1, [pc, #432]	@ (8003b60 <HAL_I2C_Mem_Read+0x460>)
 80039b0:	68f8      	ldr	r0, [r7, #12]
 80039b2:	f000 fa55 	bl	8003e60 <I2C_WaitOnFlagUntilTimeout>
 80039b6:	4603      	mov	r3, r0
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d001      	beq.n	80039c0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80039bc:	2301      	movs	r3, #1
 80039be:	e0cb      	b.n	8003b58 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80039ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	691a      	ldr	r2, [r3, #16]
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039da:	b2d2      	uxtb	r2, r2
 80039dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039e2:	1c5a      	adds	r2, r3, #1
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039ec:	3b01      	subs	r3, #1
 80039ee:	b29a      	uxth	r2, r3
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039f8:	b29b      	uxth	r3, r3
 80039fa:	3b01      	subs	r3, #1
 80039fc:	b29a      	uxth	r2, r3
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a04:	9300      	str	r3, [sp, #0]
 8003a06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a08:	2200      	movs	r2, #0
 8003a0a:	4955      	ldr	r1, [pc, #340]	@ (8003b60 <HAL_I2C_Mem_Read+0x460>)
 8003a0c:	68f8      	ldr	r0, [r7, #12]
 8003a0e:	f000 fa27 	bl	8003e60 <I2C_WaitOnFlagUntilTimeout>
 8003a12:	4603      	mov	r3, r0
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d001      	beq.n	8003a1c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e09d      	b.n	8003b58 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	681a      	ldr	r2, [r3, #0]
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a2a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	691a      	ldr	r2, [r3, #16]
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a36:	b2d2      	uxtb	r2, r2
 8003a38:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a3e:	1c5a      	adds	r2, r3, #1
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a48:	3b01      	subs	r3, #1
 8003a4a:	b29a      	uxth	r2, r3
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a54:	b29b      	uxth	r3, r3
 8003a56:	3b01      	subs	r3, #1
 8003a58:	b29a      	uxth	r2, r3
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	691a      	ldr	r2, [r3, #16]
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a68:	b2d2      	uxtb	r2, r2
 8003a6a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a70:	1c5a      	adds	r2, r3, #1
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a7a:	3b01      	subs	r3, #1
 8003a7c:	b29a      	uxth	r2, r3
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a86:	b29b      	uxth	r3, r3
 8003a88:	3b01      	subs	r3, #1
 8003a8a:	b29a      	uxth	r2, r3
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003a90:	e04e      	b.n	8003b30 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a94:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003a96:	68f8      	ldr	r0, [r7, #12]
 8003a98:	f000 fb8c 	bl	80041b4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d001      	beq.n	8003aa6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e058      	b.n	8003b58 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	691a      	ldr	r2, [r3, #16]
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ab0:	b2d2      	uxtb	r2, r2
 8003ab2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ab8:	1c5a      	adds	r2, r3, #1
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ac2:	3b01      	subs	r3, #1
 8003ac4:	b29a      	uxth	r2, r3
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ace:	b29b      	uxth	r3, r3
 8003ad0:	3b01      	subs	r3, #1
 8003ad2:	b29a      	uxth	r2, r3
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	695b      	ldr	r3, [r3, #20]
 8003ade:	f003 0304 	and.w	r3, r3, #4
 8003ae2:	2b04      	cmp	r3, #4
 8003ae4:	d124      	bne.n	8003b30 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003aea:	2b03      	cmp	r3, #3
 8003aec:	d107      	bne.n	8003afe <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	681a      	ldr	r2, [r3, #0]
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003afc:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	691a      	ldr	r2, [r3, #16]
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b08:	b2d2      	uxtb	r2, r2
 8003b0a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b10:	1c5a      	adds	r2, r3, #1
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b1a:	3b01      	subs	r3, #1
 8003b1c:	b29a      	uxth	r2, r3
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b26:	b29b      	uxth	r3, r3
 8003b28:	3b01      	subs	r3, #1
 8003b2a:	b29a      	uxth	r2, r3
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	f47f aeb6 	bne.w	80038a6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	2220      	movs	r2, #32
 8003b3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	2200      	movs	r2, #0
 8003b46:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003b52:	2300      	movs	r3, #0
 8003b54:	e000      	b.n	8003b58 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003b56:	2302      	movs	r3, #2
  }
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	3728      	adds	r7, #40	@ 0x28
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bd80      	pop	{r7, pc}
 8003b60:	00010004 	.word	0x00010004

08003b64 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b088      	sub	sp, #32
 8003b68:	af02      	add	r7, sp, #8
 8003b6a:	60f8      	str	r0, [r7, #12]
 8003b6c:	4608      	mov	r0, r1
 8003b6e:	4611      	mov	r1, r2
 8003b70:	461a      	mov	r2, r3
 8003b72:	4603      	mov	r3, r0
 8003b74:	817b      	strh	r3, [r7, #10]
 8003b76:	460b      	mov	r3, r1
 8003b78:	813b      	strh	r3, [r7, #8]
 8003b7a:	4613      	mov	r3, r2
 8003b7c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	681a      	ldr	r2, [r3, #0]
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003b8c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b90:	9300      	str	r3, [sp, #0]
 8003b92:	6a3b      	ldr	r3, [r7, #32]
 8003b94:	2200      	movs	r2, #0
 8003b96:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003b9a:	68f8      	ldr	r0, [r7, #12]
 8003b9c:	f000 f960 	bl	8003e60 <I2C_WaitOnFlagUntilTimeout>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d00d      	beq.n	8003bc2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bb0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003bb4:	d103      	bne.n	8003bbe <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003bbc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003bbe:	2303      	movs	r3, #3
 8003bc0:	e05f      	b.n	8003c82 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003bc2:	897b      	ldrh	r3, [r7, #10]
 8003bc4:	b2db      	uxtb	r3, r3
 8003bc6:	461a      	mov	r2, r3
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003bd0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bd4:	6a3a      	ldr	r2, [r7, #32]
 8003bd6:	492d      	ldr	r1, [pc, #180]	@ (8003c8c <I2C_RequestMemoryWrite+0x128>)
 8003bd8:	68f8      	ldr	r0, [r7, #12]
 8003bda:	f000 f9bb 	bl	8003f54 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003bde:	4603      	mov	r3, r0
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d001      	beq.n	8003be8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003be4:	2301      	movs	r3, #1
 8003be6:	e04c      	b.n	8003c82 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003be8:	2300      	movs	r3, #0
 8003bea:	617b      	str	r3, [r7, #20]
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	695b      	ldr	r3, [r3, #20]
 8003bf2:	617b      	str	r3, [r7, #20]
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	699b      	ldr	r3, [r3, #24]
 8003bfa:	617b      	str	r3, [r7, #20]
 8003bfc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bfe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c00:	6a39      	ldr	r1, [r7, #32]
 8003c02:	68f8      	ldr	r0, [r7, #12]
 8003c04:	f000 fa46 	bl	8004094 <I2C_WaitOnTXEFlagUntilTimeout>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d00d      	beq.n	8003c2a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c12:	2b04      	cmp	r3, #4
 8003c14:	d107      	bne.n	8003c26 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c24:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	e02b      	b.n	8003c82 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003c2a:	88fb      	ldrh	r3, [r7, #6]
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	d105      	bne.n	8003c3c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003c30:	893b      	ldrh	r3, [r7, #8]
 8003c32:	b2da      	uxtb	r2, r3
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	611a      	str	r2, [r3, #16]
 8003c3a:	e021      	b.n	8003c80 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003c3c:	893b      	ldrh	r3, [r7, #8]
 8003c3e:	0a1b      	lsrs	r3, r3, #8
 8003c40:	b29b      	uxth	r3, r3
 8003c42:	b2da      	uxtb	r2, r3
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c4c:	6a39      	ldr	r1, [r7, #32]
 8003c4e:	68f8      	ldr	r0, [r7, #12]
 8003c50:	f000 fa20 	bl	8004094 <I2C_WaitOnTXEFlagUntilTimeout>
 8003c54:	4603      	mov	r3, r0
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d00d      	beq.n	8003c76 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c5e:	2b04      	cmp	r3, #4
 8003c60:	d107      	bne.n	8003c72 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	681a      	ldr	r2, [r3, #0]
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c70:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	e005      	b.n	8003c82 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003c76:	893b      	ldrh	r3, [r7, #8]
 8003c78:	b2da      	uxtb	r2, r3
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003c80:	2300      	movs	r3, #0
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	3718      	adds	r7, #24
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}
 8003c8a:	bf00      	nop
 8003c8c:	00010002 	.word	0x00010002

08003c90 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b088      	sub	sp, #32
 8003c94:	af02      	add	r7, sp, #8
 8003c96:	60f8      	str	r0, [r7, #12]
 8003c98:	4608      	mov	r0, r1
 8003c9a:	4611      	mov	r1, r2
 8003c9c:	461a      	mov	r2, r3
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	817b      	strh	r3, [r7, #10]
 8003ca2:	460b      	mov	r3, r1
 8003ca4:	813b      	strh	r3, [r7, #8]
 8003ca6:	4613      	mov	r3, r2
 8003ca8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003cb8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003cc8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ccc:	9300      	str	r3, [sp, #0]
 8003cce:	6a3b      	ldr	r3, [r7, #32]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003cd6:	68f8      	ldr	r0, [r7, #12]
 8003cd8:	f000 f8c2 	bl	8003e60 <I2C_WaitOnFlagUntilTimeout>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d00d      	beq.n	8003cfe <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003cf0:	d103      	bne.n	8003cfa <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003cf8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003cfa:	2303      	movs	r3, #3
 8003cfc:	e0aa      	b.n	8003e54 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003cfe:	897b      	ldrh	r3, [r7, #10]
 8003d00:	b2db      	uxtb	r3, r3
 8003d02:	461a      	mov	r2, r3
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003d0c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003d0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d10:	6a3a      	ldr	r2, [r7, #32]
 8003d12:	4952      	ldr	r1, [pc, #328]	@ (8003e5c <I2C_RequestMemoryRead+0x1cc>)
 8003d14:	68f8      	ldr	r0, [r7, #12]
 8003d16:	f000 f91d 	bl	8003f54 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d001      	beq.n	8003d24 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003d20:	2301      	movs	r3, #1
 8003d22:	e097      	b.n	8003e54 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d24:	2300      	movs	r3, #0
 8003d26:	617b      	str	r3, [r7, #20]
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	695b      	ldr	r3, [r3, #20]
 8003d2e:	617b      	str	r3, [r7, #20]
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	699b      	ldr	r3, [r3, #24]
 8003d36:	617b      	str	r3, [r7, #20]
 8003d38:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d3c:	6a39      	ldr	r1, [r7, #32]
 8003d3e:	68f8      	ldr	r0, [r7, #12]
 8003d40:	f000 f9a8 	bl	8004094 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d44:	4603      	mov	r3, r0
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d00d      	beq.n	8003d66 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d4e:	2b04      	cmp	r3, #4
 8003d50:	d107      	bne.n	8003d62 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	681a      	ldr	r2, [r3, #0]
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d60:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	e076      	b.n	8003e54 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003d66:	88fb      	ldrh	r3, [r7, #6]
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	d105      	bne.n	8003d78 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003d6c:	893b      	ldrh	r3, [r7, #8]
 8003d6e:	b2da      	uxtb	r2, r3
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	611a      	str	r2, [r3, #16]
 8003d76:	e021      	b.n	8003dbc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003d78:	893b      	ldrh	r3, [r7, #8]
 8003d7a:	0a1b      	lsrs	r3, r3, #8
 8003d7c:	b29b      	uxth	r3, r3
 8003d7e:	b2da      	uxtb	r2, r3
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d88:	6a39      	ldr	r1, [r7, #32]
 8003d8a:	68f8      	ldr	r0, [r7, #12]
 8003d8c:	f000 f982 	bl	8004094 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d90:	4603      	mov	r3, r0
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d00d      	beq.n	8003db2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d9a:	2b04      	cmp	r3, #4
 8003d9c:	d107      	bne.n	8003dae <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	681a      	ldr	r2, [r3, #0]
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003dac:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	e050      	b.n	8003e54 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003db2:	893b      	ldrh	r3, [r7, #8]
 8003db4:	b2da      	uxtb	r2, r3
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003dbc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003dbe:	6a39      	ldr	r1, [r7, #32]
 8003dc0:	68f8      	ldr	r0, [r7, #12]
 8003dc2:	f000 f967 	bl	8004094 <I2C_WaitOnTXEFlagUntilTimeout>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d00d      	beq.n	8003de8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dd0:	2b04      	cmp	r3, #4
 8003dd2:	d107      	bne.n	8003de4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	681a      	ldr	r2, [r3, #0]
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003de2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	e035      	b.n	8003e54 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003df6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003df8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dfa:	9300      	str	r3, [sp, #0]
 8003dfc:	6a3b      	ldr	r3, [r7, #32]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003e04:	68f8      	ldr	r0, [r7, #12]
 8003e06:	f000 f82b 	bl	8003e60 <I2C_WaitOnFlagUntilTimeout>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d00d      	beq.n	8003e2c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e1a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e1e:	d103      	bne.n	8003e28 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003e26:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003e28:	2303      	movs	r3, #3
 8003e2a:	e013      	b.n	8003e54 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003e2c:	897b      	ldrh	r3, [r7, #10]
 8003e2e:	b2db      	uxtb	r3, r3
 8003e30:	f043 0301 	orr.w	r3, r3, #1
 8003e34:	b2da      	uxtb	r2, r3
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e3e:	6a3a      	ldr	r2, [r7, #32]
 8003e40:	4906      	ldr	r1, [pc, #24]	@ (8003e5c <I2C_RequestMemoryRead+0x1cc>)
 8003e42:	68f8      	ldr	r0, [r7, #12]
 8003e44:	f000 f886 	bl	8003f54 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d001      	beq.n	8003e52 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e000      	b.n	8003e54 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003e52:	2300      	movs	r3, #0
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	3718      	adds	r7, #24
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd80      	pop	{r7, pc}
 8003e5c:	00010002 	.word	0x00010002

08003e60 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b084      	sub	sp, #16
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	60f8      	str	r0, [r7, #12]
 8003e68:	60b9      	str	r1, [r7, #8]
 8003e6a:	603b      	str	r3, [r7, #0]
 8003e6c:	4613      	mov	r3, r2
 8003e6e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e70:	e048      	b.n	8003f04 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e78:	d044      	beq.n	8003f04 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e7a:	f7fe feab 	bl	8002bd4 <HAL_GetTick>
 8003e7e:	4602      	mov	r2, r0
 8003e80:	69bb      	ldr	r3, [r7, #24]
 8003e82:	1ad3      	subs	r3, r2, r3
 8003e84:	683a      	ldr	r2, [r7, #0]
 8003e86:	429a      	cmp	r2, r3
 8003e88:	d302      	bcc.n	8003e90 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d139      	bne.n	8003f04 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	0c1b      	lsrs	r3, r3, #16
 8003e94:	b2db      	uxtb	r3, r3
 8003e96:	2b01      	cmp	r3, #1
 8003e98:	d10d      	bne.n	8003eb6 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	695b      	ldr	r3, [r3, #20]
 8003ea0:	43da      	mvns	r2, r3
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	4013      	ands	r3, r2
 8003ea6:	b29b      	uxth	r3, r3
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	bf0c      	ite	eq
 8003eac:	2301      	moveq	r3, #1
 8003eae:	2300      	movne	r3, #0
 8003eb0:	b2db      	uxtb	r3, r3
 8003eb2:	461a      	mov	r2, r3
 8003eb4:	e00c      	b.n	8003ed0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	699b      	ldr	r3, [r3, #24]
 8003ebc:	43da      	mvns	r2, r3
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	4013      	ands	r3, r2
 8003ec2:	b29b      	uxth	r3, r3
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	bf0c      	ite	eq
 8003ec8:	2301      	moveq	r3, #1
 8003eca:	2300      	movne	r3, #0
 8003ecc:	b2db      	uxtb	r3, r3
 8003ece:	461a      	mov	r2, r3
 8003ed0:	79fb      	ldrb	r3, [r7, #7]
 8003ed2:	429a      	cmp	r2, r3
 8003ed4:	d116      	bne.n	8003f04 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	2220      	movs	r2, #32
 8003ee0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ef0:	f043 0220 	orr.w	r2, r3, #32
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	2200      	movs	r2, #0
 8003efc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003f00:	2301      	movs	r3, #1
 8003f02:	e023      	b.n	8003f4c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	0c1b      	lsrs	r3, r3, #16
 8003f08:	b2db      	uxtb	r3, r3
 8003f0a:	2b01      	cmp	r3, #1
 8003f0c:	d10d      	bne.n	8003f2a <I2C_WaitOnFlagUntilTimeout+0xca>
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	695b      	ldr	r3, [r3, #20]
 8003f14:	43da      	mvns	r2, r3
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	4013      	ands	r3, r2
 8003f1a:	b29b      	uxth	r3, r3
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	bf0c      	ite	eq
 8003f20:	2301      	moveq	r3, #1
 8003f22:	2300      	movne	r3, #0
 8003f24:	b2db      	uxtb	r3, r3
 8003f26:	461a      	mov	r2, r3
 8003f28:	e00c      	b.n	8003f44 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	699b      	ldr	r3, [r3, #24]
 8003f30:	43da      	mvns	r2, r3
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	4013      	ands	r3, r2
 8003f36:	b29b      	uxth	r3, r3
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	bf0c      	ite	eq
 8003f3c:	2301      	moveq	r3, #1
 8003f3e:	2300      	movne	r3, #0
 8003f40:	b2db      	uxtb	r3, r3
 8003f42:	461a      	mov	r2, r3
 8003f44:	79fb      	ldrb	r3, [r7, #7]
 8003f46:	429a      	cmp	r2, r3
 8003f48:	d093      	beq.n	8003e72 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f4a:	2300      	movs	r3, #0
}
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	3710      	adds	r7, #16
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd80      	pop	{r7, pc}

08003f54 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b084      	sub	sp, #16
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	60f8      	str	r0, [r7, #12]
 8003f5c:	60b9      	str	r1, [r7, #8]
 8003f5e:	607a      	str	r2, [r7, #4]
 8003f60:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003f62:	e071      	b.n	8004048 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	695b      	ldr	r3, [r3, #20]
 8003f6a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f6e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f72:	d123      	bne.n	8003fbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	681a      	ldr	r2, [r3, #0]
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f82:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003f8c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	2200      	movs	r2, #0
 8003f92:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	2220      	movs	r2, #32
 8003f98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fa8:	f043 0204 	orr.w	r2, r3, #4
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	e067      	b.n	800408c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fc2:	d041      	beq.n	8004048 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fc4:	f7fe fe06 	bl	8002bd4 <HAL_GetTick>
 8003fc8:	4602      	mov	r2, r0
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	1ad3      	subs	r3, r2, r3
 8003fce:	687a      	ldr	r2, [r7, #4]
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	d302      	bcc.n	8003fda <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d136      	bne.n	8004048 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	0c1b      	lsrs	r3, r3, #16
 8003fde:	b2db      	uxtb	r3, r3
 8003fe0:	2b01      	cmp	r3, #1
 8003fe2:	d10c      	bne.n	8003ffe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	695b      	ldr	r3, [r3, #20]
 8003fea:	43da      	mvns	r2, r3
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	4013      	ands	r3, r2
 8003ff0:	b29b      	uxth	r3, r3
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	bf14      	ite	ne
 8003ff6:	2301      	movne	r3, #1
 8003ff8:	2300      	moveq	r3, #0
 8003ffa:	b2db      	uxtb	r3, r3
 8003ffc:	e00b      	b.n	8004016 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	699b      	ldr	r3, [r3, #24]
 8004004:	43da      	mvns	r2, r3
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	4013      	ands	r3, r2
 800400a:	b29b      	uxth	r3, r3
 800400c:	2b00      	cmp	r3, #0
 800400e:	bf14      	ite	ne
 8004010:	2301      	movne	r3, #1
 8004012:	2300      	moveq	r3, #0
 8004014:	b2db      	uxtb	r3, r3
 8004016:	2b00      	cmp	r3, #0
 8004018:	d016      	beq.n	8004048 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	2200      	movs	r2, #0
 800401e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2220      	movs	r2, #32
 8004024:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2200      	movs	r2, #0
 800402c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004034:	f043 0220 	orr.w	r2, r3, #32
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2200      	movs	r2, #0
 8004040:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004044:	2301      	movs	r3, #1
 8004046:	e021      	b.n	800408c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	0c1b      	lsrs	r3, r3, #16
 800404c:	b2db      	uxtb	r3, r3
 800404e:	2b01      	cmp	r3, #1
 8004050:	d10c      	bne.n	800406c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	695b      	ldr	r3, [r3, #20]
 8004058:	43da      	mvns	r2, r3
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	4013      	ands	r3, r2
 800405e:	b29b      	uxth	r3, r3
 8004060:	2b00      	cmp	r3, #0
 8004062:	bf14      	ite	ne
 8004064:	2301      	movne	r3, #1
 8004066:	2300      	moveq	r3, #0
 8004068:	b2db      	uxtb	r3, r3
 800406a:	e00b      	b.n	8004084 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	699b      	ldr	r3, [r3, #24]
 8004072:	43da      	mvns	r2, r3
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	4013      	ands	r3, r2
 8004078:	b29b      	uxth	r3, r3
 800407a:	2b00      	cmp	r3, #0
 800407c:	bf14      	ite	ne
 800407e:	2301      	movne	r3, #1
 8004080:	2300      	moveq	r3, #0
 8004082:	b2db      	uxtb	r3, r3
 8004084:	2b00      	cmp	r3, #0
 8004086:	f47f af6d 	bne.w	8003f64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800408a:	2300      	movs	r3, #0
}
 800408c:	4618      	mov	r0, r3
 800408e:	3710      	adds	r7, #16
 8004090:	46bd      	mov	sp, r7
 8004092:	bd80      	pop	{r7, pc}

08004094 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b084      	sub	sp, #16
 8004098:	af00      	add	r7, sp, #0
 800409a:	60f8      	str	r0, [r7, #12]
 800409c:	60b9      	str	r1, [r7, #8]
 800409e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80040a0:	e034      	b.n	800410c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80040a2:	68f8      	ldr	r0, [r7, #12]
 80040a4:	f000 f8e3 	bl	800426e <I2C_IsAcknowledgeFailed>
 80040a8:	4603      	mov	r3, r0
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d001      	beq.n	80040b2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80040ae:	2301      	movs	r3, #1
 80040b0:	e034      	b.n	800411c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040b8:	d028      	beq.n	800410c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040ba:	f7fe fd8b 	bl	8002bd4 <HAL_GetTick>
 80040be:	4602      	mov	r2, r0
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	1ad3      	subs	r3, r2, r3
 80040c4:	68ba      	ldr	r2, [r7, #8]
 80040c6:	429a      	cmp	r2, r3
 80040c8:	d302      	bcc.n	80040d0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d11d      	bne.n	800410c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	695b      	ldr	r3, [r3, #20]
 80040d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040da:	2b80      	cmp	r3, #128	@ 0x80
 80040dc:	d016      	beq.n	800410c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	2200      	movs	r2, #0
 80040e2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2220      	movs	r2, #32
 80040e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2200      	movs	r2, #0
 80040f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040f8:	f043 0220 	orr.w	r2, r3, #32
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	2200      	movs	r2, #0
 8004104:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004108:	2301      	movs	r3, #1
 800410a:	e007      	b.n	800411c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	695b      	ldr	r3, [r3, #20]
 8004112:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004116:	2b80      	cmp	r3, #128	@ 0x80
 8004118:	d1c3      	bne.n	80040a2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800411a:	2300      	movs	r3, #0
}
 800411c:	4618      	mov	r0, r3
 800411e:	3710      	adds	r7, #16
 8004120:	46bd      	mov	sp, r7
 8004122:	bd80      	pop	{r7, pc}

08004124 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b084      	sub	sp, #16
 8004128:	af00      	add	r7, sp, #0
 800412a:	60f8      	str	r0, [r7, #12]
 800412c:	60b9      	str	r1, [r7, #8]
 800412e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004130:	e034      	b.n	800419c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004132:	68f8      	ldr	r0, [r7, #12]
 8004134:	f000 f89b 	bl	800426e <I2C_IsAcknowledgeFailed>
 8004138:	4603      	mov	r3, r0
 800413a:	2b00      	cmp	r3, #0
 800413c:	d001      	beq.n	8004142 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	e034      	b.n	80041ac <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004148:	d028      	beq.n	800419c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800414a:	f7fe fd43 	bl	8002bd4 <HAL_GetTick>
 800414e:	4602      	mov	r2, r0
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	1ad3      	subs	r3, r2, r3
 8004154:	68ba      	ldr	r2, [r7, #8]
 8004156:	429a      	cmp	r2, r3
 8004158:	d302      	bcc.n	8004160 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d11d      	bne.n	800419c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	695b      	ldr	r3, [r3, #20]
 8004166:	f003 0304 	and.w	r3, r3, #4
 800416a:	2b04      	cmp	r3, #4
 800416c:	d016      	beq.n	800419c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	2200      	movs	r2, #0
 8004172:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	2220      	movs	r2, #32
 8004178:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	2200      	movs	r2, #0
 8004180:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004188:	f043 0220 	orr.w	r2, r3, #32
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	2200      	movs	r2, #0
 8004194:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004198:	2301      	movs	r3, #1
 800419a:	e007      	b.n	80041ac <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	695b      	ldr	r3, [r3, #20]
 80041a2:	f003 0304 	and.w	r3, r3, #4
 80041a6:	2b04      	cmp	r3, #4
 80041a8:	d1c3      	bne.n	8004132 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80041aa:	2300      	movs	r3, #0
}
 80041ac:	4618      	mov	r0, r3
 80041ae:	3710      	adds	r7, #16
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bd80      	pop	{r7, pc}

080041b4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b084      	sub	sp, #16
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	60f8      	str	r0, [r7, #12]
 80041bc:	60b9      	str	r1, [r7, #8]
 80041be:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80041c0:	e049      	b.n	8004256 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	695b      	ldr	r3, [r3, #20]
 80041c8:	f003 0310 	and.w	r3, r3, #16
 80041cc:	2b10      	cmp	r3, #16
 80041ce:	d119      	bne.n	8004204 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f06f 0210 	mvn.w	r2, #16
 80041d8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	2200      	movs	r2, #0
 80041de:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	2220      	movs	r2, #32
 80041e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	2200      	movs	r2, #0
 80041ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2200      	movs	r2, #0
 80041fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004200:	2301      	movs	r3, #1
 8004202:	e030      	b.n	8004266 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004204:	f7fe fce6 	bl	8002bd4 <HAL_GetTick>
 8004208:	4602      	mov	r2, r0
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	1ad3      	subs	r3, r2, r3
 800420e:	68ba      	ldr	r2, [r7, #8]
 8004210:	429a      	cmp	r2, r3
 8004212:	d302      	bcc.n	800421a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d11d      	bne.n	8004256 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	695b      	ldr	r3, [r3, #20]
 8004220:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004224:	2b40      	cmp	r3, #64	@ 0x40
 8004226:	d016      	beq.n	8004256 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	2200      	movs	r2, #0
 800422c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	2220      	movs	r2, #32
 8004232:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	2200      	movs	r2, #0
 800423a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004242:	f043 0220 	orr.w	r2, r3, #32
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	2200      	movs	r2, #0
 800424e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004252:	2301      	movs	r3, #1
 8004254:	e007      	b.n	8004266 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	695b      	ldr	r3, [r3, #20]
 800425c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004260:	2b40      	cmp	r3, #64	@ 0x40
 8004262:	d1ae      	bne.n	80041c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004264:	2300      	movs	r3, #0
}
 8004266:	4618      	mov	r0, r3
 8004268:	3710      	adds	r7, #16
 800426a:	46bd      	mov	sp, r7
 800426c:	bd80      	pop	{r7, pc}

0800426e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800426e:	b480      	push	{r7}
 8004270:	b083      	sub	sp, #12
 8004272:	af00      	add	r7, sp, #0
 8004274:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	695b      	ldr	r3, [r3, #20]
 800427c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004280:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004284:	d11b      	bne.n	80042be <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800428e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2200      	movs	r2, #0
 8004294:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2220      	movs	r2, #32
 800429a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2200      	movs	r2, #0
 80042a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042aa:	f043 0204 	orr.w	r2, r3, #4
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2200      	movs	r2, #0
 80042b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80042ba:	2301      	movs	r3, #1
 80042bc:	e000      	b.n	80042c0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80042be:	2300      	movs	r3, #0
}
 80042c0:	4618      	mov	r0, r3
 80042c2:	370c      	adds	r7, #12
 80042c4:	46bd      	mov	sp, r7
 80042c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ca:	4770      	bx	lr

080042cc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b086      	sub	sp, #24
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d101      	bne.n	80042de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	e267      	b.n	80047ae <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f003 0301 	and.w	r3, r3, #1
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d075      	beq.n	80043d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80042ea:	4b88      	ldr	r3, [pc, #544]	@ (800450c <HAL_RCC_OscConfig+0x240>)
 80042ec:	689b      	ldr	r3, [r3, #8]
 80042ee:	f003 030c 	and.w	r3, r3, #12
 80042f2:	2b04      	cmp	r3, #4
 80042f4:	d00c      	beq.n	8004310 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042f6:	4b85      	ldr	r3, [pc, #532]	@ (800450c <HAL_RCC_OscConfig+0x240>)
 80042f8:	689b      	ldr	r3, [r3, #8]
 80042fa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80042fe:	2b08      	cmp	r3, #8
 8004300:	d112      	bne.n	8004328 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004302:	4b82      	ldr	r3, [pc, #520]	@ (800450c <HAL_RCC_OscConfig+0x240>)
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800430a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800430e:	d10b      	bne.n	8004328 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004310:	4b7e      	ldr	r3, [pc, #504]	@ (800450c <HAL_RCC_OscConfig+0x240>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004318:	2b00      	cmp	r3, #0
 800431a:	d05b      	beq.n	80043d4 <HAL_RCC_OscConfig+0x108>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d157      	bne.n	80043d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004324:	2301      	movs	r3, #1
 8004326:	e242      	b.n	80047ae <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004330:	d106      	bne.n	8004340 <HAL_RCC_OscConfig+0x74>
 8004332:	4b76      	ldr	r3, [pc, #472]	@ (800450c <HAL_RCC_OscConfig+0x240>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a75      	ldr	r2, [pc, #468]	@ (800450c <HAL_RCC_OscConfig+0x240>)
 8004338:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800433c:	6013      	str	r3, [r2, #0]
 800433e:	e01d      	b.n	800437c <HAL_RCC_OscConfig+0xb0>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004348:	d10c      	bne.n	8004364 <HAL_RCC_OscConfig+0x98>
 800434a:	4b70      	ldr	r3, [pc, #448]	@ (800450c <HAL_RCC_OscConfig+0x240>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a6f      	ldr	r2, [pc, #444]	@ (800450c <HAL_RCC_OscConfig+0x240>)
 8004350:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004354:	6013      	str	r3, [r2, #0]
 8004356:	4b6d      	ldr	r3, [pc, #436]	@ (800450c <HAL_RCC_OscConfig+0x240>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a6c      	ldr	r2, [pc, #432]	@ (800450c <HAL_RCC_OscConfig+0x240>)
 800435c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004360:	6013      	str	r3, [r2, #0]
 8004362:	e00b      	b.n	800437c <HAL_RCC_OscConfig+0xb0>
 8004364:	4b69      	ldr	r3, [pc, #420]	@ (800450c <HAL_RCC_OscConfig+0x240>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a68      	ldr	r2, [pc, #416]	@ (800450c <HAL_RCC_OscConfig+0x240>)
 800436a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800436e:	6013      	str	r3, [r2, #0]
 8004370:	4b66      	ldr	r3, [pc, #408]	@ (800450c <HAL_RCC_OscConfig+0x240>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a65      	ldr	r2, [pc, #404]	@ (800450c <HAL_RCC_OscConfig+0x240>)
 8004376:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800437a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d013      	beq.n	80043ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004384:	f7fe fc26 	bl	8002bd4 <HAL_GetTick>
 8004388:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800438a:	e008      	b.n	800439e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800438c:	f7fe fc22 	bl	8002bd4 <HAL_GetTick>
 8004390:	4602      	mov	r2, r0
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	1ad3      	subs	r3, r2, r3
 8004396:	2b64      	cmp	r3, #100	@ 0x64
 8004398:	d901      	bls.n	800439e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800439a:	2303      	movs	r3, #3
 800439c:	e207      	b.n	80047ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800439e:	4b5b      	ldr	r3, [pc, #364]	@ (800450c <HAL_RCC_OscConfig+0x240>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d0f0      	beq.n	800438c <HAL_RCC_OscConfig+0xc0>
 80043aa:	e014      	b.n	80043d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043ac:	f7fe fc12 	bl	8002bd4 <HAL_GetTick>
 80043b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043b2:	e008      	b.n	80043c6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043b4:	f7fe fc0e 	bl	8002bd4 <HAL_GetTick>
 80043b8:	4602      	mov	r2, r0
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	1ad3      	subs	r3, r2, r3
 80043be:	2b64      	cmp	r3, #100	@ 0x64
 80043c0:	d901      	bls.n	80043c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80043c2:	2303      	movs	r3, #3
 80043c4:	e1f3      	b.n	80047ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043c6:	4b51      	ldr	r3, [pc, #324]	@ (800450c <HAL_RCC_OscConfig+0x240>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d1f0      	bne.n	80043b4 <HAL_RCC_OscConfig+0xe8>
 80043d2:	e000      	b.n	80043d6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f003 0302 	and.w	r3, r3, #2
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d063      	beq.n	80044aa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80043e2:	4b4a      	ldr	r3, [pc, #296]	@ (800450c <HAL_RCC_OscConfig+0x240>)
 80043e4:	689b      	ldr	r3, [r3, #8]
 80043e6:	f003 030c 	and.w	r3, r3, #12
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d00b      	beq.n	8004406 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043ee:	4b47      	ldr	r3, [pc, #284]	@ (800450c <HAL_RCC_OscConfig+0x240>)
 80043f0:	689b      	ldr	r3, [r3, #8]
 80043f2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80043f6:	2b08      	cmp	r3, #8
 80043f8:	d11c      	bne.n	8004434 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043fa:	4b44      	ldr	r3, [pc, #272]	@ (800450c <HAL_RCC_OscConfig+0x240>)
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004402:	2b00      	cmp	r3, #0
 8004404:	d116      	bne.n	8004434 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004406:	4b41      	ldr	r3, [pc, #260]	@ (800450c <HAL_RCC_OscConfig+0x240>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f003 0302 	and.w	r3, r3, #2
 800440e:	2b00      	cmp	r3, #0
 8004410:	d005      	beq.n	800441e <HAL_RCC_OscConfig+0x152>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	68db      	ldr	r3, [r3, #12]
 8004416:	2b01      	cmp	r3, #1
 8004418:	d001      	beq.n	800441e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800441a:	2301      	movs	r3, #1
 800441c:	e1c7      	b.n	80047ae <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800441e:	4b3b      	ldr	r3, [pc, #236]	@ (800450c <HAL_RCC_OscConfig+0x240>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	691b      	ldr	r3, [r3, #16]
 800442a:	00db      	lsls	r3, r3, #3
 800442c:	4937      	ldr	r1, [pc, #220]	@ (800450c <HAL_RCC_OscConfig+0x240>)
 800442e:	4313      	orrs	r3, r2
 8004430:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004432:	e03a      	b.n	80044aa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	68db      	ldr	r3, [r3, #12]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d020      	beq.n	800447e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800443c:	4b34      	ldr	r3, [pc, #208]	@ (8004510 <HAL_RCC_OscConfig+0x244>)
 800443e:	2201      	movs	r2, #1
 8004440:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004442:	f7fe fbc7 	bl	8002bd4 <HAL_GetTick>
 8004446:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004448:	e008      	b.n	800445c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800444a:	f7fe fbc3 	bl	8002bd4 <HAL_GetTick>
 800444e:	4602      	mov	r2, r0
 8004450:	693b      	ldr	r3, [r7, #16]
 8004452:	1ad3      	subs	r3, r2, r3
 8004454:	2b02      	cmp	r3, #2
 8004456:	d901      	bls.n	800445c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004458:	2303      	movs	r3, #3
 800445a:	e1a8      	b.n	80047ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800445c:	4b2b      	ldr	r3, [pc, #172]	@ (800450c <HAL_RCC_OscConfig+0x240>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f003 0302 	and.w	r3, r3, #2
 8004464:	2b00      	cmp	r3, #0
 8004466:	d0f0      	beq.n	800444a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004468:	4b28      	ldr	r3, [pc, #160]	@ (800450c <HAL_RCC_OscConfig+0x240>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	691b      	ldr	r3, [r3, #16]
 8004474:	00db      	lsls	r3, r3, #3
 8004476:	4925      	ldr	r1, [pc, #148]	@ (800450c <HAL_RCC_OscConfig+0x240>)
 8004478:	4313      	orrs	r3, r2
 800447a:	600b      	str	r3, [r1, #0]
 800447c:	e015      	b.n	80044aa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800447e:	4b24      	ldr	r3, [pc, #144]	@ (8004510 <HAL_RCC_OscConfig+0x244>)
 8004480:	2200      	movs	r2, #0
 8004482:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004484:	f7fe fba6 	bl	8002bd4 <HAL_GetTick>
 8004488:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800448a:	e008      	b.n	800449e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800448c:	f7fe fba2 	bl	8002bd4 <HAL_GetTick>
 8004490:	4602      	mov	r2, r0
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	1ad3      	subs	r3, r2, r3
 8004496:	2b02      	cmp	r3, #2
 8004498:	d901      	bls.n	800449e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800449a:	2303      	movs	r3, #3
 800449c:	e187      	b.n	80047ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800449e:	4b1b      	ldr	r3, [pc, #108]	@ (800450c <HAL_RCC_OscConfig+0x240>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f003 0302 	and.w	r3, r3, #2
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d1f0      	bne.n	800448c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f003 0308 	and.w	r3, r3, #8
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d036      	beq.n	8004524 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	695b      	ldr	r3, [r3, #20]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d016      	beq.n	80044ec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044be:	4b15      	ldr	r3, [pc, #84]	@ (8004514 <HAL_RCC_OscConfig+0x248>)
 80044c0:	2201      	movs	r2, #1
 80044c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044c4:	f7fe fb86 	bl	8002bd4 <HAL_GetTick>
 80044c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044ca:	e008      	b.n	80044de <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044cc:	f7fe fb82 	bl	8002bd4 <HAL_GetTick>
 80044d0:	4602      	mov	r2, r0
 80044d2:	693b      	ldr	r3, [r7, #16]
 80044d4:	1ad3      	subs	r3, r2, r3
 80044d6:	2b02      	cmp	r3, #2
 80044d8:	d901      	bls.n	80044de <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80044da:	2303      	movs	r3, #3
 80044dc:	e167      	b.n	80047ae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044de:	4b0b      	ldr	r3, [pc, #44]	@ (800450c <HAL_RCC_OscConfig+0x240>)
 80044e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044e2:	f003 0302 	and.w	r3, r3, #2
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d0f0      	beq.n	80044cc <HAL_RCC_OscConfig+0x200>
 80044ea:	e01b      	b.n	8004524 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044ec:	4b09      	ldr	r3, [pc, #36]	@ (8004514 <HAL_RCC_OscConfig+0x248>)
 80044ee:	2200      	movs	r2, #0
 80044f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044f2:	f7fe fb6f 	bl	8002bd4 <HAL_GetTick>
 80044f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044f8:	e00e      	b.n	8004518 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044fa:	f7fe fb6b 	bl	8002bd4 <HAL_GetTick>
 80044fe:	4602      	mov	r2, r0
 8004500:	693b      	ldr	r3, [r7, #16]
 8004502:	1ad3      	subs	r3, r2, r3
 8004504:	2b02      	cmp	r3, #2
 8004506:	d907      	bls.n	8004518 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004508:	2303      	movs	r3, #3
 800450a:	e150      	b.n	80047ae <HAL_RCC_OscConfig+0x4e2>
 800450c:	40023800 	.word	0x40023800
 8004510:	42470000 	.word	0x42470000
 8004514:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004518:	4b88      	ldr	r3, [pc, #544]	@ (800473c <HAL_RCC_OscConfig+0x470>)
 800451a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800451c:	f003 0302 	and.w	r3, r3, #2
 8004520:	2b00      	cmp	r3, #0
 8004522:	d1ea      	bne.n	80044fa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f003 0304 	and.w	r3, r3, #4
 800452c:	2b00      	cmp	r3, #0
 800452e:	f000 8097 	beq.w	8004660 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004532:	2300      	movs	r3, #0
 8004534:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004536:	4b81      	ldr	r3, [pc, #516]	@ (800473c <HAL_RCC_OscConfig+0x470>)
 8004538:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800453a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800453e:	2b00      	cmp	r3, #0
 8004540:	d10f      	bne.n	8004562 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004542:	2300      	movs	r3, #0
 8004544:	60bb      	str	r3, [r7, #8]
 8004546:	4b7d      	ldr	r3, [pc, #500]	@ (800473c <HAL_RCC_OscConfig+0x470>)
 8004548:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800454a:	4a7c      	ldr	r2, [pc, #496]	@ (800473c <HAL_RCC_OscConfig+0x470>)
 800454c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004550:	6413      	str	r3, [r2, #64]	@ 0x40
 8004552:	4b7a      	ldr	r3, [pc, #488]	@ (800473c <HAL_RCC_OscConfig+0x470>)
 8004554:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004556:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800455a:	60bb      	str	r3, [r7, #8]
 800455c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800455e:	2301      	movs	r3, #1
 8004560:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004562:	4b77      	ldr	r3, [pc, #476]	@ (8004740 <HAL_RCC_OscConfig+0x474>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800456a:	2b00      	cmp	r3, #0
 800456c:	d118      	bne.n	80045a0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800456e:	4b74      	ldr	r3, [pc, #464]	@ (8004740 <HAL_RCC_OscConfig+0x474>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4a73      	ldr	r2, [pc, #460]	@ (8004740 <HAL_RCC_OscConfig+0x474>)
 8004574:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004578:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800457a:	f7fe fb2b 	bl	8002bd4 <HAL_GetTick>
 800457e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004580:	e008      	b.n	8004594 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004582:	f7fe fb27 	bl	8002bd4 <HAL_GetTick>
 8004586:	4602      	mov	r2, r0
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	1ad3      	subs	r3, r2, r3
 800458c:	2b02      	cmp	r3, #2
 800458e:	d901      	bls.n	8004594 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004590:	2303      	movs	r3, #3
 8004592:	e10c      	b.n	80047ae <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004594:	4b6a      	ldr	r3, [pc, #424]	@ (8004740 <HAL_RCC_OscConfig+0x474>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800459c:	2b00      	cmp	r3, #0
 800459e:	d0f0      	beq.n	8004582 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	689b      	ldr	r3, [r3, #8]
 80045a4:	2b01      	cmp	r3, #1
 80045a6:	d106      	bne.n	80045b6 <HAL_RCC_OscConfig+0x2ea>
 80045a8:	4b64      	ldr	r3, [pc, #400]	@ (800473c <HAL_RCC_OscConfig+0x470>)
 80045aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045ac:	4a63      	ldr	r2, [pc, #396]	@ (800473c <HAL_RCC_OscConfig+0x470>)
 80045ae:	f043 0301 	orr.w	r3, r3, #1
 80045b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80045b4:	e01c      	b.n	80045f0 <HAL_RCC_OscConfig+0x324>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	2b05      	cmp	r3, #5
 80045bc:	d10c      	bne.n	80045d8 <HAL_RCC_OscConfig+0x30c>
 80045be:	4b5f      	ldr	r3, [pc, #380]	@ (800473c <HAL_RCC_OscConfig+0x470>)
 80045c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045c2:	4a5e      	ldr	r2, [pc, #376]	@ (800473c <HAL_RCC_OscConfig+0x470>)
 80045c4:	f043 0304 	orr.w	r3, r3, #4
 80045c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80045ca:	4b5c      	ldr	r3, [pc, #368]	@ (800473c <HAL_RCC_OscConfig+0x470>)
 80045cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045ce:	4a5b      	ldr	r2, [pc, #364]	@ (800473c <HAL_RCC_OscConfig+0x470>)
 80045d0:	f043 0301 	orr.w	r3, r3, #1
 80045d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80045d6:	e00b      	b.n	80045f0 <HAL_RCC_OscConfig+0x324>
 80045d8:	4b58      	ldr	r3, [pc, #352]	@ (800473c <HAL_RCC_OscConfig+0x470>)
 80045da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045dc:	4a57      	ldr	r2, [pc, #348]	@ (800473c <HAL_RCC_OscConfig+0x470>)
 80045de:	f023 0301 	bic.w	r3, r3, #1
 80045e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80045e4:	4b55      	ldr	r3, [pc, #340]	@ (800473c <HAL_RCC_OscConfig+0x470>)
 80045e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045e8:	4a54      	ldr	r2, [pc, #336]	@ (800473c <HAL_RCC_OscConfig+0x470>)
 80045ea:	f023 0304 	bic.w	r3, r3, #4
 80045ee:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	689b      	ldr	r3, [r3, #8]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d015      	beq.n	8004624 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045f8:	f7fe faec 	bl	8002bd4 <HAL_GetTick>
 80045fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045fe:	e00a      	b.n	8004616 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004600:	f7fe fae8 	bl	8002bd4 <HAL_GetTick>
 8004604:	4602      	mov	r2, r0
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	1ad3      	subs	r3, r2, r3
 800460a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800460e:	4293      	cmp	r3, r2
 8004610:	d901      	bls.n	8004616 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004612:	2303      	movs	r3, #3
 8004614:	e0cb      	b.n	80047ae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004616:	4b49      	ldr	r3, [pc, #292]	@ (800473c <HAL_RCC_OscConfig+0x470>)
 8004618:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800461a:	f003 0302 	and.w	r3, r3, #2
 800461e:	2b00      	cmp	r3, #0
 8004620:	d0ee      	beq.n	8004600 <HAL_RCC_OscConfig+0x334>
 8004622:	e014      	b.n	800464e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004624:	f7fe fad6 	bl	8002bd4 <HAL_GetTick>
 8004628:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800462a:	e00a      	b.n	8004642 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800462c:	f7fe fad2 	bl	8002bd4 <HAL_GetTick>
 8004630:	4602      	mov	r2, r0
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	1ad3      	subs	r3, r2, r3
 8004636:	f241 3288 	movw	r2, #5000	@ 0x1388
 800463a:	4293      	cmp	r3, r2
 800463c:	d901      	bls.n	8004642 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800463e:	2303      	movs	r3, #3
 8004640:	e0b5      	b.n	80047ae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004642:	4b3e      	ldr	r3, [pc, #248]	@ (800473c <HAL_RCC_OscConfig+0x470>)
 8004644:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004646:	f003 0302 	and.w	r3, r3, #2
 800464a:	2b00      	cmp	r3, #0
 800464c:	d1ee      	bne.n	800462c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800464e:	7dfb      	ldrb	r3, [r7, #23]
 8004650:	2b01      	cmp	r3, #1
 8004652:	d105      	bne.n	8004660 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004654:	4b39      	ldr	r3, [pc, #228]	@ (800473c <HAL_RCC_OscConfig+0x470>)
 8004656:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004658:	4a38      	ldr	r2, [pc, #224]	@ (800473c <HAL_RCC_OscConfig+0x470>)
 800465a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800465e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	699b      	ldr	r3, [r3, #24]
 8004664:	2b00      	cmp	r3, #0
 8004666:	f000 80a1 	beq.w	80047ac <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800466a:	4b34      	ldr	r3, [pc, #208]	@ (800473c <HAL_RCC_OscConfig+0x470>)
 800466c:	689b      	ldr	r3, [r3, #8]
 800466e:	f003 030c 	and.w	r3, r3, #12
 8004672:	2b08      	cmp	r3, #8
 8004674:	d05c      	beq.n	8004730 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	699b      	ldr	r3, [r3, #24]
 800467a:	2b02      	cmp	r3, #2
 800467c:	d141      	bne.n	8004702 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800467e:	4b31      	ldr	r3, [pc, #196]	@ (8004744 <HAL_RCC_OscConfig+0x478>)
 8004680:	2200      	movs	r2, #0
 8004682:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004684:	f7fe faa6 	bl	8002bd4 <HAL_GetTick>
 8004688:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800468a:	e008      	b.n	800469e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800468c:	f7fe faa2 	bl	8002bd4 <HAL_GetTick>
 8004690:	4602      	mov	r2, r0
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	1ad3      	subs	r3, r2, r3
 8004696:	2b02      	cmp	r3, #2
 8004698:	d901      	bls.n	800469e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800469a:	2303      	movs	r3, #3
 800469c:	e087      	b.n	80047ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800469e:	4b27      	ldr	r3, [pc, #156]	@ (800473c <HAL_RCC_OscConfig+0x470>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d1f0      	bne.n	800468c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	69da      	ldr	r2, [r3, #28]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6a1b      	ldr	r3, [r3, #32]
 80046b2:	431a      	orrs	r2, r3
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046b8:	019b      	lsls	r3, r3, #6
 80046ba:	431a      	orrs	r2, r3
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046c0:	085b      	lsrs	r3, r3, #1
 80046c2:	3b01      	subs	r3, #1
 80046c4:	041b      	lsls	r3, r3, #16
 80046c6:	431a      	orrs	r2, r3
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046cc:	061b      	lsls	r3, r3, #24
 80046ce:	491b      	ldr	r1, [pc, #108]	@ (800473c <HAL_RCC_OscConfig+0x470>)
 80046d0:	4313      	orrs	r3, r2
 80046d2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80046d4:	4b1b      	ldr	r3, [pc, #108]	@ (8004744 <HAL_RCC_OscConfig+0x478>)
 80046d6:	2201      	movs	r2, #1
 80046d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046da:	f7fe fa7b 	bl	8002bd4 <HAL_GetTick>
 80046de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046e0:	e008      	b.n	80046f4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046e2:	f7fe fa77 	bl	8002bd4 <HAL_GetTick>
 80046e6:	4602      	mov	r2, r0
 80046e8:	693b      	ldr	r3, [r7, #16]
 80046ea:	1ad3      	subs	r3, r2, r3
 80046ec:	2b02      	cmp	r3, #2
 80046ee:	d901      	bls.n	80046f4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80046f0:	2303      	movs	r3, #3
 80046f2:	e05c      	b.n	80047ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046f4:	4b11      	ldr	r3, [pc, #68]	@ (800473c <HAL_RCC_OscConfig+0x470>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d0f0      	beq.n	80046e2 <HAL_RCC_OscConfig+0x416>
 8004700:	e054      	b.n	80047ac <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004702:	4b10      	ldr	r3, [pc, #64]	@ (8004744 <HAL_RCC_OscConfig+0x478>)
 8004704:	2200      	movs	r2, #0
 8004706:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004708:	f7fe fa64 	bl	8002bd4 <HAL_GetTick>
 800470c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800470e:	e008      	b.n	8004722 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004710:	f7fe fa60 	bl	8002bd4 <HAL_GetTick>
 8004714:	4602      	mov	r2, r0
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	1ad3      	subs	r3, r2, r3
 800471a:	2b02      	cmp	r3, #2
 800471c:	d901      	bls.n	8004722 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800471e:	2303      	movs	r3, #3
 8004720:	e045      	b.n	80047ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004722:	4b06      	ldr	r3, [pc, #24]	@ (800473c <HAL_RCC_OscConfig+0x470>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800472a:	2b00      	cmp	r3, #0
 800472c:	d1f0      	bne.n	8004710 <HAL_RCC_OscConfig+0x444>
 800472e:	e03d      	b.n	80047ac <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	699b      	ldr	r3, [r3, #24]
 8004734:	2b01      	cmp	r3, #1
 8004736:	d107      	bne.n	8004748 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004738:	2301      	movs	r3, #1
 800473a:	e038      	b.n	80047ae <HAL_RCC_OscConfig+0x4e2>
 800473c:	40023800 	.word	0x40023800
 8004740:	40007000 	.word	0x40007000
 8004744:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004748:	4b1b      	ldr	r3, [pc, #108]	@ (80047b8 <HAL_RCC_OscConfig+0x4ec>)
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	699b      	ldr	r3, [r3, #24]
 8004752:	2b01      	cmp	r3, #1
 8004754:	d028      	beq.n	80047a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004760:	429a      	cmp	r2, r3
 8004762:	d121      	bne.n	80047a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800476e:	429a      	cmp	r2, r3
 8004770:	d11a      	bne.n	80047a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004772:	68fa      	ldr	r2, [r7, #12]
 8004774:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004778:	4013      	ands	r3, r2
 800477a:	687a      	ldr	r2, [r7, #4]
 800477c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800477e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004780:	4293      	cmp	r3, r2
 8004782:	d111      	bne.n	80047a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800478e:	085b      	lsrs	r3, r3, #1
 8004790:	3b01      	subs	r3, #1
 8004792:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004794:	429a      	cmp	r2, r3
 8004796:	d107      	bne.n	80047a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047a2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80047a4:	429a      	cmp	r2, r3
 80047a6:	d001      	beq.n	80047ac <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80047a8:	2301      	movs	r3, #1
 80047aa:	e000      	b.n	80047ae <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80047ac:	2300      	movs	r3, #0
}
 80047ae:	4618      	mov	r0, r3
 80047b0:	3718      	adds	r7, #24
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}
 80047b6:	bf00      	nop
 80047b8:	40023800 	.word	0x40023800

080047bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b084      	sub	sp, #16
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
 80047c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d101      	bne.n	80047d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80047cc:	2301      	movs	r3, #1
 80047ce:	e0cc      	b.n	800496a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80047d0:	4b68      	ldr	r3, [pc, #416]	@ (8004974 <HAL_RCC_ClockConfig+0x1b8>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f003 0307 	and.w	r3, r3, #7
 80047d8:	683a      	ldr	r2, [r7, #0]
 80047da:	429a      	cmp	r2, r3
 80047dc:	d90c      	bls.n	80047f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047de:	4b65      	ldr	r3, [pc, #404]	@ (8004974 <HAL_RCC_ClockConfig+0x1b8>)
 80047e0:	683a      	ldr	r2, [r7, #0]
 80047e2:	b2d2      	uxtb	r2, r2
 80047e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047e6:	4b63      	ldr	r3, [pc, #396]	@ (8004974 <HAL_RCC_ClockConfig+0x1b8>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f003 0307 	and.w	r3, r3, #7
 80047ee:	683a      	ldr	r2, [r7, #0]
 80047f0:	429a      	cmp	r2, r3
 80047f2:	d001      	beq.n	80047f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80047f4:	2301      	movs	r3, #1
 80047f6:	e0b8      	b.n	800496a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f003 0302 	and.w	r3, r3, #2
 8004800:	2b00      	cmp	r3, #0
 8004802:	d020      	beq.n	8004846 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f003 0304 	and.w	r3, r3, #4
 800480c:	2b00      	cmp	r3, #0
 800480e:	d005      	beq.n	800481c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004810:	4b59      	ldr	r3, [pc, #356]	@ (8004978 <HAL_RCC_ClockConfig+0x1bc>)
 8004812:	689b      	ldr	r3, [r3, #8]
 8004814:	4a58      	ldr	r2, [pc, #352]	@ (8004978 <HAL_RCC_ClockConfig+0x1bc>)
 8004816:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800481a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f003 0308 	and.w	r3, r3, #8
 8004824:	2b00      	cmp	r3, #0
 8004826:	d005      	beq.n	8004834 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004828:	4b53      	ldr	r3, [pc, #332]	@ (8004978 <HAL_RCC_ClockConfig+0x1bc>)
 800482a:	689b      	ldr	r3, [r3, #8]
 800482c:	4a52      	ldr	r2, [pc, #328]	@ (8004978 <HAL_RCC_ClockConfig+0x1bc>)
 800482e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004832:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004834:	4b50      	ldr	r3, [pc, #320]	@ (8004978 <HAL_RCC_ClockConfig+0x1bc>)
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	689b      	ldr	r3, [r3, #8]
 8004840:	494d      	ldr	r1, [pc, #308]	@ (8004978 <HAL_RCC_ClockConfig+0x1bc>)
 8004842:	4313      	orrs	r3, r2
 8004844:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f003 0301 	and.w	r3, r3, #1
 800484e:	2b00      	cmp	r3, #0
 8004850:	d044      	beq.n	80048dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	2b01      	cmp	r3, #1
 8004858:	d107      	bne.n	800486a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800485a:	4b47      	ldr	r3, [pc, #284]	@ (8004978 <HAL_RCC_ClockConfig+0x1bc>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004862:	2b00      	cmp	r3, #0
 8004864:	d119      	bne.n	800489a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004866:	2301      	movs	r3, #1
 8004868:	e07f      	b.n	800496a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	2b02      	cmp	r3, #2
 8004870:	d003      	beq.n	800487a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004876:	2b03      	cmp	r3, #3
 8004878:	d107      	bne.n	800488a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800487a:	4b3f      	ldr	r3, [pc, #252]	@ (8004978 <HAL_RCC_ClockConfig+0x1bc>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004882:	2b00      	cmp	r3, #0
 8004884:	d109      	bne.n	800489a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004886:	2301      	movs	r3, #1
 8004888:	e06f      	b.n	800496a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800488a:	4b3b      	ldr	r3, [pc, #236]	@ (8004978 <HAL_RCC_ClockConfig+0x1bc>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f003 0302 	and.w	r3, r3, #2
 8004892:	2b00      	cmp	r3, #0
 8004894:	d101      	bne.n	800489a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004896:	2301      	movs	r3, #1
 8004898:	e067      	b.n	800496a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800489a:	4b37      	ldr	r3, [pc, #220]	@ (8004978 <HAL_RCC_ClockConfig+0x1bc>)
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	f023 0203 	bic.w	r2, r3, #3
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	4934      	ldr	r1, [pc, #208]	@ (8004978 <HAL_RCC_ClockConfig+0x1bc>)
 80048a8:	4313      	orrs	r3, r2
 80048aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80048ac:	f7fe f992 	bl	8002bd4 <HAL_GetTick>
 80048b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048b2:	e00a      	b.n	80048ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048b4:	f7fe f98e 	bl	8002bd4 <HAL_GetTick>
 80048b8:	4602      	mov	r2, r0
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	1ad3      	subs	r3, r2, r3
 80048be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d901      	bls.n	80048ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80048c6:	2303      	movs	r3, #3
 80048c8:	e04f      	b.n	800496a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048ca:	4b2b      	ldr	r3, [pc, #172]	@ (8004978 <HAL_RCC_ClockConfig+0x1bc>)
 80048cc:	689b      	ldr	r3, [r3, #8]
 80048ce:	f003 020c 	and.w	r2, r3, #12
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	009b      	lsls	r3, r3, #2
 80048d8:	429a      	cmp	r2, r3
 80048da:	d1eb      	bne.n	80048b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80048dc:	4b25      	ldr	r3, [pc, #148]	@ (8004974 <HAL_RCC_ClockConfig+0x1b8>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f003 0307 	and.w	r3, r3, #7
 80048e4:	683a      	ldr	r2, [r7, #0]
 80048e6:	429a      	cmp	r2, r3
 80048e8:	d20c      	bcs.n	8004904 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048ea:	4b22      	ldr	r3, [pc, #136]	@ (8004974 <HAL_RCC_ClockConfig+0x1b8>)
 80048ec:	683a      	ldr	r2, [r7, #0]
 80048ee:	b2d2      	uxtb	r2, r2
 80048f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048f2:	4b20      	ldr	r3, [pc, #128]	@ (8004974 <HAL_RCC_ClockConfig+0x1b8>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f003 0307 	and.w	r3, r3, #7
 80048fa:	683a      	ldr	r2, [r7, #0]
 80048fc:	429a      	cmp	r2, r3
 80048fe:	d001      	beq.n	8004904 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004900:	2301      	movs	r3, #1
 8004902:	e032      	b.n	800496a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f003 0304 	and.w	r3, r3, #4
 800490c:	2b00      	cmp	r3, #0
 800490e:	d008      	beq.n	8004922 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004910:	4b19      	ldr	r3, [pc, #100]	@ (8004978 <HAL_RCC_ClockConfig+0x1bc>)
 8004912:	689b      	ldr	r3, [r3, #8]
 8004914:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	68db      	ldr	r3, [r3, #12]
 800491c:	4916      	ldr	r1, [pc, #88]	@ (8004978 <HAL_RCC_ClockConfig+0x1bc>)
 800491e:	4313      	orrs	r3, r2
 8004920:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f003 0308 	and.w	r3, r3, #8
 800492a:	2b00      	cmp	r3, #0
 800492c:	d009      	beq.n	8004942 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800492e:	4b12      	ldr	r3, [pc, #72]	@ (8004978 <HAL_RCC_ClockConfig+0x1bc>)
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	691b      	ldr	r3, [r3, #16]
 800493a:	00db      	lsls	r3, r3, #3
 800493c:	490e      	ldr	r1, [pc, #56]	@ (8004978 <HAL_RCC_ClockConfig+0x1bc>)
 800493e:	4313      	orrs	r3, r2
 8004940:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004942:	f000 f821 	bl	8004988 <HAL_RCC_GetSysClockFreq>
 8004946:	4602      	mov	r2, r0
 8004948:	4b0b      	ldr	r3, [pc, #44]	@ (8004978 <HAL_RCC_ClockConfig+0x1bc>)
 800494a:	689b      	ldr	r3, [r3, #8]
 800494c:	091b      	lsrs	r3, r3, #4
 800494e:	f003 030f 	and.w	r3, r3, #15
 8004952:	490a      	ldr	r1, [pc, #40]	@ (800497c <HAL_RCC_ClockConfig+0x1c0>)
 8004954:	5ccb      	ldrb	r3, [r1, r3]
 8004956:	fa22 f303 	lsr.w	r3, r2, r3
 800495a:	4a09      	ldr	r2, [pc, #36]	@ (8004980 <HAL_RCC_ClockConfig+0x1c4>)
 800495c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800495e:	4b09      	ldr	r3, [pc, #36]	@ (8004984 <HAL_RCC_ClockConfig+0x1c8>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4618      	mov	r0, r3
 8004964:	f7fe f8f2 	bl	8002b4c <HAL_InitTick>

  return HAL_OK;
 8004968:	2300      	movs	r3, #0
}
 800496a:	4618      	mov	r0, r3
 800496c:	3710      	adds	r7, #16
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}
 8004972:	bf00      	nop
 8004974:	40023c00 	.word	0x40023c00
 8004978:	40023800 	.word	0x40023800
 800497c:	08007480 	.word	0x08007480
 8004980:	20000130 	.word	0x20000130
 8004984:	20000134 	.word	0x20000134

08004988 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004988:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800498c:	b090      	sub	sp, #64	@ 0x40
 800498e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004990:	2300      	movs	r3, #0
 8004992:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8004994:	2300      	movs	r3, #0
 8004996:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8004998:	2300      	movs	r3, #0
 800499a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800499c:	2300      	movs	r3, #0
 800499e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80049a0:	4b59      	ldr	r3, [pc, #356]	@ (8004b08 <HAL_RCC_GetSysClockFreq+0x180>)
 80049a2:	689b      	ldr	r3, [r3, #8]
 80049a4:	f003 030c 	and.w	r3, r3, #12
 80049a8:	2b08      	cmp	r3, #8
 80049aa:	d00d      	beq.n	80049c8 <HAL_RCC_GetSysClockFreq+0x40>
 80049ac:	2b08      	cmp	r3, #8
 80049ae:	f200 80a1 	bhi.w	8004af4 <HAL_RCC_GetSysClockFreq+0x16c>
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d002      	beq.n	80049bc <HAL_RCC_GetSysClockFreq+0x34>
 80049b6:	2b04      	cmp	r3, #4
 80049b8:	d003      	beq.n	80049c2 <HAL_RCC_GetSysClockFreq+0x3a>
 80049ba:	e09b      	b.n	8004af4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80049bc:	4b53      	ldr	r3, [pc, #332]	@ (8004b0c <HAL_RCC_GetSysClockFreq+0x184>)
 80049be:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80049c0:	e09b      	b.n	8004afa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80049c2:	4b53      	ldr	r3, [pc, #332]	@ (8004b10 <HAL_RCC_GetSysClockFreq+0x188>)
 80049c4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80049c6:	e098      	b.n	8004afa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80049c8:	4b4f      	ldr	r3, [pc, #316]	@ (8004b08 <HAL_RCC_GetSysClockFreq+0x180>)
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80049d0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80049d2:	4b4d      	ldr	r3, [pc, #308]	@ (8004b08 <HAL_RCC_GetSysClockFreq+0x180>)
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d028      	beq.n	8004a30 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049de:	4b4a      	ldr	r3, [pc, #296]	@ (8004b08 <HAL_RCC_GetSysClockFreq+0x180>)
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	099b      	lsrs	r3, r3, #6
 80049e4:	2200      	movs	r2, #0
 80049e6:	623b      	str	r3, [r7, #32]
 80049e8:	627a      	str	r2, [r7, #36]	@ 0x24
 80049ea:	6a3b      	ldr	r3, [r7, #32]
 80049ec:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80049f0:	2100      	movs	r1, #0
 80049f2:	4b47      	ldr	r3, [pc, #284]	@ (8004b10 <HAL_RCC_GetSysClockFreq+0x188>)
 80049f4:	fb03 f201 	mul.w	r2, r3, r1
 80049f8:	2300      	movs	r3, #0
 80049fa:	fb00 f303 	mul.w	r3, r0, r3
 80049fe:	4413      	add	r3, r2
 8004a00:	4a43      	ldr	r2, [pc, #268]	@ (8004b10 <HAL_RCC_GetSysClockFreq+0x188>)
 8004a02:	fba0 1202 	umull	r1, r2, r0, r2
 8004a06:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004a08:	460a      	mov	r2, r1
 8004a0a:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004a0c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004a0e:	4413      	add	r3, r2
 8004a10:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004a12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a14:	2200      	movs	r2, #0
 8004a16:	61bb      	str	r3, [r7, #24]
 8004a18:	61fa      	str	r2, [r7, #28]
 8004a1a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a1e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004a22:	f7fc f8bd 	bl	8000ba0 <__aeabi_uldivmod>
 8004a26:	4602      	mov	r2, r0
 8004a28:	460b      	mov	r3, r1
 8004a2a:	4613      	mov	r3, r2
 8004a2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004a2e:	e053      	b.n	8004ad8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a30:	4b35      	ldr	r3, [pc, #212]	@ (8004b08 <HAL_RCC_GetSysClockFreq+0x180>)
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	099b      	lsrs	r3, r3, #6
 8004a36:	2200      	movs	r2, #0
 8004a38:	613b      	str	r3, [r7, #16]
 8004a3a:	617a      	str	r2, [r7, #20]
 8004a3c:	693b      	ldr	r3, [r7, #16]
 8004a3e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004a42:	f04f 0b00 	mov.w	fp, #0
 8004a46:	4652      	mov	r2, sl
 8004a48:	465b      	mov	r3, fp
 8004a4a:	f04f 0000 	mov.w	r0, #0
 8004a4e:	f04f 0100 	mov.w	r1, #0
 8004a52:	0159      	lsls	r1, r3, #5
 8004a54:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a58:	0150      	lsls	r0, r2, #5
 8004a5a:	4602      	mov	r2, r0
 8004a5c:	460b      	mov	r3, r1
 8004a5e:	ebb2 080a 	subs.w	r8, r2, sl
 8004a62:	eb63 090b 	sbc.w	r9, r3, fp
 8004a66:	f04f 0200 	mov.w	r2, #0
 8004a6a:	f04f 0300 	mov.w	r3, #0
 8004a6e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004a72:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004a76:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004a7a:	ebb2 0408 	subs.w	r4, r2, r8
 8004a7e:	eb63 0509 	sbc.w	r5, r3, r9
 8004a82:	f04f 0200 	mov.w	r2, #0
 8004a86:	f04f 0300 	mov.w	r3, #0
 8004a8a:	00eb      	lsls	r3, r5, #3
 8004a8c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004a90:	00e2      	lsls	r2, r4, #3
 8004a92:	4614      	mov	r4, r2
 8004a94:	461d      	mov	r5, r3
 8004a96:	eb14 030a 	adds.w	r3, r4, sl
 8004a9a:	603b      	str	r3, [r7, #0]
 8004a9c:	eb45 030b 	adc.w	r3, r5, fp
 8004aa0:	607b      	str	r3, [r7, #4]
 8004aa2:	f04f 0200 	mov.w	r2, #0
 8004aa6:	f04f 0300 	mov.w	r3, #0
 8004aaa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004aae:	4629      	mov	r1, r5
 8004ab0:	028b      	lsls	r3, r1, #10
 8004ab2:	4621      	mov	r1, r4
 8004ab4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004ab8:	4621      	mov	r1, r4
 8004aba:	028a      	lsls	r2, r1, #10
 8004abc:	4610      	mov	r0, r2
 8004abe:	4619      	mov	r1, r3
 8004ac0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	60bb      	str	r3, [r7, #8]
 8004ac6:	60fa      	str	r2, [r7, #12]
 8004ac8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004acc:	f7fc f868 	bl	8000ba0 <__aeabi_uldivmod>
 8004ad0:	4602      	mov	r2, r0
 8004ad2:	460b      	mov	r3, r1
 8004ad4:	4613      	mov	r3, r2
 8004ad6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004ad8:	4b0b      	ldr	r3, [pc, #44]	@ (8004b08 <HAL_RCC_GetSysClockFreq+0x180>)
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	0c1b      	lsrs	r3, r3, #16
 8004ade:	f003 0303 	and.w	r3, r3, #3
 8004ae2:	3301      	adds	r3, #1
 8004ae4:	005b      	lsls	r3, r3, #1
 8004ae6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8004ae8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004aea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004aec:	fbb2 f3f3 	udiv	r3, r2, r3
 8004af0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004af2:	e002      	b.n	8004afa <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004af4:	4b05      	ldr	r3, [pc, #20]	@ (8004b0c <HAL_RCC_GetSysClockFreq+0x184>)
 8004af6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004af8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004afa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004afc:	4618      	mov	r0, r3
 8004afe:	3740      	adds	r7, #64	@ 0x40
 8004b00:	46bd      	mov	sp, r7
 8004b02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b06:	bf00      	nop
 8004b08:	40023800 	.word	0x40023800
 8004b0c:	00f42400 	.word	0x00f42400
 8004b10:	017d7840 	.word	0x017d7840

08004b14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b14:	b480      	push	{r7}
 8004b16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b18:	4b03      	ldr	r3, [pc, #12]	@ (8004b28 <HAL_RCC_GetHCLKFreq+0x14>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
}
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b24:	4770      	bx	lr
 8004b26:	bf00      	nop
 8004b28:	20000130 	.word	0x20000130

08004b2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004b30:	f7ff fff0 	bl	8004b14 <HAL_RCC_GetHCLKFreq>
 8004b34:	4602      	mov	r2, r0
 8004b36:	4b05      	ldr	r3, [pc, #20]	@ (8004b4c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b38:	689b      	ldr	r3, [r3, #8]
 8004b3a:	0a9b      	lsrs	r3, r3, #10
 8004b3c:	f003 0307 	and.w	r3, r3, #7
 8004b40:	4903      	ldr	r1, [pc, #12]	@ (8004b50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b42:	5ccb      	ldrb	r3, [r1, r3]
 8004b44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b48:	4618      	mov	r0, r3
 8004b4a:	bd80      	pop	{r7, pc}
 8004b4c:	40023800 	.word	0x40023800
 8004b50:	08007490 	.word	0x08007490

08004b54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004b58:	f7ff ffdc 	bl	8004b14 <HAL_RCC_GetHCLKFreq>
 8004b5c:	4602      	mov	r2, r0
 8004b5e:	4b05      	ldr	r3, [pc, #20]	@ (8004b74 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004b60:	689b      	ldr	r3, [r3, #8]
 8004b62:	0b5b      	lsrs	r3, r3, #13
 8004b64:	f003 0307 	and.w	r3, r3, #7
 8004b68:	4903      	ldr	r1, [pc, #12]	@ (8004b78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b6a:	5ccb      	ldrb	r3, [r1, r3]
 8004b6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	bd80      	pop	{r7, pc}
 8004b74:	40023800 	.word	0x40023800
 8004b78:	08007490 	.word	0x08007490

08004b7c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b082      	sub	sp, #8
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d101      	bne.n	8004b8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	e042      	b.n	8004c14 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b94:	b2db      	uxtb	r3, r3
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d106      	bne.n	8004ba8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ba2:	6878      	ldr	r0, [r7, #4]
 8004ba4:	f7fd fe8c 	bl	80028c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2224      	movs	r2, #36	@ 0x24
 8004bac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	68da      	ldr	r2, [r3, #12]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004bbe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004bc0:	6878      	ldr	r0, [r7, #4]
 8004bc2:	f000 fdbd 	bl	8005740 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	691a      	ldr	r2, [r3, #16]
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004bd4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	695a      	ldr	r2, [r3, #20]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004be4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	68da      	ldr	r2, [r3, #12]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004bf4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2220      	movs	r2, #32
 8004c00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2220      	movs	r2, #32
 8004c08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004c12:	2300      	movs	r3, #0
}
 8004c14:	4618      	mov	r0, r3
 8004c16:	3708      	adds	r7, #8
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bd80      	pop	{r7, pc}

08004c1c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b08a      	sub	sp, #40	@ 0x28
 8004c20:	af02      	add	r7, sp, #8
 8004c22:	60f8      	str	r0, [r7, #12]
 8004c24:	60b9      	str	r1, [r7, #8]
 8004c26:	603b      	str	r3, [r7, #0]
 8004c28:	4613      	mov	r3, r2
 8004c2a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c36:	b2db      	uxtb	r3, r3
 8004c38:	2b20      	cmp	r3, #32
 8004c3a:	d175      	bne.n	8004d28 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d002      	beq.n	8004c48 <HAL_UART_Transmit+0x2c>
 8004c42:	88fb      	ldrh	r3, [r7, #6]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d101      	bne.n	8004c4c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004c48:	2301      	movs	r3, #1
 8004c4a:	e06e      	b.n	8004d2a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	2221      	movs	r2, #33	@ 0x21
 8004c56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004c5a:	f7fd ffbb 	bl	8002bd4 <HAL_GetTick>
 8004c5e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	88fa      	ldrh	r2, [r7, #6]
 8004c64:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	88fa      	ldrh	r2, [r7, #6]
 8004c6a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	689b      	ldr	r3, [r3, #8]
 8004c70:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c74:	d108      	bne.n	8004c88 <HAL_UART_Transmit+0x6c>
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	691b      	ldr	r3, [r3, #16]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d104      	bne.n	8004c88 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004c7e:	2300      	movs	r3, #0
 8004c80:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	61bb      	str	r3, [r7, #24]
 8004c86:	e003      	b.n	8004c90 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004c90:	e02e      	b.n	8004cf0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	9300      	str	r3, [sp, #0]
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	2180      	movs	r1, #128	@ 0x80
 8004c9c:	68f8      	ldr	r0, [r7, #12]
 8004c9e:	f000 fb1f 	bl	80052e0 <UART_WaitOnFlagUntilTimeout>
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d005      	beq.n	8004cb4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	2220      	movs	r2, #32
 8004cac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004cb0:	2303      	movs	r3, #3
 8004cb2:	e03a      	b.n	8004d2a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004cb4:	69fb      	ldr	r3, [r7, #28]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d10b      	bne.n	8004cd2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004cba:	69bb      	ldr	r3, [r7, #24]
 8004cbc:	881b      	ldrh	r3, [r3, #0]
 8004cbe:	461a      	mov	r2, r3
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004cc8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004cca:	69bb      	ldr	r3, [r7, #24]
 8004ccc:	3302      	adds	r3, #2
 8004cce:	61bb      	str	r3, [r7, #24]
 8004cd0:	e007      	b.n	8004ce2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004cd2:	69fb      	ldr	r3, [r7, #28]
 8004cd4:	781a      	ldrb	r2, [r3, #0]
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004cdc:	69fb      	ldr	r3, [r7, #28]
 8004cde:	3301      	adds	r3, #1
 8004ce0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004ce6:	b29b      	uxth	r3, r3
 8004ce8:	3b01      	subs	r3, #1
 8004cea:	b29a      	uxth	r2, r3
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004cf4:	b29b      	uxth	r3, r3
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d1cb      	bne.n	8004c92 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	9300      	str	r3, [sp, #0]
 8004cfe:	697b      	ldr	r3, [r7, #20]
 8004d00:	2200      	movs	r2, #0
 8004d02:	2140      	movs	r1, #64	@ 0x40
 8004d04:	68f8      	ldr	r0, [r7, #12]
 8004d06:	f000 faeb 	bl	80052e0 <UART_WaitOnFlagUntilTimeout>
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d005      	beq.n	8004d1c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	2220      	movs	r2, #32
 8004d14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004d18:	2303      	movs	r3, #3
 8004d1a:	e006      	b.n	8004d2a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	2220      	movs	r2, #32
 8004d20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004d24:	2300      	movs	r3, #0
 8004d26:	e000      	b.n	8004d2a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004d28:	2302      	movs	r3, #2
  }
}
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	3720      	adds	r7, #32
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bd80      	pop	{r7, pc}

08004d32 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004d32:	b580      	push	{r7, lr}
 8004d34:	b084      	sub	sp, #16
 8004d36:	af00      	add	r7, sp, #0
 8004d38:	60f8      	str	r0, [r7, #12]
 8004d3a:	60b9      	str	r1, [r7, #8]
 8004d3c:	4613      	mov	r3, r2
 8004d3e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004d46:	b2db      	uxtb	r3, r3
 8004d48:	2b20      	cmp	r3, #32
 8004d4a:	d112      	bne.n	8004d72 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d002      	beq.n	8004d58 <HAL_UART_Receive_IT+0x26>
 8004d52:	88fb      	ldrh	r3, [r7, #6]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d101      	bne.n	8004d5c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004d58:	2301      	movs	r3, #1
 8004d5a:	e00b      	b.n	8004d74 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004d62:	88fb      	ldrh	r3, [r7, #6]
 8004d64:	461a      	mov	r2, r3
 8004d66:	68b9      	ldr	r1, [r7, #8]
 8004d68:	68f8      	ldr	r0, [r7, #12]
 8004d6a:	f000 fb12 	bl	8005392 <UART_Start_Receive_IT>
 8004d6e:	4603      	mov	r3, r0
 8004d70:	e000      	b.n	8004d74 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004d72:	2302      	movs	r3, #2
  }
}
 8004d74:	4618      	mov	r0, r3
 8004d76:	3710      	adds	r7, #16
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	bd80      	pop	{r7, pc}

08004d7c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b0ba      	sub	sp, #232	@ 0xe8
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	68db      	ldr	r3, [r3, #12]
 8004d94:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	695b      	ldr	r3, [r3, #20]
 8004d9e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004da2:	2300      	movs	r3, #0
 8004da4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004da8:	2300      	movs	r3, #0
 8004daa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004dae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004db2:	f003 030f 	and.w	r3, r3, #15
 8004db6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004dba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d10f      	bne.n	8004de2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004dc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004dc6:	f003 0320 	and.w	r3, r3, #32
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d009      	beq.n	8004de2 <HAL_UART_IRQHandler+0x66>
 8004dce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004dd2:	f003 0320 	and.w	r3, r3, #32
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d003      	beq.n	8004de2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004dda:	6878      	ldr	r0, [r7, #4]
 8004ddc:	f000 fbf2 	bl	80055c4 <UART_Receive_IT>
      return;
 8004de0:	e25b      	b.n	800529a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004de2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	f000 80de 	beq.w	8004fa8 <HAL_UART_IRQHandler+0x22c>
 8004dec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004df0:	f003 0301 	and.w	r3, r3, #1
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d106      	bne.n	8004e06 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004df8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004dfc:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	f000 80d1 	beq.w	8004fa8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004e06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e0a:	f003 0301 	and.w	r3, r3, #1
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d00b      	beq.n	8004e2a <HAL_UART_IRQHandler+0xae>
 8004e12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d005      	beq.n	8004e2a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e22:	f043 0201 	orr.w	r2, r3, #1
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004e2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e2e:	f003 0304 	and.w	r3, r3, #4
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d00b      	beq.n	8004e4e <HAL_UART_IRQHandler+0xd2>
 8004e36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004e3a:	f003 0301 	and.w	r3, r3, #1
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d005      	beq.n	8004e4e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e46:	f043 0202 	orr.w	r2, r3, #2
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004e4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e52:	f003 0302 	and.w	r3, r3, #2
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d00b      	beq.n	8004e72 <HAL_UART_IRQHandler+0xf6>
 8004e5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004e5e:	f003 0301 	and.w	r3, r3, #1
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d005      	beq.n	8004e72 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e6a:	f043 0204 	orr.w	r2, r3, #4
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004e72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e76:	f003 0308 	and.w	r3, r3, #8
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d011      	beq.n	8004ea2 <HAL_UART_IRQHandler+0x126>
 8004e7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e82:	f003 0320 	and.w	r3, r3, #32
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d105      	bne.n	8004e96 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004e8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004e8e:	f003 0301 	and.w	r3, r3, #1
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d005      	beq.n	8004ea2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e9a:	f043 0208 	orr.w	r2, r3, #8
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	f000 81f2 	beq.w	8005290 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004eac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004eb0:	f003 0320 	and.w	r3, r3, #32
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d008      	beq.n	8004eca <HAL_UART_IRQHandler+0x14e>
 8004eb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ebc:	f003 0320 	and.w	r3, r3, #32
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d002      	beq.n	8004eca <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004ec4:	6878      	ldr	r0, [r7, #4]
 8004ec6:	f000 fb7d 	bl	80055c4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	695b      	ldr	r3, [r3, #20]
 8004ed0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ed4:	2b40      	cmp	r3, #64	@ 0x40
 8004ed6:	bf0c      	ite	eq
 8004ed8:	2301      	moveq	r3, #1
 8004eda:	2300      	movne	r3, #0
 8004edc:	b2db      	uxtb	r3, r3
 8004ede:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ee6:	f003 0308 	and.w	r3, r3, #8
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d103      	bne.n	8004ef6 <HAL_UART_IRQHandler+0x17a>
 8004eee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d04f      	beq.n	8004f96 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	f000 fa85 	bl	8005406 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	695b      	ldr	r3, [r3, #20]
 8004f02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f06:	2b40      	cmp	r3, #64	@ 0x40
 8004f08:	d141      	bne.n	8004f8e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	3314      	adds	r3, #20
 8004f10:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f14:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004f18:	e853 3f00 	ldrex	r3, [r3]
 8004f1c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004f20:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004f24:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004f28:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	3314      	adds	r3, #20
 8004f32:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004f36:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004f3a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f3e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004f42:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004f46:	e841 2300 	strex	r3, r2, [r1]
 8004f4a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004f4e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d1d9      	bne.n	8004f0a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d013      	beq.n	8004f86 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f62:	4a7e      	ldr	r2, [pc, #504]	@ (800515c <HAL_UART_IRQHandler+0x3e0>)
 8004f64:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	f7fd ffe3 	bl	8002f36 <HAL_DMA_Abort_IT>
 8004f70:	4603      	mov	r3, r0
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d016      	beq.n	8004fa4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f7c:	687a      	ldr	r2, [r7, #4]
 8004f7e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004f80:	4610      	mov	r0, r2
 8004f82:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f84:	e00e      	b.n	8004fa4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004f86:	6878      	ldr	r0, [r7, #4]
 8004f88:	f000 f994 	bl	80052b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f8c:	e00a      	b.n	8004fa4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	f000 f990 	bl	80052b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f94:	e006      	b.n	8004fa4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004f96:	6878      	ldr	r0, [r7, #4]
 8004f98:	f000 f98c 	bl	80052b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004fa2:	e175      	b.n	8005290 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fa4:	bf00      	nop
    return;
 8004fa6:	e173      	b.n	8005290 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fac:	2b01      	cmp	r3, #1
 8004fae:	f040 814f 	bne.w	8005250 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004fb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004fb6:	f003 0310 	and.w	r3, r3, #16
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	f000 8148 	beq.w	8005250 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004fc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004fc4:	f003 0310 	and.w	r3, r3, #16
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	f000 8141 	beq.w	8005250 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004fce:	2300      	movs	r3, #0
 8004fd0:	60bb      	str	r3, [r7, #8]
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	60bb      	str	r3, [r7, #8]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	60bb      	str	r3, [r7, #8]
 8004fe2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	695b      	ldr	r3, [r3, #20]
 8004fea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fee:	2b40      	cmp	r3, #64	@ 0x40
 8004ff0:	f040 80b6 	bne.w	8005160 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005000:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005004:	2b00      	cmp	r3, #0
 8005006:	f000 8145 	beq.w	8005294 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800500e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005012:	429a      	cmp	r2, r3
 8005014:	f080 813e 	bcs.w	8005294 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800501e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005024:	69db      	ldr	r3, [r3, #28]
 8005026:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800502a:	f000 8088 	beq.w	800513e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	330c      	adds	r3, #12
 8005034:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005038:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800503c:	e853 3f00 	ldrex	r3, [r3]
 8005040:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005044:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005048:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800504c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	330c      	adds	r3, #12
 8005056:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800505a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800505e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005062:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005066:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800506a:	e841 2300 	strex	r3, r2, [r1]
 800506e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005072:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005076:	2b00      	cmp	r3, #0
 8005078:	d1d9      	bne.n	800502e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	3314      	adds	r3, #20
 8005080:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005082:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005084:	e853 3f00 	ldrex	r3, [r3]
 8005088:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800508a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800508c:	f023 0301 	bic.w	r3, r3, #1
 8005090:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	3314      	adds	r3, #20
 800509a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800509e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80050a2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050a4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80050a6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80050aa:	e841 2300 	strex	r3, r2, [r1]
 80050ae:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80050b0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d1e1      	bne.n	800507a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	3314      	adds	r3, #20
 80050bc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050be:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80050c0:	e853 3f00 	ldrex	r3, [r3]
 80050c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80050c6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80050c8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80050cc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	3314      	adds	r3, #20
 80050d6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80050da:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80050dc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050de:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80050e0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80050e2:	e841 2300 	strex	r3, r2, [r1]
 80050e6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80050e8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d1e3      	bne.n	80050b6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2220      	movs	r2, #32
 80050f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2200      	movs	r2, #0
 80050fa:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	330c      	adds	r3, #12
 8005102:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005104:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005106:	e853 3f00 	ldrex	r3, [r3]
 800510a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800510c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800510e:	f023 0310 	bic.w	r3, r3, #16
 8005112:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	330c      	adds	r3, #12
 800511c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005120:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005122:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005124:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005126:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005128:	e841 2300 	strex	r3, r2, [r1]
 800512c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800512e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005130:	2b00      	cmp	r3, #0
 8005132:	d1e3      	bne.n	80050fc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005138:	4618      	mov	r0, r3
 800513a:	f7fd fe8c 	bl	8002e56 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2202      	movs	r2, #2
 8005142:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800514c:	b29b      	uxth	r3, r3
 800514e:	1ad3      	subs	r3, r2, r3
 8005150:	b29b      	uxth	r3, r3
 8005152:	4619      	mov	r1, r3
 8005154:	6878      	ldr	r0, [r7, #4]
 8005156:	f000 f8b7 	bl	80052c8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800515a:	e09b      	b.n	8005294 <HAL_UART_IRQHandler+0x518>
 800515c:	080054cd 	.word	0x080054cd
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005168:	b29b      	uxth	r3, r3
 800516a:	1ad3      	subs	r3, r2, r3
 800516c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005174:	b29b      	uxth	r3, r3
 8005176:	2b00      	cmp	r3, #0
 8005178:	f000 808e 	beq.w	8005298 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800517c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005180:	2b00      	cmp	r3, #0
 8005182:	f000 8089 	beq.w	8005298 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	330c      	adds	r3, #12
 800518c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800518e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005190:	e853 3f00 	ldrex	r3, [r3]
 8005194:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005196:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005198:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800519c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	330c      	adds	r3, #12
 80051a6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80051aa:	647a      	str	r2, [r7, #68]	@ 0x44
 80051ac:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051ae:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80051b0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80051b2:	e841 2300 	strex	r3, r2, [r1]
 80051b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80051b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d1e3      	bne.n	8005186 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	3314      	adds	r3, #20
 80051c4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051c8:	e853 3f00 	ldrex	r3, [r3]
 80051cc:	623b      	str	r3, [r7, #32]
   return(result);
 80051ce:	6a3b      	ldr	r3, [r7, #32]
 80051d0:	f023 0301 	bic.w	r3, r3, #1
 80051d4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	3314      	adds	r3, #20
 80051de:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80051e2:	633a      	str	r2, [r7, #48]	@ 0x30
 80051e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051e6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80051e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80051ea:	e841 2300 	strex	r3, r2, [r1]
 80051ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80051f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d1e3      	bne.n	80051be <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2220      	movs	r2, #32
 80051fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2200      	movs	r2, #0
 8005202:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	330c      	adds	r3, #12
 800520a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800520c:	693b      	ldr	r3, [r7, #16]
 800520e:	e853 3f00 	ldrex	r3, [r3]
 8005212:	60fb      	str	r3, [r7, #12]
   return(result);
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	f023 0310 	bic.w	r3, r3, #16
 800521a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	330c      	adds	r3, #12
 8005224:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005228:	61fa      	str	r2, [r7, #28]
 800522a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800522c:	69b9      	ldr	r1, [r7, #24]
 800522e:	69fa      	ldr	r2, [r7, #28]
 8005230:	e841 2300 	strex	r3, r2, [r1]
 8005234:	617b      	str	r3, [r7, #20]
   return(result);
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d1e3      	bne.n	8005204 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2202      	movs	r2, #2
 8005240:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005242:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005246:	4619      	mov	r1, r3
 8005248:	6878      	ldr	r0, [r7, #4]
 800524a:	f000 f83d 	bl	80052c8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800524e:	e023      	b.n	8005298 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005250:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005254:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005258:	2b00      	cmp	r3, #0
 800525a:	d009      	beq.n	8005270 <HAL_UART_IRQHandler+0x4f4>
 800525c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005260:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005264:	2b00      	cmp	r3, #0
 8005266:	d003      	beq.n	8005270 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005268:	6878      	ldr	r0, [r7, #4]
 800526a:	f000 f943 	bl	80054f4 <UART_Transmit_IT>
    return;
 800526e:	e014      	b.n	800529a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005270:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005274:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005278:	2b00      	cmp	r3, #0
 800527a:	d00e      	beq.n	800529a <HAL_UART_IRQHandler+0x51e>
 800527c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005280:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005284:	2b00      	cmp	r3, #0
 8005286:	d008      	beq.n	800529a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005288:	6878      	ldr	r0, [r7, #4]
 800528a:	f000 f983 	bl	8005594 <UART_EndTransmit_IT>
    return;
 800528e:	e004      	b.n	800529a <HAL_UART_IRQHandler+0x51e>
    return;
 8005290:	bf00      	nop
 8005292:	e002      	b.n	800529a <HAL_UART_IRQHandler+0x51e>
      return;
 8005294:	bf00      	nop
 8005296:	e000      	b.n	800529a <HAL_UART_IRQHandler+0x51e>
      return;
 8005298:	bf00      	nop
  }
}
 800529a:	37e8      	adds	r7, #232	@ 0xe8
 800529c:	46bd      	mov	sp, r7
 800529e:	bd80      	pop	{r7, pc}

080052a0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80052a0:	b480      	push	{r7}
 80052a2:	b083      	sub	sp, #12
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80052a8:	bf00      	nop
 80052aa:	370c      	adds	r7, #12
 80052ac:	46bd      	mov	sp, r7
 80052ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b2:	4770      	bx	lr

080052b4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80052b4:	b480      	push	{r7}
 80052b6:	b083      	sub	sp, #12
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80052bc:	bf00      	nop
 80052be:	370c      	adds	r7, #12
 80052c0:	46bd      	mov	sp, r7
 80052c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c6:	4770      	bx	lr

080052c8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80052c8:	b480      	push	{r7}
 80052ca:	b083      	sub	sp, #12
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
 80052d0:	460b      	mov	r3, r1
 80052d2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80052d4:	bf00      	nop
 80052d6:	370c      	adds	r7, #12
 80052d8:	46bd      	mov	sp, r7
 80052da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052de:	4770      	bx	lr

080052e0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b086      	sub	sp, #24
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	60f8      	str	r0, [r7, #12]
 80052e8:	60b9      	str	r1, [r7, #8]
 80052ea:	603b      	str	r3, [r7, #0]
 80052ec:	4613      	mov	r3, r2
 80052ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052f0:	e03b      	b.n	800536a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052f2:	6a3b      	ldr	r3, [r7, #32]
 80052f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052f8:	d037      	beq.n	800536a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052fa:	f7fd fc6b 	bl	8002bd4 <HAL_GetTick>
 80052fe:	4602      	mov	r2, r0
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	1ad3      	subs	r3, r2, r3
 8005304:	6a3a      	ldr	r2, [r7, #32]
 8005306:	429a      	cmp	r2, r3
 8005308:	d302      	bcc.n	8005310 <UART_WaitOnFlagUntilTimeout+0x30>
 800530a:	6a3b      	ldr	r3, [r7, #32]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d101      	bne.n	8005314 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005310:	2303      	movs	r3, #3
 8005312:	e03a      	b.n	800538a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	68db      	ldr	r3, [r3, #12]
 800531a:	f003 0304 	and.w	r3, r3, #4
 800531e:	2b00      	cmp	r3, #0
 8005320:	d023      	beq.n	800536a <UART_WaitOnFlagUntilTimeout+0x8a>
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	2b80      	cmp	r3, #128	@ 0x80
 8005326:	d020      	beq.n	800536a <UART_WaitOnFlagUntilTimeout+0x8a>
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	2b40      	cmp	r3, #64	@ 0x40
 800532c:	d01d      	beq.n	800536a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f003 0308 	and.w	r3, r3, #8
 8005338:	2b08      	cmp	r3, #8
 800533a:	d116      	bne.n	800536a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800533c:	2300      	movs	r3, #0
 800533e:	617b      	str	r3, [r7, #20]
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	617b      	str	r3, [r7, #20]
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	617b      	str	r3, [r7, #20]
 8005350:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005352:	68f8      	ldr	r0, [r7, #12]
 8005354:	f000 f857 	bl	8005406 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	2208      	movs	r2, #8
 800535c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	2200      	movs	r2, #0
 8005362:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005366:	2301      	movs	r3, #1
 8005368:	e00f      	b.n	800538a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	681a      	ldr	r2, [r3, #0]
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	4013      	ands	r3, r2
 8005374:	68ba      	ldr	r2, [r7, #8]
 8005376:	429a      	cmp	r2, r3
 8005378:	bf0c      	ite	eq
 800537a:	2301      	moveq	r3, #1
 800537c:	2300      	movne	r3, #0
 800537e:	b2db      	uxtb	r3, r3
 8005380:	461a      	mov	r2, r3
 8005382:	79fb      	ldrb	r3, [r7, #7]
 8005384:	429a      	cmp	r2, r3
 8005386:	d0b4      	beq.n	80052f2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005388:	2300      	movs	r3, #0
}
 800538a:	4618      	mov	r0, r3
 800538c:	3718      	adds	r7, #24
 800538e:	46bd      	mov	sp, r7
 8005390:	bd80      	pop	{r7, pc}

08005392 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005392:	b480      	push	{r7}
 8005394:	b085      	sub	sp, #20
 8005396:	af00      	add	r7, sp, #0
 8005398:	60f8      	str	r0, [r7, #12]
 800539a:	60b9      	str	r1, [r7, #8]
 800539c:	4613      	mov	r3, r2
 800539e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	68ba      	ldr	r2, [r7, #8]
 80053a4:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	88fa      	ldrh	r2, [r7, #6]
 80053aa:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	88fa      	ldrh	r2, [r7, #6]
 80053b0:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	2200      	movs	r2, #0
 80053b6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	2222      	movs	r2, #34	@ 0x22
 80053bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	691b      	ldr	r3, [r3, #16]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d007      	beq.n	80053d8 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	68da      	ldr	r2, [r3, #12]
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80053d6:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	695a      	ldr	r2, [r3, #20]
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f042 0201 	orr.w	r2, r2, #1
 80053e6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	68da      	ldr	r2, [r3, #12]
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f042 0220 	orr.w	r2, r2, #32
 80053f6:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80053f8:	2300      	movs	r3, #0
}
 80053fa:	4618      	mov	r0, r3
 80053fc:	3714      	adds	r7, #20
 80053fe:	46bd      	mov	sp, r7
 8005400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005404:	4770      	bx	lr

08005406 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005406:	b480      	push	{r7}
 8005408:	b095      	sub	sp, #84	@ 0x54
 800540a:	af00      	add	r7, sp, #0
 800540c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	330c      	adds	r3, #12
 8005414:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005416:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005418:	e853 3f00 	ldrex	r3, [r3]
 800541c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800541e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005420:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005424:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	330c      	adds	r3, #12
 800542c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800542e:	643a      	str	r2, [r7, #64]	@ 0x40
 8005430:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005432:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005434:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005436:	e841 2300 	strex	r3, r2, [r1]
 800543a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800543c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800543e:	2b00      	cmp	r3, #0
 8005440:	d1e5      	bne.n	800540e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	3314      	adds	r3, #20
 8005448:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800544a:	6a3b      	ldr	r3, [r7, #32]
 800544c:	e853 3f00 	ldrex	r3, [r3]
 8005450:	61fb      	str	r3, [r7, #28]
   return(result);
 8005452:	69fb      	ldr	r3, [r7, #28]
 8005454:	f023 0301 	bic.w	r3, r3, #1
 8005458:	64bb      	str	r3, [r7, #72]	@ 0x48
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	3314      	adds	r3, #20
 8005460:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005462:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005464:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005466:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005468:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800546a:	e841 2300 	strex	r3, r2, [r1]
 800546e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005472:	2b00      	cmp	r3, #0
 8005474:	d1e5      	bne.n	8005442 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800547a:	2b01      	cmp	r3, #1
 800547c:	d119      	bne.n	80054b2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	330c      	adds	r3, #12
 8005484:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	e853 3f00 	ldrex	r3, [r3]
 800548c:	60bb      	str	r3, [r7, #8]
   return(result);
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	f023 0310 	bic.w	r3, r3, #16
 8005494:	647b      	str	r3, [r7, #68]	@ 0x44
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	330c      	adds	r3, #12
 800549c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800549e:	61ba      	str	r2, [r7, #24]
 80054a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054a2:	6979      	ldr	r1, [r7, #20]
 80054a4:	69ba      	ldr	r2, [r7, #24]
 80054a6:	e841 2300 	strex	r3, r2, [r1]
 80054aa:	613b      	str	r3, [r7, #16]
   return(result);
 80054ac:	693b      	ldr	r3, [r7, #16]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d1e5      	bne.n	800547e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2220      	movs	r2, #32
 80054b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2200      	movs	r2, #0
 80054be:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80054c0:	bf00      	nop
 80054c2:	3754      	adds	r7, #84	@ 0x54
 80054c4:	46bd      	mov	sp, r7
 80054c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ca:	4770      	bx	lr

080054cc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b084      	sub	sp, #16
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054d8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	2200      	movs	r2, #0
 80054de:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	2200      	movs	r2, #0
 80054e4:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80054e6:	68f8      	ldr	r0, [r7, #12]
 80054e8:	f7ff fee4 	bl	80052b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80054ec:	bf00      	nop
 80054ee:	3710      	adds	r7, #16
 80054f0:	46bd      	mov	sp, r7
 80054f2:	bd80      	pop	{r7, pc}

080054f4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b085      	sub	sp, #20
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005502:	b2db      	uxtb	r3, r3
 8005504:	2b21      	cmp	r3, #33	@ 0x21
 8005506:	d13e      	bne.n	8005586 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	689b      	ldr	r3, [r3, #8]
 800550c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005510:	d114      	bne.n	800553c <UART_Transmit_IT+0x48>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	691b      	ldr	r3, [r3, #16]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d110      	bne.n	800553c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6a1b      	ldr	r3, [r3, #32]
 800551e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	881b      	ldrh	r3, [r3, #0]
 8005524:	461a      	mov	r2, r3
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800552e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6a1b      	ldr	r3, [r3, #32]
 8005534:	1c9a      	adds	r2, r3, #2
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	621a      	str	r2, [r3, #32]
 800553a:	e008      	b.n	800554e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6a1b      	ldr	r3, [r3, #32]
 8005540:	1c59      	adds	r1, r3, #1
 8005542:	687a      	ldr	r2, [r7, #4]
 8005544:	6211      	str	r1, [r2, #32]
 8005546:	781a      	ldrb	r2, [r3, #0]
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005552:	b29b      	uxth	r3, r3
 8005554:	3b01      	subs	r3, #1
 8005556:	b29b      	uxth	r3, r3
 8005558:	687a      	ldr	r2, [r7, #4]
 800555a:	4619      	mov	r1, r3
 800555c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800555e:	2b00      	cmp	r3, #0
 8005560:	d10f      	bne.n	8005582 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	68da      	ldr	r2, [r3, #12]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005570:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	68da      	ldr	r2, [r3, #12]
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005580:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005582:	2300      	movs	r3, #0
 8005584:	e000      	b.n	8005588 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005586:	2302      	movs	r3, #2
  }
}
 8005588:	4618      	mov	r0, r3
 800558a:	3714      	adds	r7, #20
 800558c:	46bd      	mov	sp, r7
 800558e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005592:	4770      	bx	lr

08005594 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b082      	sub	sp, #8
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	68da      	ldr	r2, [r3, #12]
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80055aa:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2220      	movs	r2, #32
 80055b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80055b4:	6878      	ldr	r0, [r7, #4]
 80055b6:	f7ff fe73 	bl	80052a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80055ba:	2300      	movs	r3, #0
}
 80055bc:	4618      	mov	r0, r3
 80055be:	3708      	adds	r7, #8
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bd80      	pop	{r7, pc}

080055c4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b08c      	sub	sp, #48	@ 0x30
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80055d2:	b2db      	uxtb	r3, r3
 80055d4:	2b22      	cmp	r3, #34	@ 0x22
 80055d6:	f040 80ae 	bne.w	8005736 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	689b      	ldr	r3, [r3, #8]
 80055de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80055e2:	d117      	bne.n	8005614 <UART_Receive_IT+0x50>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	691b      	ldr	r3, [r3, #16]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d113      	bne.n	8005614 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80055ec:	2300      	movs	r3, #0
 80055ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055f4:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	685b      	ldr	r3, [r3, #4]
 80055fc:	b29b      	uxth	r3, r3
 80055fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005602:	b29a      	uxth	r2, r3
 8005604:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005606:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800560c:	1c9a      	adds	r2, r3, #2
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	629a      	str	r2, [r3, #40]	@ 0x28
 8005612:	e026      	b.n	8005662 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005618:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800561a:	2300      	movs	r3, #0
 800561c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	689b      	ldr	r3, [r3, #8]
 8005622:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005626:	d007      	beq.n	8005638 <UART_Receive_IT+0x74>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	689b      	ldr	r3, [r3, #8]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d10a      	bne.n	8005646 <UART_Receive_IT+0x82>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	691b      	ldr	r3, [r3, #16]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d106      	bne.n	8005646 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	685b      	ldr	r3, [r3, #4]
 800563e:	b2da      	uxtb	r2, r3
 8005640:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005642:	701a      	strb	r2, [r3, #0]
 8005644:	e008      	b.n	8005658 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	685b      	ldr	r3, [r3, #4]
 800564c:	b2db      	uxtb	r3, r3
 800564e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005652:	b2da      	uxtb	r2, r3
 8005654:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005656:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800565c:	1c5a      	adds	r2, r3, #1
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005666:	b29b      	uxth	r3, r3
 8005668:	3b01      	subs	r3, #1
 800566a:	b29b      	uxth	r3, r3
 800566c:	687a      	ldr	r2, [r7, #4]
 800566e:	4619      	mov	r1, r3
 8005670:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005672:	2b00      	cmp	r3, #0
 8005674:	d15d      	bne.n	8005732 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	68da      	ldr	r2, [r3, #12]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f022 0220 	bic.w	r2, r2, #32
 8005684:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	68da      	ldr	r2, [r3, #12]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005694:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	695a      	ldr	r2, [r3, #20]
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f022 0201 	bic.w	r2, r2, #1
 80056a4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2220      	movs	r2, #32
 80056aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2200      	movs	r2, #0
 80056b2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056b8:	2b01      	cmp	r3, #1
 80056ba:	d135      	bne.n	8005728 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2200      	movs	r2, #0
 80056c0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	330c      	adds	r3, #12
 80056c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056ca:	697b      	ldr	r3, [r7, #20]
 80056cc:	e853 3f00 	ldrex	r3, [r3]
 80056d0:	613b      	str	r3, [r7, #16]
   return(result);
 80056d2:	693b      	ldr	r3, [r7, #16]
 80056d4:	f023 0310 	bic.w	r3, r3, #16
 80056d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	330c      	adds	r3, #12
 80056e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056e2:	623a      	str	r2, [r7, #32]
 80056e4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056e6:	69f9      	ldr	r1, [r7, #28]
 80056e8:	6a3a      	ldr	r2, [r7, #32]
 80056ea:	e841 2300 	strex	r3, r2, [r1]
 80056ee:	61bb      	str	r3, [r7, #24]
   return(result);
 80056f0:	69bb      	ldr	r3, [r7, #24]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d1e5      	bne.n	80056c2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f003 0310 	and.w	r3, r3, #16
 8005700:	2b10      	cmp	r3, #16
 8005702:	d10a      	bne.n	800571a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005704:	2300      	movs	r3, #0
 8005706:	60fb      	str	r3, [r7, #12]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	60fb      	str	r3, [r7, #12]
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	685b      	ldr	r3, [r3, #4]
 8005716:	60fb      	str	r3, [r7, #12]
 8005718:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800571e:	4619      	mov	r1, r3
 8005720:	6878      	ldr	r0, [r7, #4]
 8005722:	f7ff fdd1 	bl	80052c8 <HAL_UARTEx_RxEventCallback>
 8005726:	e002      	b.n	800572e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005728:	6878      	ldr	r0, [r7, #4]
 800572a:	f7fb fd39 	bl	80011a0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800572e:	2300      	movs	r3, #0
 8005730:	e002      	b.n	8005738 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005732:	2300      	movs	r3, #0
 8005734:	e000      	b.n	8005738 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005736:	2302      	movs	r3, #2
  }
}
 8005738:	4618      	mov	r0, r3
 800573a:	3730      	adds	r7, #48	@ 0x30
 800573c:	46bd      	mov	sp, r7
 800573e:	bd80      	pop	{r7, pc}

08005740 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005740:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005744:	b0c0      	sub	sp, #256	@ 0x100
 8005746:	af00      	add	r7, sp, #0
 8005748:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800574c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	691b      	ldr	r3, [r3, #16]
 8005754:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005758:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800575c:	68d9      	ldr	r1, [r3, #12]
 800575e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005762:	681a      	ldr	r2, [r3, #0]
 8005764:	ea40 0301 	orr.w	r3, r0, r1
 8005768:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800576a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800576e:	689a      	ldr	r2, [r3, #8]
 8005770:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005774:	691b      	ldr	r3, [r3, #16]
 8005776:	431a      	orrs	r2, r3
 8005778:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800577c:	695b      	ldr	r3, [r3, #20]
 800577e:	431a      	orrs	r2, r3
 8005780:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005784:	69db      	ldr	r3, [r3, #28]
 8005786:	4313      	orrs	r3, r2
 8005788:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800578c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	68db      	ldr	r3, [r3, #12]
 8005794:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005798:	f021 010c 	bic.w	r1, r1, #12
 800579c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057a0:	681a      	ldr	r2, [r3, #0]
 80057a2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80057a6:	430b      	orrs	r3, r1
 80057a8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80057aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	695b      	ldr	r3, [r3, #20]
 80057b2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80057b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057ba:	6999      	ldr	r1, [r3, #24]
 80057bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057c0:	681a      	ldr	r2, [r3, #0]
 80057c2:	ea40 0301 	orr.w	r3, r0, r1
 80057c6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80057c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057cc:	681a      	ldr	r2, [r3, #0]
 80057ce:	4b8f      	ldr	r3, [pc, #572]	@ (8005a0c <UART_SetConfig+0x2cc>)
 80057d0:	429a      	cmp	r2, r3
 80057d2:	d005      	beq.n	80057e0 <UART_SetConfig+0xa0>
 80057d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057d8:	681a      	ldr	r2, [r3, #0]
 80057da:	4b8d      	ldr	r3, [pc, #564]	@ (8005a10 <UART_SetConfig+0x2d0>)
 80057dc:	429a      	cmp	r2, r3
 80057de:	d104      	bne.n	80057ea <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80057e0:	f7ff f9b8 	bl	8004b54 <HAL_RCC_GetPCLK2Freq>
 80057e4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80057e8:	e003      	b.n	80057f2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80057ea:	f7ff f99f 	bl	8004b2c <HAL_RCC_GetPCLK1Freq>
 80057ee:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80057f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057f6:	69db      	ldr	r3, [r3, #28]
 80057f8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80057fc:	f040 810c 	bne.w	8005a18 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005800:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005804:	2200      	movs	r2, #0
 8005806:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800580a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800580e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005812:	4622      	mov	r2, r4
 8005814:	462b      	mov	r3, r5
 8005816:	1891      	adds	r1, r2, r2
 8005818:	65b9      	str	r1, [r7, #88]	@ 0x58
 800581a:	415b      	adcs	r3, r3
 800581c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800581e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005822:	4621      	mov	r1, r4
 8005824:	eb12 0801 	adds.w	r8, r2, r1
 8005828:	4629      	mov	r1, r5
 800582a:	eb43 0901 	adc.w	r9, r3, r1
 800582e:	f04f 0200 	mov.w	r2, #0
 8005832:	f04f 0300 	mov.w	r3, #0
 8005836:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800583a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800583e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005842:	4690      	mov	r8, r2
 8005844:	4699      	mov	r9, r3
 8005846:	4623      	mov	r3, r4
 8005848:	eb18 0303 	adds.w	r3, r8, r3
 800584c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005850:	462b      	mov	r3, r5
 8005852:	eb49 0303 	adc.w	r3, r9, r3
 8005856:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800585a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	2200      	movs	r2, #0
 8005862:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005866:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800586a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800586e:	460b      	mov	r3, r1
 8005870:	18db      	adds	r3, r3, r3
 8005872:	653b      	str	r3, [r7, #80]	@ 0x50
 8005874:	4613      	mov	r3, r2
 8005876:	eb42 0303 	adc.w	r3, r2, r3
 800587a:	657b      	str	r3, [r7, #84]	@ 0x54
 800587c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005880:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005884:	f7fb f98c 	bl	8000ba0 <__aeabi_uldivmod>
 8005888:	4602      	mov	r2, r0
 800588a:	460b      	mov	r3, r1
 800588c:	4b61      	ldr	r3, [pc, #388]	@ (8005a14 <UART_SetConfig+0x2d4>)
 800588e:	fba3 2302 	umull	r2, r3, r3, r2
 8005892:	095b      	lsrs	r3, r3, #5
 8005894:	011c      	lsls	r4, r3, #4
 8005896:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800589a:	2200      	movs	r2, #0
 800589c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80058a0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80058a4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80058a8:	4642      	mov	r2, r8
 80058aa:	464b      	mov	r3, r9
 80058ac:	1891      	adds	r1, r2, r2
 80058ae:	64b9      	str	r1, [r7, #72]	@ 0x48
 80058b0:	415b      	adcs	r3, r3
 80058b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80058b4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80058b8:	4641      	mov	r1, r8
 80058ba:	eb12 0a01 	adds.w	sl, r2, r1
 80058be:	4649      	mov	r1, r9
 80058c0:	eb43 0b01 	adc.w	fp, r3, r1
 80058c4:	f04f 0200 	mov.w	r2, #0
 80058c8:	f04f 0300 	mov.w	r3, #0
 80058cc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80058d0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80058d4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80058d8:	4692      	mov	sl, r2
 80058da:	469b      	mov	fp, r3
 80058dc:	4643      	mov	r3, r8
 80058de:	eb1a 0303 	adds.w	r3, sl, r3
 80058e2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80058e6:	464b      	mov	r3, r9
 80058e8:	eb4b 0303 	adc.w	r3, fp, r3
 80058ec:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80058f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058f4:	685b      	ldr	r3, [r3, #4]
 80058f6:	2200      	movs	r2, #0
 80058f8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80058fc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005900:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005904:	460b      	mov	r3, r1
 8005906:	18db      	adds	r3, r3, r3
 8005908:	643b      	str	r3, [r7, #64]	@ 0x40
 800590a:	4613      	mov	r3, r2
 800590c:	eb42 0303 	adc.w	r3, r2, r3
 8005910:	647b      	str	r3, [r7, #68]	@ 0x44
 8005912:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005916:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800591a:	f7fb f941 	bl	8000ba0 <__aeabi_uldivmod>
 800591e:	4602      	mov	r2, r0
 8005920:	460b      	mov	r3, r1
 8005922:	4611      	mov	r1, r2
 8005924:	4b3b      	ldr	r3, [pc, #236]	@ (8005a14 <UART_SetConfig+0x2d4>)
 8005926:	fba3 2301 	umull	r2, r3, r3, r1
 800592a:	095b      	lsrs	r3, r3, #5
 800592c:	2264      	movs	r2, #100	@ 0x64
 800592e:	fb02 f303 	mul.w	r3, r2, r3
 8005932:	1acb      	subs	r3, r1, r3
 8005934:	00db      	lsls	r3, r3, #3
 8005936:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800593a:	4b36      	ldr	r3, [pc, #216]	@ (8005a14 <UART_SetConfig+0x2d4>)
 800593c:	fba3 2302 	umull	r2, r3, r3, r2
 8005940:	095b      	lsrs	r3, r3, #5
 8005942:	005b      	lsls	r3, r3, #1
 8005944:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005948:	441c      	add	r4, r3
 800594a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800594e:	2200      	movs	r2, #0
 8005950:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005954:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005958:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800595c:	4642      	mov	r2, r8
 800595e:	464b      	mov	r3, r9
 8005960:	1891      	adds	r1, r2, r2
 8005962:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005964:	415b      	adcs	r3, r3
 8005966:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005968:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800596c:	4641      	mov	r1, r8
 800596e:	1851      	adds	r1, r2, r1
 8005970:	6339      	str	r1, [r7, #48]	@ 0x30
 8005972:	4649      	mov	r1, r9
 8005974:	414b      	adcs	r3, r1
 8005976:	637b      	str	r3, [r7, #52]	@ 0x34
 8005978:	f04f 0200 	mov.w	r2, #0
 800597c:	f04f 0300 	mov.w	r3, #0
 8005980:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005984:	4659      	mov	r1, fp
 8005986:	00cb      	lsls	r3, r1, #3
 8005988:	4651      	mov	r1, sl
 800598a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800598e:	4651      	mov	r1, sl
 8005990:	00ca      	lsls	r2, r1, #3
 8005992:	4610      	mov	r0, r2
 8005994:	4619      	mov	r1, r3
 8005996:	4603      	mov	r3, r0
 8005998:	4642      	mov	r2, r8
 800599a:	189b      	adds	r3, r3, r2
 800599c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80059a0:	464b      	mov	r3, r9
 80059a2:	460a      	mov	r2, r1
 80059a4:	eb42 0303 	adc.w	r3, r2, r3
 80059a8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80059ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059b0:	685b      	ldr	r3, [r3, #4]
 80059b2:	2200      	movs	r2, #0
 80059b4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80059b8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80059bc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80059c0:	460b      	mov	r3, r1
 80059c2:	18db      	adds	r3, r3, r3
 80059c4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80059c6:	4613      	mov	r3, r2
 80059c8:	eb42 0303 	adc.w	r3, r2, r3
 80059cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80059ce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80059d2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80059d6:	f7fb f8e3 	bl	8000ba0 <__aeabi_uldivmod>
 80059da:	4602      	mov	r2, r0
 80059dc:	460b      	mov	r3, r1
 80059de:	4b0d      	ldr	r3, [pc, #52]	@ (8005a14 <UART_SetConfig+0x2d4>)
 80059e0:	fba3 1302 	umull	r1, r3, r3, r2
 80059e4:	095b      	lsrs	r3, r3, #5
 80059e6:	2164      	movs	r1, #100	@ 0x64
 80059e8:	fb01 f303 	mul.w	r3, r1, r3
 80059ec:	1ad3      	subs	r3, r2, r3
 80059ee:	00db      	lsls	r3, r3, #3
 80059f0:	3332      	adds	r3, #50	@ 0x32
 80059f2:	4a08      	ldr	r2, [pc, #32]	@ (8005a14 <UART_SetConfig+0x2d4>)
 80059f4:	fba2 2303 	umull	r2, r3, r2, r3
 80059f8:	095b      	lsrs	r3, r3, #5
 80059fa:	f003 0207 	and.w	r2, r3, #7
 80059fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4422      	add	r2, r4
 8005a06:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005a08:	e106      	b.n	8005c18 <UART_SetConfig+0x4d8>
 8005a0a:	bf00      	nop
 8005a0c:	40011000 	.word	0x40011000
 8005a10:	40011400 	.word	0x40011400
 8005a14:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005a18:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005a22:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005a26:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005a2a:	4642      	mov	r2, r8
 8005a2c:	464b      	mov	r3, r9
 8005a2e:	1891      	adds	r1, r2, r2
 8005a30:	6239      	str	r1, [r7, #32]
 8005a32:	415b      	adcs	r3, r3
 8005a34:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a36:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005a3a:	4641      	mov	r1, r8
 8005a3c:	1854      	adds	r4, r2, r1
 8005a3e:	4649      	mov	r1, r9
 8005a40:	eb43 0501 	adc.w	r5, r3, r1
 8005a44:	f04f 0200 	mov.w	r2, #0
 8005a48:	f04f 0300 	mov.w	r3, #0
 8005a4c:	00eb      	lsls	r3, r5, #3
 8005a4e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005a52:	00e2      	lsls	r2, r4, #3
 8005a54:	4614      	mov	r4, r2
 8005a56:	461d      	mov	r5, r3
 8005a58:	4643      	mov	r3, r8
 8005a5a:	18e3      	adds	r3, r4, r3
 8005a5c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005a60:	464b      	mov	r3, r9
 8005a62:	eb45 0303 	adc.w	r3, r5, r3
 8005a66:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005a6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a6e:	685b      	ldr	r3, [r3, #4]
 8005a70:	2200      	movs	r2, #0
 8005a72:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005a76:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005a7a:	f04f 0200 	mov.w	r2, #0
 8005a7e:	f04f 0300 	mov.w	r3, #0
 8005a82:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005a86:	4629      	mov	r1, r5
 8005a88:	008b      	lsls	r3, r1, #2
 8005a8a:	4621      	mov	r1, r4
 8005a8c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a90:	4621      	mov	r1, r4
 8005a92:	008a      	lsls	r2, r1, #2
 8005a94:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005a98:	f7fb f882 	bl	8000ba0 <__aeabi_uldivmod>
 8005a9c:	4602      	mov	r2, r0
 8005a9e:	460b      	mov	r3, r1
 8005aa0:	4b60      	ldr	r3, [pc, #384]	@ (8005c24 <UART_SetConfig+0x4e4>)
 8005aa2:	fba3 2302 	umull	r2, r3, r3, r2
 8005aa6:	095b      	lsrs	r3, r3, #5
 8005aa8:	011c      	lsls	r4, r3, #4
 8005aaa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005aae:	2200      	movs	r2, #0
 8005ab0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005ab4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005ab8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005abc:	4642      	mov	r2, r8
 8005abe:	464b      	mov	r3, r9
 8005ac0:	1891      	adds	r1, r2, r2
 8005ac2:	61b9      	str	r1, [r7, #24]
 8005ac4:	415b      	adcs	r3, r3
 8005ac6:	61fb      	str	r3, [r7, #28]
 8005ac8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005acc:	4641      	mov	r1, r8
 8005ace:	1851      	adds	r1, r2, r1
 8005ad0:	6139      	str	r1, [r7, #16]
 8005ad2:	4649      	mov	r1, r9
 8005ad4:	414b      	adcs	r3, r1
 8005ad6:	617b      	str	r3, [r7, #20]
 8005ad8:	f04f 0200 	mov.w	r2, #0
 8005adc:	f04f 0300 	mov.w	r3, #0
 8005ae0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005ae4:	4659      	mov	r1, fp
 8005ae6:	00cb      	lsls	r3, r1, #3
 8005ae8:	4651      	mov	r1, sl
 8005aea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005aee:	4651      	mov	r1, sl
 8005af0:	00ca      	lsls	r2, r1, #3
 8005af2:	4610      	mov	r0, r2
 8005af4:	4619      	mov	r1, r3
 8005af6:	4603      	mov	r3, r0
 8005af8:	4642      	mov	r2, r8
 8005afa:	189b      	adds	r3, r3, r2
 8005afc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005b00:	464b      	mov	r3, r9
 8005b02:	460a      	mov	r2, r1
 8005b04:	eb42 0303 	adc.w	r3, r2, r3
 8005b08:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005b0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b10:	685b      	ldr	r3, [r3, #4]
 8005b12:	2200      	movs	r2, #0
 8005b14:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005b16:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005b18:	f04f 0200 	mov.w	r2, #0
 8005b1c:	f04f 0300 	mov.w	r3, #0
 8005b20:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005b24:	4649      	mov	r1, r9
 8005b26:	008b      	lsls	r3, r1, #2
 8005b28:	4641      	mov	r1, r8
 8005b2a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005b2e:	4641      	mov	r1, r8
 8005b30:	008a      	lsls	r2, r1, #2
 8005b32:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005b36:	f7fb f833 	bl	8000ba0 <__aeabi_uldivmod>
 8005b3a:	4602      	mov	r2, r0
 8005b3c:	460b      	mov	r3, r1
 8005b3e:	4611      	mov	r1, r2
 8005b40:	4b38      	ldr	r3, [pc, #224]	@ (8005c24 <UART_SetConfig+0x4e4>)
 8005b42:	fba3 2301 	umull	r2, r3, r3, r1
 8005b46:	095b      	lsrs	r3, r3, #5
 8005b48:	2264      	movs	r2, #100	@ 0x64
 8005b4a:	fb02 f303 	mul.w	r3, r2, r3
 8005b4e:	1acb      	subs	r3, r1, r3
 8005b50:	011b      	lsls	r3, r3, #4
 8005b52:	3332      	adds	r3, #50	@ 0x32
 8005b54:	4a33      	ldr	r2, [pc, #204]	@ (8005c24 <UART_SetConfig+0x4e4>)
 8005b56:	fba2 2303 	umull	r2, r3, r2, r3
 8005b5a:	095b      	lsrs	r3, r3, #5
 8005b5c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005b60:	441c      	add	r4, r3
 8005b62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b66:	2200      	movs	r2, #0
 8005b68:	673b      	str	r3, [r7, #112]	@ 0x70
 8005b6a:	677a      	str	r2, [r7, #116]	@ 0x74
 8005b6c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005b70:	4642      	mov	r2, r8
 8005b72:	464b      	mov	r3, r9
 8005b74:	1891      	adds	r1, r2, r2
 8005b76:	60b9      	str	r1, [r7, #8]
 8005b78:	415b      	adcs	r3, r3
 8005b7a:	60fb      	str	r3, [r7, #12]
 8005b7c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005b80:	4641      	mov	r1, r8
 8005b82:	1851      	adds	r1, r2, r1
 8005b84:	6039      	str	r1, [r7, #0]
 8005b86:	4649      	mov	r1, r9
 8005b88:	414b      	adcs	r3, r1
 8005b8a:	607b      	str	r3, [r7, #4]
 8005b8c:	f04f 0200 	mov.w	r2, #0
 8005b90:	f04f 0300 	mov.w	r3, #0
 8005b94:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005b98:	4659      	mov	r1, fp
 8005b9a:	00cb      	lsls	r3, r1, #3
 8005b9c:	4651      	mov	r1, sl
 8005b9e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005ba2:	4651      	mov	r1, sl
 8005ba4:	00ca      	lsls	r2, r1, #3
 8005ba6:	4610      	mov	r0, r2
 8005ba8:	4619      	mov	r1, r3
 8005baa:	4603      	mov	r3, r0
 8005bac:	4642      	mov	r2, r8
 8005bae:	189b      	adds	r3, r3, r2
 8005bb0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005bb2:	464b      	mov	r3, r9
 8005bb4:	460a      	mov	r2, r1
 8005bb6:	eb42 0303 	adc.w	r3, r2, r3
 8005bba:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005bbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bc0:	685b      	ldr	r3, [r3, #4]
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	663b      	str	r3, [r7, #96]	@ 0x60
 8005bc6:	667a      	str	r2, [r7, #100]	@ 0x64
 8005bc8:	f04f 0200 	mov.w	r2, #0
 8005bcc:	f04f 0300 	mov.w	r3, #0
 8005bd0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005bd4:	4649      	mov	r1, r9
 8005bd6:	008b      	lsls	r3, r1, #2
 8005bd8:	4641      	mov	r1, r8
 8005bda:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005bde:	4641      	mov	r1, r8
 8005be0:	008a      	lsls	r2, r1, #2
 8005be2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005be6:	f7fa ffdb 	bl	8000ba0 <__aeabi_uldivmod>
 8005bea:	4602      	mov	r2, r0
 8005bec:	460b      	mov	r3, r1
 8005bee:	4b0d      	ldr	r3, [pc, #52]	@ (8005c24 <UART_SetConfig+0x4e4>)
 8005bf0:	fba3 1302 	umull	r1, r3, r3, r2
 8005bf4:	095b      	lsrs	r3, r3, #5
 8005bf6:	2164      	movs	r1, #100	@ 0x64
 8005bf8:	fb01 f303 	mul.w	r3, r1, r3
 8005bfc:	1ad3      	subs	r3, r2, r3
 8005bfe:	011b      	lsls	r3, r3, #4
 8005c00:	3332      	adds	r3, #50	@ 0x32
 8005c02:	4a08      	ldr	r2, [pc, #32]	@ (8005c24 <UART_SetConfig+0x4e4>)
 8005c04:	fba2 2303 	umull	r2, r3, r2, r3
 8005c08:	095b      	lsrs	r3, r3, #5
 8005c0a:	f003 020f 	and.w	r2, r3, #15
 8005c0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	4422      	add	r2, r4
 8005c16:	609a      	str	r2, [r3, #8]
}
 8005c18:	bf00      	nop
 8005c1a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c24:	51eb851f 	.word	0x51eb851f

08005c28 <memset>:
 8005c28:	4402      	add	r2, r0
 8005c2a:	4603      	mov	r3, r0
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d100      	bne.n	8005c32 <memset+0xa>
 8005c30:	4770      	bx	lr
 8005c32:	f803 1b01 	strb.w	r1, [r3], #1
 8005c36:	e7f9      	b.n	8005c2c <memset+0x4>

08005c38 <__errno>:
 8005c38:	4b01      	ldr	r3, [pc, #4]	@ (8005c40 <__errno+0x8>)
 8005c3a:	6818      	ldr	r0, [r3, #0]
 8005c3c:	4770      	bx	lr
 8005c3e:	bf00      	nop
 8005c40:	2000013c 	.word	0x2000013c

08005c44 <__libc_init_array>:
 8005c44:	b570      	push	{r4, r5, r6, lr}
 8005c46:	4d0d      	ldr	r5, [pc, #52]	@ (8005c7c <__libc_init_array+0x38>)
 8005c48:	4c0d      	ldr	r4, [pc, #52]	@ (8005c80 <__libc_init_array+0x3c>)
 8005c4a:	1b64      	subs	r4, r4, r5
 8005c4c:	10a4      	asrs	r4, r4, #2
 8005c4e:	2600      	movs	r6, #0
 8005c50:	42a6      	cmp	r6, r4
 8005c52:	d109      	bne.n	8005c68 <__libc_init_array+0x24>
 8005c54:	4d0b      	ldr	r5, [pc, #44]	@ (8005c84 <__libc_init_array+0x40>)
 8005c56:	4c0c      	ldr	r4, [pc, #48]	@ (8005c88 <__libc_init_array+0x44>)
 8005c58:	f001 fc06 	bl	8007468 <_init>
 8005c5c:	1b64      	subs	r4, r4, r5
 8005c5e:	10a4      	asrs	r4, r4, #2
 8005c60:	2600      	movs	r6, #0
 8005c62:	42a6      	cmp	r6, r4
 8005c64:	d105      	bne.n	8005c72 <__libc_init_array+0x2e>
 8005c66:	bd70      	pop	{r4, r5, r6, pc}
 8005c68:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c6c:	4798      	blx	r3
 8005c6e:	3601      	adds	r6, #1
 8005c70:	e7ee      	b.n	8005c50 <__libc_init_array+0xc>
 8005c72:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c76:	4798      	blx	r3
 8005c78:	3601      	adds	r6, #1
 8005c7a:	e7f2      	b.n	8005c62 <__libc_init_array+0x1e>
 8005c7c:	080076e8 	.word	0x080076e8
 8005c80:	080076e8 	.word	0x080076e8
 8005c84:	080076e8 	.word	0x080076e8
 8005c88:	080076ec 	.word	0x080076ec

08005c8c <atan2>:
 8005c8c:	f000 bcd4 	b.w	8006638 <__ieee754_atan2>

08005c90 <sqrt>:
 8005c90:	b538      	push	{r3, r4, r5, lr}
 8005c92:	ed2d 8b02 	vpush	{d8}
 8005c96:	ec55 4b10 	vmov	r4, r5, d0
 8005c9a:	f000 fa6d 	bl	8006178 <__ieee754_sqrt>
 8005c9e:	4622      	mov	r2, r4
 8005ca0:	462b      	mov	r3, r5
 8005ca2:	4620      	mov	r0, r4
 8005ca4:	4629      	mov	r1, r5
 8005ca6:	eeb0 8a40 	vmov.f32	s16, s0
 8005caa:	eef0 8a60 	vmov.f32	s17, s1
 8005cae:	f7fa fee9 	bl	8000a84 <__aeabi_dcmpun>
 8005cb2:	b990      	cbnz	r0, 8005cda <sqrt+0x4a>
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	4620      	mov	r0, r4
 8005cba:	4629      	mov	r1, r5
 8005cbc:	f7fa feba 	bl	8000a34 <__aeabi_dcmplt>
 8005cc0:	b158      	cbz	r0, 8005cda <sqrt+0x4a>
 8005cc2:	f7ff ffb9 	bl	8005c38 <__errno>
 8005cc6:	2321      	movs	r3, #33	@ 0x21
 8005cc8:	6003      	str	r3, [r0, #0]
 8005cca:	2200      	movs	r2, #0
 8005ccc:	2300      	movs	r3, #0
 8005cce:	4610      	mov	r0, r2
 8005cd0:	4619      	mov	r1, r3
 8005cd2:	f7fa fd67 	bl	80007a4 <__aeabi_ddiv>
 8005cd6:	ec41 0b18 	vmov	d8, r0, r1
 8005cda:	eeb0 0a48 	vmov.f32	s0, s16
 8005cde:	eef0 0a68 	vmov.f32	s1, s17
 8005ce2:	ecbd 8b02 	vpop	{d8}
 8005ce6:	bd38      	pop	{r3, r4, r5, pc}

08005ce8 <atan>:
 8005ce8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cec:	ec55 4b10 	vmov	r4, r5, d0
 8005cf0:	4bbf      	ldr	r3, [pc, #764]	@ (8005ff0 <atan+0x308>)
 8005cf2:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8005cf6:	429e      	cmp	r6, r3
 8005cf8:	46ab      	mov	fp, r5
 8005cfa:	d918      	bls.n	8005d2e <atan+0x46>
 8005cfc:	4bbd      	ldr	r3, [pc, #756]	@ (8005ff4 <atan+0x30c>)
 8005cfe:	429e      	cmp	r6, r3
 8005d00:	d801      	bhi.n	8005d06 <atan+0x1e>
 8005d02:	d109      	bne.n	8005d18 <atan+0x30>
 8005d04:	b144      	cbz	r4, 8005d18 <atan+0x30>
 8005d06:	4622      	mov	r2, r4
 8005d08:	462b      	mov	r3, r5
 8005d0a:	4620      	mov	r0, r4
 8005d0c:	4629      	mov	r1, r5
 8005d0e:	f7fa fa69 	bl	80001e4 <__adddf3>
 8005d12:	4604      	mov	r4, r0
 8005d14:	460d      	mov	r5, r1
 8005d16:	e006      	b.n	8005d26 <atan+0x3e>
 8005d18:	f1bb 0f00 	cmp.w	fp, #0
 8005d1c:	f340 812b 	ble.w	8005f76 <atan+0x28e>
 8005d20:	a597      	add	r5, pc, #604	@ (adr r5, 8005f80 <atan+0x298>)
 8005d22:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005d26:	ec45 4b10 	vmov	d0, r4, r5
 8005d2a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d2e:	4bb2      	ldr	r3, [pc, #712]	@ (8005ff8 <atan+0x310>)
 8005d30:	429e      	cmp	r6, r3
 8005d32:	d813      	bhi.n	8005d5c <atan+0x74>
 8005d34:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 8005d38:	429e      	cmp	r6, r3
 8005d3a:	d80c      	bhi.n	8005d56 <atan+0x6e>
 8005d3c:	a392      	add	r3, pc, #584	@ (adr r3, 8005f88 <atan+0x2a0>)
 8005d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d42:	4620      	mov	r0, r4
 8005d44:	4629      	mov	r1, r5
 8005d46:	f7fa fa4d 	bl	80001e4 <__adddf3>
 8005d4a:	4bac      	ldr	r3, [pc, #688]	@ (8005ffc <atan+0x314>)
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	f7fa fe8f 	bl	8000a70 <__aeabi_dcmpgt>
 8005d52:	2800      	cmp	r0, #0
 8005d54:	d1e7      	bne.n	8005d26 <atan+0x3e>
 8005d56:	f04f 3aff 	mov.w	sl, #4294967295
 8005d5a:	e029      	b.n	8005db0 <atan+0xc8>
 8005d5c:	f000 f9b0 	bl	80060c0 <fabs>
 8005d60:	4ba7      	ldr	r3, [pc, #668]	@ (8006000 <atan+0x318>)
 8005d62:	429e      	cmp	r6, r3
 8005d64:	ec55 4b10 	vmov	r4, r5, d0
 8005d68:	f200 80bc 	bhi.w	8005ee4 <atan+0x1fc>
 8005d6c:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8005d70:	429e      	cmp	r6, r3
 8005d72:	f200 809e 	bhi.w	8005eb2 <atan+0x1ca>
 8005d76:	4622      	mov	r2, r4
 8005d78:	462b      	mov	r3, r5
 8005d7a:	4620      	mov	r0, r4
 8005d7c:	4629      	mov	r1, r5
 8005d7e:	f7fa fa31 	bl	80001e4 <__adddf3>
 8005d82:	4b9e      	ldr	r3, [pc, #632]	@ (8005ffc <atan+0x314>)
 8005d84:	2200      	movs	r2, #0
 8005d86:	f7fa fa2b 	bl	80001e0 <__aeabi_dsub>
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	4606      	mov	r6, r0
 8005d8e:	460f      	mov	r7, r1
 8005d90:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8005d94:	4620      	mov	r0, r4
 8005d96:	4629      	mov	r1, r5
 8005d98:	f7fa fa24 	bl	80001e4 <__adddf3>
 8005d9c:	4602      	mov	r2, r0
 8005d9e:	460b      	mov	r3, r1
 8005da0:	4630      	mov	r0, r6
 8005da2:	4639      	mov	r1, r7
 8005da4:	f7fa fcfe 	bl	80007a4 <__aeabi_ddiv>
 8005da8:	f04f 0a00 	mov.w	sl, #0
 8005dac:	4604      	mov	r4, r0
 8005dae:	460d      	mov	r5, r1
 8005db0:	4622      	mov	r2, r4
 8005db2:	462b      	mov	r3, r5
 8005db4:	4620      	mov	r0, r4
 8005db6:	4629      	mov	r1, r5
 8005db8:	f7fa fbca 	bl	8000550 <__aeabi_dmul>
 8005dbc:	4602      	mov	r2, r0
 8005dbe:	460b      	mov	r3, r1
 8005dc0:	4680      	mov	r8, r0
 8005dc2:	4689      	mov	r9, r1
 8005dc4:	f7fa fbc4 	bl	8000550 <__aeabi_dmul>
 8005dc8:	a371      	add	r3, pc, #452	@ (adr r3, 8005f90 <atan+0x2a8>)
 8005dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dce:	4606      	mov	r6, r0
 8005dd0:	460f      	mov	r7, r1
 8005dd2:	f7fa fbbd 	bl	8000550 <__aeabi_dmul>
 8005dd6:	a370      	add	r3, pc, #448	@ (adr r3, 8005f98 <atan+0x2b0>)
 8005dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ddc:	f7fa fa02 	bl	80001e4 <__adddf3>
 8005de0:	4632      	mov	r2, r6
 8005de2:	463b      	mov	r3, r7
 8005de4:	f7fa fbb4 	bl	8000550 <__aeabi_dmul>
 8005de8:	a36d      	add	r3, pc, #436	@ (adr r3, 8005fa0 <atan+0x2b8>)
 8005dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dee:	f7fa f9f9 	bl	80001e4 <__adddf3>
 8005df2:	4632      	mov	r2, r6
 8005df4:	463b      	mov	r3, r7
 8005df6:	f7fa fbab 	bl	8000550 <__aeabi_dmul>
 8005dfa:	a36b      	add	r3, pc, #428	@ (adr r3, 8005fa8 <atan+0x2c0>)
 8005dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e00:	f7fa f9f0 	bl	80001e4 <__adddf3>
 8005e04:	4632      	mov	r2, r6
 8005e06:	463b      	mov	r3, r7
 8005e08:	f7fa fba2 	bl	8000550 <__aeabi_dmul>
 8005e0c:	a368      	add	r3, pc, #416	@ (adr r3, 8005fb0 <atan+0x2c8>)
 8005e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e12:	f7fa f9e7 	bl	80001e4 <__adddf3>
 8005e16:	4632      	mov	r2, r6
 8005e18:	463b      	mov	r3, r7
 8005e1a:	f7fa fb99 	bl	8000550 <__aeabi_dmul>
 8005e1e:	a366      	add	r3, pc, #408	@ (adr r3, 8005fb8 <atan+0x2d0>)
 8005e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e24:	f7fa f9de 	bl	80001e4 <__adddf3>
 8005e28:	4642      	mov	r2, r8
 8005e2a:	464b      	mov	r3, r9
 8005e2c:	f7fa fb90 	bl	8000550 <__aeabi_dmul>
 8005e30:	a363      	add	r3, pc, #396	@ (adr r3, 8005fc0 <atan+0x2d8>)
 8005e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e36:	4680      	mov	r8, r0
 8005e38:	4689      	mov	r9, r1
 8005e3a:	4630      	mov	r0, r6
 8005e3c:	4639      	mov	r1, r7
 8005e3e:	f7fa fb87 	bl	8000550 <__aeabi_dmul>
 8005e42:	a361      	add	r3, pc, #388	@ (adr r3, 8005fc8 <atan+0x2e0>)
 8005e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e48:	f7fa f9ca 	bl	80001e0 <__aeabi_dsub>
 8005e4c:	4632      	mov	r2, r6
 8005e4e:	463b      	mov	r3, r7
 8005e50:	f7fa fb7e 	bl	8000550 <__aeabi_dmul>
 8005e54:	a35e      	add	r3, pc, #376	@ (adr r3, 8005fd0 <atan+0x2e8>)
 8005e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e5a:	f7fa f9c1 	bl	80001e0 <__aeabi_dsub>
 8005e5e:	4632      	mov	r2, r6
 8005e60:	463b      	mov	r3, r7
 8005e62:	f7fa fb75 	bl	8000550 <__aeabi_dmul>
 8005e66:	a35c      	add	r3, pc, #368	@ (adr r3, 8005fd8 <atan+0x2f0>)
 8005e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e6c:	f7fa f9b8 	bl	80001e0 <__aeabi_dsub>
 8005e70:	4632      	mov	r2, r6
 8005e72:	463b      	mov	r3, r7
 8005e74:	f7fa fb6c 	bl	8000550 <__aeabi_dmul>
 8005e78:	a359      	add	r3, pc, #356	@ (adr r3, 8005fe0 <atan+0x2f8>)
 8005e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e7e:	f7fa f9af 	bl	80001e0 <__aeabi_dsub>
 8005e82:	4632      	mov	r2, r6
 8005e84:	463b      	mov	r3, r7
 8005e86:	f7fa fb63 	bl	8000550 <__aeabi_dmul>
 8005e8a:	4602      	mov	r2, r0
 8005e8c:	460b      	mov	r3, r1
 8005e8e:	4640      	mov	r0, r8
 8005e90:	4649      	mov	r1, r9
 8005e92:	f7fa f9a7 	bl	80001e4 <__adddf3>
 8005e96:	4622      	mov	r2, r4
 8005e98:	462b      	mov	r3, r5
 8005e9a:	f7fa fb59 	bl	8000550 <__aeabi_dmul>
 8005e9e:	f1ba 3fff 	cmp.w	sl, #4294967295
 8005ea2:	4602      	mov	r2, r0
 8005ea4:	460b      	mov	r3, r1
 8005ea6:	d148      	bne.n	8005f3a <atan+0x252>
 8005ea8:	4620      	mov	r0, r4
 8005eaa:	4629      	mov	r1, r5
 8005eac:	f7fa f998 	bl	80001e0 <__aeabi_dsub>
 8005eb0:	e72f      	b.n	8005d12 <atan+0x2a>
 8005eb2:	4b52      	ldr	r3, [pc, #328]	@ (8005ffc <atan+0x314>)
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	4620      	mov	r0, r4
 8005eb8:	4629      	mov	r1, r5
 8005eba:	f7fa f991 	bl	80001e0 <__aeabi_dsub>
 8005ebe:	4b4f      	ldr	r3, [pc, #316]	@ (8005ffc <atan+0x314>)
 8005ec0:	4606      	mov	r6, r0
 8005ec2:	460f      	mov	r7, r1
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	4620      	mov	r0, r4
 8005ec8:	4629      	mov	r1, r5
 8005eca:	f7fa f98b 	bl	80001e4 <__adddf3>
 8005ece:	4602      	mov	r2, r0
 8005ed0:	460b      	mov	r3, r1
 8005ed2:	4630      	mov	r0, r6
 8005ed4:	4639      	mov	r1, r7
 8005ed6:	f7fa fc65 	bl	80007a4 <__aeabi_ddiv>
 8005eda:	f04f 0a01 	mov.w	sl, #1
 8005ede:	4604      	mov	r4, r0
 8005ee0:	460d      	mov	r5, r1
 8005ee2:	e765      	b.n	8005db0 <atan+0xc8>
 8005ee4:	4b47      	ldr	r3, [pc, #284]	@ (8006004 <atan+0x31c>)
 8005ee6:	429e      	cmp	r6, r3
 8005ee8:	d21c      	bcs.n	8005f24 <atan+0x23c>
 8005eea:	4b47      	ldr	r3, [pc, #284]	@ (8006008 <atan+0x320>)
 8005eec:	2200      	movs	r2, #0
 8005eee:	4620      	mov	r0, r4
 8005ef0:	4629      	mov	r1, r5
 8005ef2:	f7fa f975 	bl	80001e0 <__aeabi_dsub>
 8005ef6:	4b44      	ldr	r3, [pc, #272]	@ (8006008 <atan+0x320>)
 8005ef8:	4606      	mov	r6, r0
 8005efa:	460f      	mov	r7, r1
 8005efc:	2200      	movs	r2, #0
 8005efe:	4620      	mov	r0, r4
 8005f00:	4629      	mov	r1, r5
 8005f02:	f7fa fb25 	bl	8000550 <__aeabi_dmul>
 8005f06:	4b3d      	ldr	r3, [pc, #244]	@ (8005ffc <atan+0x314>)
 8005f08:	2200      	movs	r2, #0
 8005f0a:	f7fa f96b 	bl	80001e4 <__adddf3>
 8005f0e:	4602      	mov	r2, r0
 8005f10:	460b      	mov	r3, r1
 8005f12:	4630      	mov	r0, r6
 8005f14:	4639      	mov	r1, r7
 8005f16:	f7fa fc45 	bl	80007a4 <__aeabi_ddiv>
 8005f1a:	f04f 0a02 	mov.w	sl, #2
 8005f1e:	4604      	mov	r4, r0
 8005f20:	460d      	mov	r5, r1
 8005f22:	e745      	b.n	8005db0 <atan+0xc8>
 8005f24:	4622      	mov	r2, r4
 8005f26:	462b      	mov	r3, r5
 8005f28:	4938      	ldr	r1, [pc, #224]	@ (800600c <atan+0x324>)
 8005f2a:	2000      	movs	r0, #0
 8005f2c:	f7fa fc3a 	bl	80007a4 <__aeabi_ddiv>
 8005f30:	f04f 0a03 	mov.w	sl, #3
 8005f34:	4604      	mov	r4, r0
 8005f36:	460d      	mov	r5, r1
 8005f38:	e73a      	b.n	8005db0 <atan+0xc8>
 8005f3a:	4b35      	ldr	r3, [pc, #212]	@ (8006010 <atan+0x328>)
 8005f3c:	4e35      	ldr	r6, [pc, #212]	@ (8006014 <atan+0x32c>)
 8005f3e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f46:	f7fa f94b 	bl	80001e0 <__aeabi_dsub>
 8005f4a:	4622      	mov	r2, r4
 8005f4c:	462b      	mov	r3, r5
 8005f4e:	f7fa f947 	bl	80001e0 <__aeabi_dsub>
 8005f52:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8005f56:	4602      	mov	r2, r0
 8005f58:	460b      	mov	r3, r1
 8005f5a:	e9d6 0100 	ldrd	r0, r1, [r6]
 8005f5e:	f7fa f93f 	bl	80001e0 <__aeabi_dsub>
 8005f62:	f1bb 0f00 	cmp.w	fp, #0
 8005f66:	4604      	mov	r4, r0
 8005f68:	460d      	mov	r5, r1
 8005f6a:	f6bf aedc 	bge.w	8005d26 <atan+0x3e>
 8005f6e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005f72:	461d      	mov	r5, r3
 8005f74:	e6d7      	b.n	8005d26 <atan+0x3e>
 8005f76:	a51c      	add	r5, pc, #112	@ (adr r5, 8005fe8 <atan+0x300>)
 8005f78:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005f7c:	e6d3      	b.n	8005d26 <atan+0x3e>
 8005f7e:	bf00      	nop
 8005f80:	54442d18 	.word	0x54442d18
 8005f84:	3ff921fb 	.word	0x3ff921fb
 8005f88:	8800759c 	.word	0x8800759c
 8005f8c:	7e37e43c 	.word	0x7e37e43c
 8005f90:	e322da11 	.word	0xe322da11
 8005f94:	3f90ad3a 	.word	0x3f90ad3a
 8005f98:	24760deb 	.word	0x24760deb
 8005f9c:	3fa97b4b 	.word	0x3fa97b4b
 8005fa0:	a0d03d51 	.word	0xa0d03d51
 8005fa4:	3fb10d66 	.word	0x3fb10d66
 8005fa8:	c54c206e 	.word	0xc54c206e
 8005fac:	3fb745cd 	.word	0x3fb745cd
 8005fb0:	920083ff 	.word	0x920083ff
 8005fb4:	3fc24924 	.word	0x3fc24924
 8005fb8:	5555550d 	.word	0x5555550d
 8005fbc:	3fd55555 	.word	0x3fd55555
 8005fc0:	2c6a6c2f 	.word	0x2c6a6c2f
 8005fc4:	bfa2b444 	.word	0xbfa2b444
 8005fc8:	52defd9a 	.word	0x52defd9a
 8005fcc:	3fadde2d 	.word	0x3fadde2d
 8005fd0:	af749a6d 	.word	0xaf749a6d
 8005fd4:	3fb3b0f2 	.word	0x3fb3b0f2
 8005fd8:	fe231671 	.word	0xfe231671
 8005fdc:	3fbc71c6 	.word	0x3fbc71c6
 8005fe0:	9998ebc4 	.word	0x9998ebc4
 8005fe4:	3fc99999 	.word	0x3fc99999
 8005fe8:	54442d18 	.word	0x54442d18
 8005fec:	bff921fb 	.word	0xbff921fb
 8005ff0:	440fffff 	.word	0x440fffff
 8005ff4:	7ff00000 	.word	0x7ff00000
 8005ff8:	3fdbffff 	.word	0x3fdbffff
 8005ffc:	3ff00000 	.word	0x3ff00000
 8006000:	3ff2ffff 	.word	0x3ff2ffff
 8006004:	40038000 	.word	0x40038000
 8006008:	3ff80000 	.word	0x3ff80000
 800600c:	bff00000 	.word	0xbff00000
 8006010:	08007498 	.word	0x08007498
 8006014:	080074b8 	.word	0x080074b8

08006018 <cos>:
 8006018:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800601a:	ec53 2b10 	vmov	r2, r3, d0
 800601e:	4826      	ldr	r0, [pc, #152]	@ (80060b8 <cos+0xa0>)
 8006020:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006024:	4281      	cmp	r1, r0
 8006026:	d806      	bhi.n	8006036 <cos+0x1e>
 8006028:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 80060b0 <cos+0x98>
 800602c:	b005      	add	sp, #20
 800602e:	f85d eb04 	ldr.w	lr, [sp], #4
 8006032:	f000 b97d 	b.w	8006330 <__kernel_cos>
 8006036:	4821      	ldr	r0, [pc, #132]	@ (80060bc <cos+0xa4>)
 8006038:	4281      	cmp	r1, r0
 800603a:	d908      	bls.n	800604e <cos+0x36>
 800603c:	4610      	mov	r0, r2
 800603e:	4619      	mov	r1, r3
 8006040:	f7fa f8ce 	bl	80001e0 <__aeabi_dsub>
 8006044:	ec41 0b10 	vmov	d0, r0, r1
 8006048:	b005      	add	sp, #20
 800604a:	f85d fb04 	ldr.w	pc, [sp], #4
 800604e:	4668      	mov	r0, sp
 8006050:	f000 fbba 	bl	80067c8 <__ieee754_rem_pio2>
 8006054:	f000 0003 	and.w	r0, r0, #3
 8006058:	2801      	cmp	r0, #1
 800605a:	d00b      	beq.n	8006074 <cos+0x5c>
 800605c:	2802      	cmp	r0, #2
 800605e:	d015      	beq.n	800608c <cos+0x74>
 8006060:	b9d8      	cbnz	r0, 800609a <cos+0x82>
 8006062:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006066:	ed9d 0b00 	vldr	d0, [sp]
 800606a:	f000 f961 	bl	8006330 <__kernel_cos>
 800606e:	ec51 0b10 	vmov	r0, r1, d0
 8006072:	e7e7      	b.n	8006044 <cos+0x2c>
 8006074:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006078:	ed9d 0b00 	vldr	d0, [sp]
 800607c:	f000 fa20 	bl	80064c0 <__kernel_sin>
 8006080:	ec53 2b10 	vmov	r2, r3, d0
 8006084:	4610      	mov	r0, r2
 8006086:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800608a:	e7db      	b.n	8006044 <cos+0x2c>
 800608c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006090:	ed9d 0b00 	vldr	d0, [sp]
 8006094:	f000 f94c 	bl	8006330 <__kernel_cos>
 8006098:	e7f2      	b.n	8006080 <cos+0x68>
 800609a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800609e:	ed9d 0b00 	vldr	d0, [sp]
 80060a2:	2001      	movs	r0, #1
 80060a4:	f000 fa0c 	bl	80064c0 <__kernel_sin>
 80060a8:	e7e1      	b.n	800606e <cos+0x56>
 80060aa:	bf00      	nop
 80060ac:	f3af 8000 	nop.w
	...
 80060b8:	3fe921fb 	.word	0x3fe921fb
 80060bc:	7fefffff 	.word	0x7fefffff

080060c0 <fabs>:
 80060c0:	ec51 0b10 	vmov	r0, r1, d0
 80060c4:	4602      	mov	r2, r0
 80060c6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80060ca:	ec43 2b10 	vmov	d0, r2, r3
 80060ce:	4770      	bx	lr

080060d0 <sin>:
 80060d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80060d2:	ec53 2b10 	vmov	r2, r3, d0
 80060d6:	4826      	ldr	r0, [pc, #152]	@ (8006170 <sin+0xa0>)
 80060d8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80060dc:	4281      	cmp	r1, r0
 80060de:	d807      	bhi.n	80060f0 <sin+0x20>
 80060e0:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8006168 <sin+0x98>
 80060e4:	2000      	movs	r0, #0
 80060e6:	b005      	add	sp, #20
 80060e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80060ec:	f000 b9e8 	b.w	80064c0 <__kernel_sin>
 80060f0:	4820      	ldr	r0, [pc, #128]	@ (8006174 <sin+0xa4>)
 80060f2:	4281      	cmp	r1, r0
 80060f4:	d908      	bls.n	8006108 <sin+0x38>
 80060f6:	4610      	mov	r0, r2
 80060f8:	4619      	mov	r1, r3
 80060fa:	f7fa f871 	bl	80001e0 <__aeabi_dsub>
 80060fe:	ec41 0b10 	vmov	d0, r0, r1
 8006102:	b005      	add	sp, #20
 8006104:	f85d fb04 	ldr.w	pc, [sp], #4
 8006108:	4668      	mov	r0, sp
 800610a:	f000 fb5d 	bl	80067c8 <__ieee754_rem_pio2>
 800610e:	f000 0003 	and.w	r0, r0, #3
 8006112:	2801      	cmp	r0, #1
 8006114:	d00c      	beq.n	8006130 <sin+0x60>
 8006116:	2802      	cmp	r0, #2
 8006118:	d011      	beq.n	800613e <sin+0x6e>
 800611a:	b9e8      	cbnz	r0, 8006158 <sin+0x88>
 800611c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006120:	ed9d 0b00 	vldr	d0, [sp]
 8006124:	2001      	movs	r0, #1
 8006126:	f000 f9cb 	bl	80064c0 <__kernel_sin>
 800612a:	ec51 0b10 	vmov	r0, r1, d0
 800612e:	e7e6      	b.n	80060fe <sin+0x2e>
 8006130:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006134:	ed9d 0b00 	vldr	d0, [sp]
 8006138:	f000 f8fa 	bl	8006330 <__kernel_cos>
 800613c:	e7f5      	b.n	800612a <sin+0x5a>
 800613e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006142:	ed9d 0b00 	vldr	d0, [sp]
 8006146:	2001      	movs	r0, #1
 8006148:	f000 f9ba 	bl	80064c0 <__kernel_sin>
 800614c:	ec53 2b10 	vmov	r2, r3, d0
 8006150:	4610      	mov	r0, r2
 8006152:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8006156:	e7d2      	b.n	80060fe <sin+0x2e>
 8006158:	ed9d 1b02 	vldr	d1, [sp, #8]
 800615c:	ed9d 0b00 	vldr	d0, [sp]
 8006160:	f000 f8e6 	bl	8006330 <__kernel_cos>
 8006164:	e7f2      	b.n	800614c <sin+0x7c>
 8006166:	bf00      	nop
	...
 8006170:	3fe921fb 	.word	0x3fe921fb
 8006174:	7fefffff 	.word	0x7fefffff

08006178 <__ieee754_sqrt>:
 8006178:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800617c:	4a68      	ldr	r2, [pc, #416]	@ (8006320 <__ieee754_sqrt+0x1a8>)
 800617e:	ec55 4b10 	vmov	r4, r5, d0
 8006182:	43aa      	bics	r2, r5
 8006184:	462b      	mov	r3, r5
 8006186:	4621      	mov	r1, r4
 8006188:	d110      	bne.n	80061ac <__ieee754_sqrt+0x34>
 800618a:	4622      	mov	r2, r4
 800618c:	4620      	mov	r0, r4
 800618e:	4629      	mov	r1, r5
 8006190:	f7fa f9de 	bl	8000550 <__aeabi_dmul>
 8006194:	4602      	mov	r2, r0
 8006196:	460b      	mov	r3, r1
 8006198:	4620      	mov	r0, r4
 800619a:	4629      	mov	r1, r5
 800619c:	f7fa f822 	bl	80001e4 <__adddf3>
 80061a0:	4604      	mov	r4, r0
 80061a2:	460d      	mov	r5, r1
 80061a4:	ec45 4b10 	vmov	d0, r4, r5
 80061a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061ac:	2d00      	cmp	r5, #0
 80061ae:	dc0e      	bgt.n	80061ce <__ieee754_sqrt+0x56>
 80061b0:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 80061b4:	4322      	orrs	r2, r4
 80061b6:	d0f5      	beq.n	80061a4 <__ieee754_sqrt+0x2c>
 80061b8:	b19d      	cbz	r5, 80061e2 <__ieee754_sqrt+0x6a>
 80061ba:	4622      	mov	r2, r4
 80061bc:	4620      	mov	r0, r4
 80061be:	4629      	mov	r1, r5
 80061c0:	f7fa f80e 	bl	80001e0 <__aeabi_dsub>
 80061c4:	4602      	mov	r2, r0
 80061c6:	460b      	mov	r3, r1
 80061c8:	f7fa faec 	bl	80007a4 <__aeabi_ddiv>
 80061cc:	e7e8      	b.n	80061a0 <__ieee754_sqrt+0x28>
 80061ce:	152a      	asrs	r2, r5, #20
 80061d0:	d115      	bne.n	80061fe <__ieee754_sqrt+0x86>
 80061d2:	2000      	movs	r0, #0
 80061d4:	e009      	b.n	80061ea <__ieee754_sqrt+0x72>
 80061d6:	0acb      	lsrs	r3, r1, #11
 80061d8:	3a15      	subs	r2, #21
 80061da:	0549      	lsls	r1, r1, #21
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d0fa      	beq.n	80061d6 <__ieee754_sqrt+0x5e>
 80061e0:	e7f7      	b.n	80061d2 <__ieee754_sqrt+0x5a>
 80061e2:	462a      	mov	r2, r5
 80061e4:	e7fa      	b.n	80061dc <__ieee754_sqrt+0x64>
 80061e6:	005b      	lsls	r3, r3, #1
 80061e8:	3001      	adds	r0, #1
 80061ea:	02dc      	lsls	r4, r3, #11
 80061ec:	d5fb      	bpl.n	80061e6 <__ieee754_sqrt+0x6e>
 80061ee:	1e44      	subs	r4, r0, #1
 80061f0:	1b12      	subs	r2, r2, r4
 80061f2:	f1c0 0420 	rsb	r4, r0, #32
 80061f6:	fa21 f404 	lsr.w	r4, r1, r4
 80061fa:	4323      	orrs	r3, r4
 80061fc:	4081      	lsls	r1, r0
 80061fe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006202:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8006206:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800620a:	07d2      	lsls	r2, r2, #31
 800620c:	bf5c      	itt	pl
 800620e:	005b      	lslpl	r3, r3, #1
 8006210:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8006214:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006218:	bf58      	it	pl
 800621a:	0049      	lslpl	r1, r1, #1
 800621c:	2600      	movs	r6, #0
 800621e:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8006222:	106d      	asrs	r5, r5, #1
 8006224:	0049      	lsls	r1, r1, #1
 8006226:	2016      	movs	r0, #22
 8006228:	4632      	mov	r2, r6
 800622a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800622e:	1917      	adds	r7, r2, r4
 8006230:	429f      	cmp	r7, r3
 8006232:	bfde      	ittt	le
 8006234:	193a      	addle	r2, r7, r4
 8006236:	1bdb      	suble	r3, r3, r7
 8006238:	1936      	addle	r6, r6, r4
 800623a:	0fcf      	lsrs	r7, r1, #31
 800623c:	3801      	subs	r0, #1
 800623e:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8006242:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8006246:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800624a:	d1f0      	bne.n	800622e <__ieee754_sqrt+0xb6>
 800624c:	4604      	mov	r4, r0
 800624e:	2720      	movs	r7, #32
 8006250:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8006254:	429a      	cmp	r2, r3
 8006256:	eb00 0e0c 	add.w	lr, r0, ip
 800625a:	db02      	blt.n	8006262 <__ieee754_sqrt+0xea>
 800625c:	d113      	bne.n	8006286 <__ieee754_sqrt+0x10e>
 800625e:	458e      	cmp	lr, r1
 8006260:	d811      	bhi.n	8006286 <__ieee754_sqrt+0x10e>
 8006262:	f1be 0f00 	cmp.w	lr, #0
 8006266:	eb0e 000c 	add.w	r0, lr, ip
 800626a:	da42      	bge.n	80062f2 <__ieee754_sqrt+0x17a>
 800626c:	2800      	cmp	r0, #0
 800626e:	db40      	blt.n	80062f2 <__ieee754_sqrt+0x17a>
 8006270:	f102 0801 	add.w	r8, r2, #1
 8006274:	1a9b      	subs	r3, r3, r2
 8006276:	458e      	cmp	lr, r1
 8006278:	bf88      	it	hi
 800627a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800627e:	eba1 010e 	sub.w	r1, r1, lr
 8006282:	4464      	add	r4, ip
 8006284:	4642      	mov	r2, r8
 8006286:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800628a:	3f01      	subs	r7, #1
 800628c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8006290:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8006294:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8006298:	d1dc      	bne.n	8006254 <__ieee754_sqrt+0xdc>
 800629a:	4319      	orrs	r1, r3
 800629c:	d01b      	beq.n	80062d6 <__ieee754_sqrt+0x15e>
 800629e:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8006324 <__ieee754_sqrt+0x1ac>
 80062a2:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8006328 <__ieee754_sqrt+0x1b0>
 80062a6:	e9da 0100 	ldrd	r0, r1, [sl]
 80062aa:	e9db 2300 	ldrd	r2, r3, [fp]
 80062ae:	f7f9 ff97 	bl	80001e0 <__aeabi_dsub>
 80062b2:	e9da 8900 	ldrd	r8, r9, [sl]
 80062b6:	4602      	mov	r2, r0
 80062b8:	460b      	mov	r3, r1
 80062ba:	4640      	mov	r0, r8
 80062bc:	4649      	mov	r1, r9
 80062be:	f7fa fbc3 	bl	8000a48 <__aeabi_dcmple>
 80062c2:	b140      	cbz	r0, 80062d6 <__ieee754_sqrt+0x15e>
 80062c4:	f1b4 3fff 	cmp.w	r4, #4294967295
 80062c8:	e9da 0100 	ldrd	r0, r1, [sl]
 80062cc:	e9db 2300 	ldrd	r2, r3, [fp]
 80062d0:	d111      	bne.n	80062f6 <__ieee754_sqrt+0x17e>
 80062d2:	3601      	adds	r6, #1
 80062d4:	463c      	mov	r4, r7
 80062d6:	1072      	asrs	r2, r6, #1
 80062d8:	0863      	lsrs	r3, r4, #1
 80062da:	07f1      	lsls	r1, r6, #31
 80062dc:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 80062e0:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 80062e4:	bf48      	it	mi
 80062e6:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 80062ea:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 80062ee:	4618      	mov	r0, r3
 80062f0:	e756      	b.n	80061a0 <__ieee754_sqrt+0x28>
 80062f2:	4690      	mov	r8, r2
 80062f4:	e7be      	b.n	8006274 <__ieee754_sqrt+0xfc>
 80062f6:	f7f9 ff75 	bl	80001e4 <__adddf3>
 80062fa:	e9da 8900 	ldrd	r8, r9, [sl]
 80062fe:	4602      	mov	r2, r0
 8006300:	460b      	mov	r3, r1
 8006302:	4640      	mov	r0, r8
 8006304:	4649      	mov	r1, r9
 8006306:	f7fa fb95 	bl	8000a34 <__aeabi_dcmplt>
 800630a:	b120      	cbz	r0, 8006316 <__ieee754_sqrt+0x19e>
 800630c:	1ca0      	adds	r0, r4, #2
 800630e:	bf08      	it	eq
 8006310:	3601      	addeq	r6, #1
 8006312:	3402      	adds	r4, #2
 8006314:	e7df      	b.n	80062d6 <__ieee754_sqrt+0x15e>
 8006316:	1c63      	adds	r3, r4, #1
 8006318:	f023 0401 	bic.w	r4, r3, #1
 800631c:	e7db      	b.n	80062d6 <__ieee754_sqrt+0x15e>
 800631e:	bf00      	nop
 8006320:	7ff00000 	.word	0x7ff00000
 8006324:	20000198 	.word	0x20000198
 8006328:	20000190 	.word	0x20000190
 800632c:	00000000 	.word	0x00000000

08006330 <__kernel_cos>:
 8006330:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006334:	ec57 6b10 	vmov	r6, r7, d0
 8006338:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800633c:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8006340:	ed8d 1b00 	vstr	d1, [sp]
 8006344:	d206      	bcs.n	8006354 <__kernel_cos+0x24>
 8006346:	4630      	mov	r0, r6
 8006348:	4639      	mov	r1, r7
 800634a:	f7fa fbb1 	bl	8000ab0 <__aeabi_d2iz>
 800634e:	2800      	cmp	r0, #0
 8006350:	f000 8088 	beq.w	8006464 <__kernel_cos+0x134>
 8006354:	4632      	mov	r2, r6
 8006356:	463b      	mov	r3, r7
 8006358:	4630      	mov	r0, r6
 800635a:	4639      	mov	r1, r7
 800635c:	f7fa f8f8 	bl	8000550 <__aeabi_dmul>
 8006360:	4b51      	ldr	r3, [pc, #324]	@ (80064a8 <__kernel_cos+0x178>)
 8006362:	2200      	movs	r2, #0
 8006364:	4604      	mov	r4, r0
 8006366:	460d      	mov	r5, r1
 8006368:	f7fa f8f2 	bl	8000550 <__aeabi_dmul>
 800636c:	a340      	add	r3, pc, #256	@ (adr r3, 8006470 <__kernel_cos+0x140>)
 800636e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006372:	4682      	mov	sl, r0
 8006374:	468b      	mov	fp, r1
 8006376:	4620      	mov	r0, r4
 8006378:	4629      	mov	r1, r5
 800637a:	f7fa f8e9 	bl	8000550 <__aeabi_dmul>
 800637e:	a33e      	add	r3, pc, #248	@ (adr r3, 8006478 <__kernel_cos+0x148>)
 8006380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006384:	f7f9 ff2e 	bl	80001e4 <__adddf3>
 8006388:	4622      	mov	r2, r4
 800638a:	462b      	mov	r3, r5
 800638c:	f7fa f8e0 	bl	8000550 <__aeabi_dmul>
 8006390:	a33b      	add	r3, pc, #236	@ (adr r3, 8006480 <__kernel_cos+0x150>)
 8006392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006396:	f7f9 ff23 	bl	80001e0 <__aeabi_dsub>
 800639a:	4622      	mov	r2, r4
 800639c:	462b      	mov	r3, r5
 800639e:	f7fa f8d7 	bl	8000550 <__aeabi_dmul>
 80063a2:	a339      	add	r3, pc, #228	@ (adr r3, 8006488 <__kernel_cos+0x158>)
 80063a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063a8:	f7f9 ff1c 	bl	80001e4 <__adddf3>
 80063ac:	4622      	mov	r2, r4
 80063ae:	462b      	mov	r3, r5
 80063b0:	f7fa f8ce 	bl	8000550 <__aeabi_dmul>
 80063b4:	a336      	add	r3, pc, #216	@ (adr r3, 8006490 <__kernel_cos+0x160>)
 80063b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063ba:	f7f9 ff11 	bl	80001e0 <__aeabi_dsub>
 80063be:	4622      	mov	r2, r4
 80063c0:	462b      	mov	r3, r5
 80063c2:	f7fa f8c5 	bl	8000550 <__aeabi_dmul>
 80063c6:	a334      	add	r3, pc, #208	@ (adr r3, 8006498 <__kernel_cos+0x168>)
 80063c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063cc:	f7f9 ff0a 	bl	80001e4 <__adddf3>
 80063d0:	4622      	mov	r2, r4
 80063d2:	462b      	mov	r3, r5
 80063d4:	f7fa f8bc 	bl	8000550 <__aeabi_dmul>
 80063d8:	4622      	mov	r2, r4
 80063da:	462b      	mov	r3, r5
 80063dc:	f7fa f8b8 	bl	8000550 <__aeabi_dmul>
 80063e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80063e4:	4604      	mov	r4, r0
 80063e6:	460d      	mov	r5, r1
 80063e8:	4630      	mov	r0, r6
 80063ea:	4639      	mov	r1, r7
 80063ec:	f7fa f8b0 	bl	8000550 <__aeabi_dmul>
 80063f0:	460b      	mov	r3, r1
 80063f2:	4602      	mov	r2, r0
 80063f4:	4629      	mov	r1, r5
 80063f6:	4620      	mov	r0, r4
 80063f8:	f7f9 fef2 	bl	80001e0 <__aeabi_dsub>
 80063fc:	4b2b      	ldr	r3, [pc, #172]	@ (80064ac <__kernel_cos+0x17c>)
 80063fe:	4598      	cmp	r8, r3
 8006400:	4606      	mov	r6, r0
 8006402:	460f      	mov	r7, r1
 8006404:	d810      	bhi.n	8006428 <__kernel_cos+0xf8>
 8006406:	4602      	mov	r2, r0
 8006408:	460b      	mov	r3, r1
 800640a:	4650      	mov	r0, sl
 800640c:	4659      	mov	r1, fp
 800640e:	f7f9 fee7 	bl	80001e0 <__aeabi_dsub>
 8006412:	460b      	mov	r3, r1
 8006414:	4926      	ldr	r1, [pc, #152]	@ (80064b0 <__kernel_cos+0x180>)
 8006416:	4602      	mov	r2, r0
 8006418:	2000      	movs	r0, #0
 800641a:	f7f9 fee1 	bl	80001e0 <__aeabi_dsub>
 800641e:	ec41 0b10 	vmov	d0, r0, r1
 8006422:	b003      	add	sp, #12
 8006424:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006428:	4b22      	ldr	r3, [pc, #136]	@ (80064b4 <__kernel_cos+0x184>)
 800642a:	4921      	ldr	r1, [pc, #132]	@ (80064b0 <__kernel_cos+0x180>)
 800642c:	4598      	cmp	r8, r3
 800642e:	bf8c      	ite	hi
 8006430:	4d21      	ldrhi	r5, [pc, #132]	@ (80064b8 <__kernel_cos+0x188>)
 8006432:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 8006436:	2400      	movs	r4, #0
 8006438:	4622      	mov	r2, r4
 800643a:	462b      	mov	r3, r5
 800643c:	2000      	movs	r0, #0
 800643e:	f7f9 fecf 	bl	80001e0 <__aeabi_dsub>
 8006442:	4622      	mov	r2, r4
 8006444:	4680      	mov	r8, r0
 8006446:	4689      	mov	r9, r1
 8006448:	462b      	mov	r3, r5
 800644a:	4650      	mov	r0, sl
 800644c:	4659      	mov	r1, fp
 800644e:	f7f9 fec7 	bl	80001e0 <__aeabi_dsub>
 8006452:	4632      	mov	r2, r6
 8006454:	463b      	mov	r3, r7
 8006456:	f7f9 fec3 	bl	80001e0 <__aeabi_dsub>
 800645a:	4602      	mov	r2, r0
 800645c:	460b      	mov	r3, r1
 800645e:	4640      	mov	r0, r8
 8006460:	4649      	mov	r1, r9
 8006462:	e7da      	b.n	800641a <__kernel_cos+0xea>
 8006464:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 80064a0 <__kernel_cos+0x170>
 8006468:	e7db      	b.n	8006422 <__kernel_cos+0xf2>
 800646a:	bf00      	nop
 800646c:	f3af 8000 	nop.w
 8006470:	be8838d4 	.word	0xbe8838d4
 8006474:	bda8fae9 	.word	0xbda8fae9
 8006478:	bdb4b1c4 	.word	0xbdb4b1c4
 800647c:	3e21ee9e 	.word	0x3e21ee9e
 8006480:	809c52ad 	.word	0x809c52ad
 8006484:	3e927e4f 	.word	0x3e927e4f
 8006488:	19cb1590 	.word	0x19cb1590
 800648c:	3efa01a0 	.word	0x3efa01a0
 8006490:	16c15177 	.word	0x16c15177
 8006494:	3f56c16c 	.word	0x3f56c16c
 8006498:	5555554c 	.word	0x5555554c
 800649c:	3fa55555 	.word	0x3fa55555
 80064a0:	00000000 	.word	0x00000000
 80064a4:	3ff00000 	.word	0x3ff00000
 80064a8:	3fe00000 	.word	0x3fe00000
 80064ac:	3fd33332 	.word	0x3fd33332
 80064b0:	3ff00000 	.word	0x3ff00000
 80064b4:	3fe90000 	.word	0x3fe90000
 80064b8:	3fd20000 	.word	0x3fd20000
 80064bc:	00000000 	.word	0x00000000

080064c0 <__kernel_sin>:
 80064c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064c4:	ec55 4b10 	vmov	r4, r5, d0
 80064c8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 80064cc:	b085      	sub	sp, #20
 80064ce:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 80064d2:	ed8d 1b02 	vstr	d1, [sp, #8]
 80064d6:	4680      	mov	r8, r0
 80064d8:	d205      	bcs.n	80064e6 <__kernel_sin+0x26>
 80064da:	4620      	mov	r0, r4
 80064dc:	4629      	mov	r1, r5
 80064de:	f7fa fae7 	bl	8000ab0 <__aeabi_d2iz>
 80064e2:	2800      	cmp	r0, #0
 80064e4:	d052      	beq.n	800658c <__kernel_sin+0xcc>
 80064e6:	4622      	mov	r2, r4
 80064e8:	462b      	mov	r3, r5
 80064ea:	4620      	mov	r0, r4
 80064ec:	4629      	mov	r1, r5
 80064ee:	f7fa f82f 	bl	8000550 <__aeabi_dmul>
 80064f2:	4682      	mov	sl, r0
 80064f4:	468b      	mov	fp, r1
 80064f6:	4602      	mov	r2, r0
 80064f8:	460b      	mov	r3, r1
 80064fa:	4620      	mov	r0, r4
 80064fc:	4629      	mov	r1, r5
 80064fe:	f7fa f827 	bl	8000550 <__aeabi_dmul>
 8006502:	a342      	add	r3, pc, #264	@ (adr r3, 800660c <__kernel_sin+0x14c>)
 8006504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006508:	e9cd 0100 	strd	r0, r1, [sp]
 800650c:	4650      	mov	r0, sl
 800650e:	4659      	mov	r1, fp
 8006510:	f7fa f81e 	bl	8000550 <__aeabi_dmul>
 8006514:	a33f      	add	r3, pc, #252	@ (adr r3, 8006614 <__kernel_sin+0x154>)
 8006516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800651a:	f7f9 fe61 	bl	80001e0 <__aeabi_dsub>
 800651e:	4652      	mov	r2, sl
 8006520:	465b      	mov	r3, fp
 8006522:	f7fa f815 	bl	8000550 <__aeabi_dmul>
 8006526:	a33d      	add	r3, pc, #244	@ (adr r3, 800661c <__kernel_sin+0x15c>)
 8006528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800652c:	f7f9 fe5a 	bl	80001e4 <__adddf3>
 8006530:	4652      	mov	r2, sl
 8006532:	465b      	mov	r3, fp
 8006534:	f7fa f80c 	bl	8000550 <__aeabi_dmul>
 8006538:	a33a      	add	r3, pc, #232	@ (adr r3, 8006624 <__kernel_sin+0x164>)
 800653a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800653e:	f7f9 fe4f 	bl	80001e0 <__aeabi_dsub>
 8006542:	4652      	mov	r2, sl
 8006544:	465b      	mov	r3, fp
 8006546:	f7fa f803 	bl	8000550 <__aeabi_dmul>
 800654a:	a338      	add	r3, pc, #224	@ (adr r3, 800662c <__kernel_sin+0x16c>)
 800654c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006550:	f7f9 fe48 	bl	80001e4 <__adddf3>
 8006554:	4606      	mov	r6, r0
 8006556:	460f      	mov	r7, r1
 8006558:	f1b8 0f00 	cmp.w	r8, #0
 800655c:	d11b      	bne.n	8006596 <__kernel_sin+0xd6>
 800655e:	4602      	mov	r2, r0
 8006560:	460b      	mov	r3, r1
 8006562:	4650      	mov	r0, sl
 8006564:	4659      	mov	r1, fp
 8006566:	f7f9 fff3 	bl	8000550 <__aeabi_dmul>
 800656a:	a325      	add	r3, pc, #148	@ (adr r3, 8006600 <__kernel_sin+0x140>)
 800656c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006570:	f7f9 fe36 	bl	80001e0 <__aeabi_dsub>
 8006574:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006578:	f7f9 ffea 	bl	8000550 <__aeabi_dmul>
 800657c:	4602      	mov	r2, r0
 800657e:	460b      	mov	r3, r1
 8006580:	4620      	mov	r0, r4
 8006582:	4629      	mov	r1, r5
 8006584:	f7f9 fe2e 	bl	80001e4 <__adddf3>
 8006588:	4604      	mov	r4, r0
 800658a:	460d      	mov	r5, r1
 800658c:	ec45 4b10 	vmov	d0, r4, r5
 8006590:	b005      	add	sp, #20
 8006592:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006596:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800659a:	4b1b      	ldr	r3, [pc, #108]	@ (8006608 <__kernel_sin+0x148>)
 800659c:	2200      	movs	r2, #0
 800659e:	f7f9 ffd7 	bl	8000550 <__aeabi_dmul>
 80065a2:	4632      	mov	r2, r6
 80065a4:	4680      	mov	r8, r0
 80065a6:	4689      	mov	r9, r1
 80065a8:	463b      	mov	r3, r7
 80065aa:	e9dd 0100 	ldrd	r0, r1, [sp]
 80065ae:	f7f9 ffcf 	bl	8000550 <__aeabi_dmul>
 80065b2:	4602      	mov	r2, r0
 80065b4:	460b      	mov	r3, r1
 80065b6:	4640      	mov	r0, r8
 80065b8:	4649      	mov	r1, r9
 80065ba:	f7f9 fe11 	bl	80001e0 <__aeabi_dsub>
 80065be:	4652      	mov	r2, sl
 80065c0:	465b      	mov	r3, fp
 80065c2:	f7f9 ffc5 	bl	8000550 <__aeabi_dmul>
 80065c6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80065ca:	f7f9 fe09 	bl	80001e0 <__aeabi_dsub>
 80065ce:	a30c      	add	r3, pc, #48	@ (adr r3, 8006600 <__kernel_sin+0x140>)
 80065d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065d4:	4606      	mov	r6, r0
 80065d6:	460f      	mov	r7, r1
 80065d8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80065dc:	f7f9 ffb8 	bl	8000550 <__aeabi_dmul>
 80065e0:	4602      	mov	r2, r0
 80065e2:	460b      	mov	r3, r1
 80065e4:	4630      	mov	r0, r6
 80065e6:	4639      	mov	r1, r7
 80065e8:	f7f9 fdfc 	bl	80001e4 <__adddf3>
 80065ec:	4602      	mov	r2, r0
 80065ee:	460b      	mov	r3, r1
 80065f0:	4620      	mov	r0, r4
 80065f2:	4629      	mov	r1, r5
 80065f4:	f7f9 fdf4 	bl	80001e0 <__aeabi_dsub>
 80065f8:	e7c6      	b.n	8006588 <__kernel_sin+0xc8>
 80065fa:	bf00      	nop
 80065fc:	f3af 8000 	nop.w
 8006600:	55555549 	.word	0x55555549
 8006604:	3fc55555 	.word	0x3fc55555
 8006608:	3fe00000 	.word	0x3fe00000
 800660c:	5acfd57c 	.word	0x5acfd57c
 8006610:	3de5d93a 	.word	0x3de5d93a
 8006614:	8a2b9ceb 	.word	0x8a2b9ceb
 8006618:	3e5ae5e6 	.word	0x3e5ae5e6
 800661c:	57b1fe7d 	.word	0x57b1fe7d
 8006620:	3ec71de3 	.word	0x3ec71de3
 8006624:	19c161d5 	.word	0x19c161d5
 8006628:	3f2a01a0 	.word	0x3f2a01a0
 800662c:	1110f8a6 	.word	0x1110f8a6
 8006630:	3f811111 	.word	0x3f811111
 8006634:	00000000 	.word	0x00000000

08006638 <__ieee754_atan2>:
 8006638:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800663c:	ec57 6b11 	vmov	r6, r7, d1
 8006640:	4273      	negs	r3, r6
 8006642:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 80067c0 <__ieee754_atan2+0x188>
 8006646:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 800664a:	4333      	orrs	r3, r6
 800664c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8006650:	4543      	cmp	r3, r8
 8006652:	ec51 0b10 	vmov	r0, r1, d0
 8006656:	4635      	mov	r5, r6
 8006658:	d809      	bhi.n	800666e <__ieee754_atan2+0x36>
 800665a:	4244      	negs	r4, r0
 800665c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8006660:	4304      	orrs	r4, r0
 8006662:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8006666:	4544      	cmp	r4, r8
 8006668:	468e      	mov	lr, r1
 800666a:	4681      	mov	r9, r0
 800666c:	d907      	bls.n	800667e <__ieee754_atan2+0x46>
 800666e:	4632      	mov	r2, r6
 8006670:	463b      	mov	r3, r7
 8006672:	f7f9 fdb7 	bl	80001e4 <__adddf3>
 8006676:	ec41 0b10 	vmov	d0, r0, r1
 800667a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800667e:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 8006682:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 8006686:	4334      	orrs	r4, r6
 8006688:	d103      	bne.n	8006692 <__ieee754_atan2+0x5a>
 800668a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800668e:	f7ff bb2b 	b.w	8005ce8 <atan>
 8006692:	17bc      	asrs	r4, r7, #30
 8006694:	f004 0402 	and.w	r4, r4, #2
 8006698:	ea53 0909 	orrs.w	r9, r3, r9
 800669c:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 80066a0:	d107      	bne.n	80066b2 <__ieee754_atan2+0x7a>
 80066a2:	2c02      	cmp	r4, #2
 80066a4:	d05f      	beq.n	8006766 <__ieee754_atan2+0x12e>
 80066a6:	2c03      	cmp	r4, #3
 80066a8:	d1e5      	bne.n	8006676 <__ieee754_atan2+0x3e>
 80066aa:	a141      	add	r1, pc, #260	@ (adr r1, 80067b0 <__ieee754_atan2+0x178>)
 80066ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 80066b0:	e7e1      	b.n	8006676 <__ieee754_atan2+0x3e>
 80066b2:	4315      	orrs	r5, r2
 80066b4:	d106      	bne.n	80066c4 <__ieee754_atan2+0x8c>
 80066b6:	f1be 0f00 	cmp.w	lr, #0
 80066ba:	da5f      	bge.n	800677c <__ieee754_atan2+0x144>
 80066bc:	a13e      	add	r1, pc, #248	@ (adr r1, 80067b8 <__ieee754_atan2+0x180>)
 80066be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80066c2:	e7d8      	b.n	8006676 <__ieee754_atan2+0x3e>
 80066c4:	4542      	cmp	r2, r8
 80066c6:	d10f      	bne.n	80066e8 <__ieee754_atan2+0xb0>
 80066c8:	4293      	cmp	r3, r2
 80066ca:	f104 34ff 	add.w	r4, r4, #4294967295
 80066ce:	d107      	bne.n	80066e0 <__ieee754_atan2+0xa8>
 80066d0:	2c02      	cmp	r4, #2
 80066d2:	d84c      	bhi.n	800676e <__ieee754_atan2+0x136>
 80066d4:	4b34      	ldr	r3, [pc, #208]	@ (80067a8 <__ieee754_atan2+0x170>)
 80066d6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80066da:	e9d3 0100 	ldrd	r0, r1, [r3]
 80066de:	e7ca      	b.n	8006676 <__ieee754_atan2+0x3e>
 80066e0:	2c02      	cmp	r4, #2
 80066e2:	d848      	bhi.n	8006776 <__ieee754_atan2+0x13e>
 80066e4:	4b31      	ldr	r3, [pc, #196]	@ (80067ac <__ieee754_atan2+0x174>)
 80066e6:	e7f6      	b.n	80066d6 <__ieee754_atan2+0x9e>
 80066e8:	4543      	cmp	r3, r8
 80066ea:	d0e4      	beq.n	80066b6 <__ieee754_atan2+0x7e>
 80066ec:	1a9b      	subs	r3, r3, r2
 80066ee:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 80066f2:	ea4f 5223 	mov.w	r2, r3, asr #20
 80066f6:	da1e      	bge.n	8006736 <__ieee754_atan2+0xfe>
 80066f8:	2f00      	cmp	r7, #0
 80066fa:	da01      	bge.n	8006700 <__ieee754_atan2+0xc8>
 80066fc:	323c      	adds	r2, #60	@ 0x3c
 80066fe:	db1e      	blt.n	800673e <__ieee754_atan2+0x106>
 8006700:	4632      	mov	r2, r6
 8006702:	463b      	mov	r3, r7
 8006704:	f7fa f84e 	bl	80007a4 <__aeabi_ddiv>
 8006708:	ec41 0b10 	vmov	d0, r0, r1
 800670c:	f7ff fcd8 	bl	80060c0 <fabs>
 8006710:	f7ff faea 	bl	8005ce8 <atan>
 8006714:	ec51 0b10 	vmov	r0, r1, d0
 8006718:	2c01      	cmp	r4, #1
 800671a:	d013      	beq.n	8006744 <__ieee754_atan2+0x10c>
 800671c:	2c02      	cmp	r4, #2
 800671e:	d015      	beq.n	800674c <__ieee754_atan2+0x114>
 8006720:	2c00      	cmp	r4, #0
 8006722:	d0a8      	beq.n	8006676 <__ieee754_atan2+0x3e>
 8006724:	a318      	add	r3, pc, #96	@ (adr r3, 8006788 <__ieee754_atan2+0x150>)
 8006726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800672a:	f7f9 fd59 	bl	80001e0 <__aeabi_dsub>
 800672e:	a318      	add	r3, pc, #96	@ (adr r3, 8006790 <__ieee754_atan2+0x158>)
 8006730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006734:	e014      	b.n	8006760 <__ieee754_atan2+0x128>
 8006736:	a118      	add	r1, pc, #96	@ (adr r1, 8006798 <__ieee754_atan2+0x160>)
 8006738:	e9d1 0100 	ldrd	r0, r1, [r1]
 800673c:	e7ec      	b.n	8006718 <__ieee754_atan2+0xe0>
 800673e:	2000      	movs	r0, #0
 8006740:	2100      	movs	r1, #0
 8006742:	e7e9      	b.n	8006718 <__ieee754_atan2+0xe0>
 8006744:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006748:	4619      	mov	r1, r3
 800674a:	e794      	b.n	8006676 <__ieee754_atan2+0x3e>
 800674c:	a30e      	add	r3, pc, #56	@ (adr r3, 8006788 <__ieee754_atan2+0x150>)
 800674e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006752:	f7f9 fd45 	bl	80001e0 <__aeabi_dsub>
 8006756:	4602      	mov	r2, r0
 8006758:	460b      	mov	r3, r1
 800675a:	a10d      	add	r1, pc, #52	@ (adr r1, 8006790 <__ieee754_atan2+0x158>)
 800675c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006760:	f7f9 fd3e 	bl	80001e0 <__aeabi_dsub>
 8006764:	e787      	b.n	8006676 <__ieee754_atan2+0x3e>
 8006766:	a10a      	add	r1, pc, #40	@ (adr r1, 8006790 <__ieee754_atan2+0x158>)
 8006768:	e9d1 0100 	ldrd	r0, r1, [r1]
 800676c:	e783      	b.n	8006676 <__ieee754_atan2+0x3e>
 800676e:	a10c      	add	r1, pc, #48	@ (adr r1, 80067a0 <__ieee754_atan2+0x168>)
 8006770:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006774:	e77f      	b.n	8006676 <__ieee754_atan2+0x3e>
 8006776:	2000      	movs	r0, #0
 8006778:	2100      	movs	r1, #0
 800677a:	e77c      	b.n	8006676 <__ieee754_atan2+0x3e>
 800677c:	a106      	add	r1, pc, #24	@ (adr r1, 8006798 <__ieee754_atan2+0x160>)
 800677e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006782:	e778      	b.n	8006676 <__ieee754_atan2+0x3e>
 8006784:	f3af 8000 	nop.w
 8006788:	33145c07 	.word	0x33145c07
 800678c:	3ca1a626 	.word	0x3ca1a626
 8006790:	54442d18 	.word	0x54442d18
 8006794:	400921fb 	.word	0x400921fb
 8006798:	54442d18 	.word	0x54442d18
 800679c:	3ff921fb 	.word	0x3ff921fb
 80067a0:	54442d18 	.word	0x54442d18
 80067a4:	3fe921fb 	.word	0x3fe921fb
 80067a8:	080074f0 	.word	0x080074f0
 80067ac:	080074d8 	.word	0x080074d8
 80067b0:	54442d18 	.word	0x54442d18
 80067b4:	c00921fb 	.word	0xc00921fb
 80067b8:	54442d18 	.word	0x54442d18
 80067bc:	bff921fb 	.word	0xbff921fb
 80067c0:	7ff00000 	.word	0x7ff00000
 80067c4:	00000000 	.word	0x00000000

080067c8 <__ieee754_rem_pio2>:
 80067c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067cc:	ec57 6b10 	vmov	r6, r7, d0
 80067d0:	4bc5      	ldr	r3, [pc, #788]	@ (8006ae8 <__ieee754_rem_pio2+0x320>)
 80067d2:	b08d      	sub	sp, #52	@ 0x34
 80067d4:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 80067d8:	4598      	cmp	r8, r3
 80067da:	4604      	mov	r4, r0
 80067dc:	9704      	str	r7, [sp, #16]
 80067de:	d807      	bhi.n	80067f0 <__ieee754_rem_pio2+0x28>
 80067e0:	2200      	movs	r2, #0
 80067e2:	2300      	movs	r3, #0
 80067e4:	ed80 0b00 	vstr	d0, [r0]
 80067e8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80067ec:	2500      	movs	r5, #0
 80067ee:	e028      	b.n	8006842 <__ieee754_rem_pio2+0x7a>
 80067f0:	4bbe      	ldr	r3, [pc, #760]	@ (8006aec <__ieee754_rem_pio2+0x324>)
 80067f2:	4598      	cmp	r8, r3
 80067f4:	d878      	bhi.n	80068e8 <__ieee754_rem_pio2+0x120>
 80067f6:	9b04      	ldr	r3, [sp, #16]
 80067f8:	4dbd      	ldr	r5, [pc, #756]	@ (8006af0 <__ieee754_rem_pio2+0x328>)
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	4630      	mov	r0, r6
 80067fe:	a3ac      	add	r3, pc, #688	@ (adr r3, 8006ab0 <__ieee754_rem_pio2+0x2e8>)
 8006800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006804:	4639      	mov	r1, r7
 8006806:	dd38      	ble.n	800687a <__ieee754_rem_pio2+0xb2>
 8006808:	f7f9 fcea 	bl	80001e0 <__aeabi_dsub>
 800680c:	45a8      	cmp	r8, r5
 800680e:	4606      	mov	r6, r0
 8006810:	460f      	mov	r7, r1
 8006812:	d01a      	beq.n	800684a <__ieee754_rem_pio2+0x82>
 8006814:	a3a8      	add	r3, pc, #672	@ (adr r3, 8006ab8 <__ieee754_rem_pio2+0x2f0>)
 8006816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800681a:	f7f9 fce1 	bl	80001e0 <__aeabi_dsub>
 800681e:	4602      	mov	r2, r0
 8006820:	460b      	mov	r3, r1
 8006822:	4680      	mov	r8, r0
 8006824:	4689      	mov	r9, r1
 8006826:	4630      	mov	r0, r6
 8006828:	4639      	mov	r1, r7
 800682a:	f7f9 fcd9 	bl	80001e0 <__aeabi_dsub>
 800682e:	a3a2      	add	r3, pc, #648	@ (adr r3, 8006ab8 <__ieee754_rem_pio2+0x2f0>)
 8006830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006834:	f7f9 fcd4 	bl	80001e0 <__aeabi_dsub>
 8006838:	e9c4 8900 	strd	r8, r9, [r4]
 800683c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006840:	2501      	movs	r5, #1
 8006842:	4628      	mov	r0, r5
 8006844:	b00d      	add	sp, #52	@ 0x34
 8006846:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800684a:	a39d      	add	r3, pc, #628	@ (adr r3, 8006ac0 <__ieee754_rem_pio2+0x2f8>)
 800684c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006850:	f7f9 fcc6 	bl	80001e0 <__aeabi_dsub>
 8006854:	a39c      	add	r3, pc, #624	@ (adr r3, 8006ac8 <__ieee754_rem_pio2+0x300>)
 8006856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800685a:	4606      	mov	r6, r0
 800685c:	460f      	mov	r7, r1
 800685e:	f7f9 fcbf 	bl	80001e0 <__aeabi_dsub>
 8006862:	4602      	mov	r2, r0
 8006864:	460b      	mov	r3, r1
 8006866:	4680      	mov	r8, r0
 8006868:	4689      	mov	r9, r1
 800686a:	4630      	mov	r0, r6
 800686c:	4639      	mov	r1, r7
 800686e:	f7f9 fcb7 	bl	80001e0 <__aeabi_dsub>
 8006872:	a395      	add	r3, pc, #596	@ (adr r3, 8006ac8 <__ieee754_rem_pio2+0x300>)
 8006874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006878:	e7dc      	b.n	8006834 <__ieee754_rem_pio2+0x6c>
 800687a:	f7f9 fcb3 	bl	80001e4 <__adddf3>
 800687e:	45a8      	cmp	r8, r5
 8006880:	4606      	mov	r6, r0
 8006882:	460f      	mov	r7, r1
 8006884:	d018      	beq.n	80068b8 <__ieee754_rem_pio2+0xf0>
 8006886:	a38c      	add	r3, pc, #560	@ (adr r3, 8006ab8 <__ieee754_rem_pio2+0x2f0>)
 8006888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800688c:	f7f9 fcaa 	bl	80001e4 <__adddf3>
 8006890:	4602      	mov	r2, r0
 8006892:	460b      	mov	r3, r1
 8006894:	4680      	mov	r8, r0
 8006896:	4689      	mov	r9, r1
 8006898:	4630      	mov	r0, r6
 800689a:	4639      	mov	r1, r7
 800689c:	f7f9 fca0 	bl	80001e0 <__aeabi_dsub>
 80068a0:	a385      	add	r3, pc, #532	@ (adr r3, 8006ab8 <__ieee754_rem_pio2+0x2f0>)
 80068a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068a6:	f7f9 fc9d 	bl	80001e4 <__adddf3>
 80068aa:	f04f 35ff 	mov.w	r5, #4294967295
 80068ae:	e9c4 8900 	strd	r8, r9, [r4]
 80068b2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80068b6:	e7c4      	b.n	8006842 <__ieee754_rem_pio2+0x7a>
 80068b8:	a381      	add	r3, pc, #516	@ (adr r3, 8006ac0 <__ieee754_rem_pio2+0x2f8>)
 80068ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068be:	f7f9 fc91 	bl	80001e4 <__adddf3>
 80068c2:	a381      	add	r3, pc, #516	@ (adr r3, 8006ac8 <__ieee754_rem_pio2+0x300>)
 80068c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068c8:	4606      	mov	r6, r0
 80068ca:	460f      	mov	r7, r1
 80068cc:	f7f9 fc8a 	bl	80001e4 <__adddf3>
 80068d0:	4602      	mov	r2, r0
 80068d2:	460b      	mov	r3, r1
 80068d4:	4680      	mov	r8, r0
 80068d6:	4689      	mov	r9, r1
 80068d8:	4630      	mov	r0, r6
 80068da:	4639      	mov	r1, r7
 80068dc:	f7f9 fc80 	bl	80001e0 <__aeabi_dsub>
 80068e0:	a379      	add	r3, pc, #484	@ (adr r3, 8006ac8 <__ieee754_rem_pio2+0x300>)
 80068e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068e6:	e7de      	b.n	80068a6 <__ieee754_rem_pio2+0xde>
 80068e8:	4b82      	ldr	r3, [pc, #520]	@ (8006af4 <__ieee754_rem_pio2+0x32c>)
 80068ea:	4598      	cmp	r8, r3
 80068ec:	f200 80d1 	bhi.w	8006a92 <__ieee754_rem_pio2+0x2ca>
 80068f0:	f7ff fbe6 	bl	80060c0 <fabs>
 80068f4:	ec57 6b10 	vmov	r6, r7, d0
 80068f8:	a375      	add	r3, pc, #468	@ (adr r3, 8006ad0 <__ieee754_rem_pio2+0x308>)
 80068fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068fe:	4630      	mov	r0, r6
 8006900:	4639      	mov	r1, r7
 8006902:	f7f9 fe25 	bl	8000550 <__aeabi_dmul>
 8006906:	4b7c      	ldr	r3, [pc, #496]	@ (8006af8 <__ieee754_rem_pio2+0x330>)
 8006908:	2200      	movs	r2, #0
 800690a:	f7f9 fc6b 	bl	80001e4 <__adddf3>
 800690e:	f7fa f8cf 	bl	8000ab0 <__aeabi_d2iz>
 8006912:	4605      	mov	r5, r0
 8006914:	f7f9 fdb2 	bl	800047c <__aeabi_i2d>
 8006918:	4602      	mov	r2, r0
 800691a:	460b      	mov	r3, r1
 800691c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006920:	a363      	add	r3, pc, #396	@ (adr r3, 8006ab0 <__ieee754_rem_pio2+0x2e8>)
 8006922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006926:	f7f9 fe13 	bl	8000550 <__aeabi_dmul>
 800692a:	4602      	mov	r2, r0
 800692c:	460b      	mov	r3, r1
 800692e:	4630      	mov	r0, r6
 8006930:	4639      	mov	r1, r7
 8006932:	f7f9 fc55 	bl	80001e0 <__aeabi_dsub>
 8006936:	a360      	add	r3, pc, #384	@ (adr r3, 8006ab8 <__ieee754_rem_pio2+0x2f0>)
 8006938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800693c:	4682      	mov	sl, r0
 800693e:	468b      	mov	fp, r1
 8006940:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006944:	f7f9 fe04 	bl	8000550 <__aeabi_dmul>
 8006948:	2d1f      	cmp	r5, #31
 800694a:	4606      	mov	r6, r0
 800694c:	460f      	mov	r7, r1
 800694e:	dc0c      	bgt.n	800696a <__ieee754_rem_pio2+0x1a2>
 8006950:	4b6a      	ldr	r3, [pc, #424]	@ (8006afc <__ieee754_rem_pio2+0x334>)
 8006952:	1e6a      	subs	r2, r5, #1
 8006954:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006958:	4543      	cmp	r3, r8
 800695a:	d006      	beq.n	800696a <__ieee754_rem_pio2+0x1a2>
 800695c:	4632      	mov	r2, r6
 800695e:	463b      	mov	r3, r7
 8006960:	4650      	mov	r0, sl
 8006962:	4659      	mov	r1, fp
 8006964:	f7f9 fc3c 	bl	80001e0 <__aeabi_dsub>
 8006968:	e00e      	b.n	8006988 <__ieee754_rem_pio2+0x1c0>
 800696a:	463b      	mov	r3, r7
 800696c:	4632      	mov	r2, r6
 800696e:	4650      	mov	r0, sl
 8006970:	4659      	mov	r1, fp
 8006972:	f7f9 fc35 	bl	80001e0 <__aeabi_dsub>
 8006976:	ea4f 5328 	mov.w	r3, r8, asr #20
 800697a:	9305      	str	r3, [sp, #20]
 800697c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006980:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8006984:	2b10      	cmp	r3, #16
 8006986:	dc02      	bgt.n	800698e <__ieee754_rem_pio2+0x1c6>
 8006988:	e9c4 0100 	strd	r0, r1, [r4]
 800698c:	e039      	b.n	8006a02 <__ieee754_rem_pio2+0x23a>
 800698e:	a34c      	add	r3, pc, #304	@ (adr r3, 8006ac0 <__ieee754_rem_pio2+0x2f8>)
 8006990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006994:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006998:	f7f9 fdda 	bl	8000550 <__aeabi_dmul>
 800699c:	4606      	mov	r6, r0
 800699e:	460f      	mov	r7, r1
 80069a0:	4602      	mov	r2, r0
 80069a2:	460b      	mov	r3, r1
 80069a4:	4650      	mov	r0, sl
 80069a6:	4659      	mov	r1, fp
 80069a8:	f7f9 fc1a 	bl	80001e0 <__aeabi_dsub>
 80069ac:	4602      	mov	r2, r0
 80069ae:	460b      	mov	r3, r1
 80069b0:	4680      	mov	r8, r0
 80069b2:	4689      	mov	r9, r1
 80069b4:	4650      	mov	r0, sl
 80069b6:	4659      	mov	r1, fp
 80069b8:	f7f9 fc12 	bl	80001e0 <__aeabi_dsub>
 80069bc:	4632      	mov	r2, r6
 80069be:	463b      	mov	r3, r7
 80069c0:	f7f9 fc0e 	bl	80001e0 <__aeabi_dsub>
 80069c4:	a340      	add	r3, pc, #256	@ (adr r3, 8006ac8 <__ieee754_rem_pio2+0x300>)
 80069c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069ca:	4606      	mov	r6, r0
 80069cc:	460f      	mov	r7, r1
 80069ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80069d2:	f7f9 fdbd 	bl	8000550 <__aeabi_dmul>
 80069d6:	4632      	mov	r2, r6
 80069d8:	463b      	mov	r3, r7
 80069da:	f7f9 fc01 	bl	80001e0 <__aeabi_dsub>
 80069de:	4602      	mov	r2, r0
 80069e0:	460b      	mov	r3, r1
 80069e2:	4606      	mov	r6, r0
 80069e4:	460f      	mov	r7, r1
 80069e6:	4640      	mov	r0, r8
 80069e8:	4649      	mov	r1, r9
 80069ea:	f7f9 fbf9 	bl	80001e0 <__aeabi_dsub>
 80069ee:	9a05      	ldr	r2, [sp, #20]
 80069f0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80069f4:	1ad3      	subs	r3, r2, r3
 80069f6:	2b31      	cmp	r3, #49	@ 0x31
 80069f8:	dc20      	bgt.n	8006a3c <__ieee754_rem_pio2+0x274>
 80069fa:	e9c4 0100 	strd	r0, r1, [r4]
 80069fe:	46c2      	mov	sl, r8
 8006a00:	46cb      	mov	fp, r9
 8006a02:	e9d4 8900 	ldrd	r8, r9, [r4]
 8006a06:	4650      	mov	r0, sl
 8006a08:	4642      	mov	r2, r8
 8006a0a:	464b      	mov	r3, r9
 8006a0c:	4659      	mov	r1, fp
 8006a0e:	f7f9 fbe7 	bl	80001e0 <__aeabi_dsub>
 8006a12:	463b      	mov	r3, r7
 8006a14:	4632      	mov	r2, r6
 8006a16:	f7f9 fbe3 	bl	80001e0 <__aeabi_dsub>
 8006a1a:	9b04      	ldr	r3, [sp, #16]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006a22:	f6bf af0e 	bge.w	8006842 <__ieee754_rem_pio2+0x7a>
 8006a26:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8006a2a:	6063      	str	r3, [r4, #4]
 8006a2c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006a30:	f8c4 8000 	str.w	r8, [r4]
 8006a34:	60a0      	str	r0, [r4, #8]
 8006a36:	60e3      	str	r3, [r4, #12]
 8006a38:	426d      	negs	r5, r5
 8006a3a:	e702      	b.n	8006842 <__ieee754_rem_pio2+0x7a>
 8006a3c:	a326      	add	r3, pc, #152	@ (adr r3, 8006ad8 <__ieee754_rem_pio2+0x310>)
 8006a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a42:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006a46:	f7f9 fd83 	bl	8000550 <__aeabi_dmul>
 8006a4a:	4606      	mov	r6, r0
 8006a4c:	460f      	mov	r7, r1
 8006a4e:	4602      	mov	r2, r0
 8006a50:	460b      	mov	r3, r1
 8006a52:	4640      	mov	r0, r8
 8006a54:	4649      	mov	r1, r9
 8006a56:	f7f9 fbc3 	bl	80001e0 <__aeabi_dsub>
 8006a5a:	4602      	mov	r2, r0
 8006a5c:	460b      	mov	r3, r1
 8006a5e:	4682      	mov	sl, r0
 8006a60:	468b      	mov	fp, r1
 8006a62:	4640      	mov	r0, r8
 8006a64:	4649      	mov	r1, r9
 8006a66:	f7f9 fbbb 	bl	80001e0 <__aeabi_dsub>
 8006a6a:	4632      	mov	r2, r6
 8006a6c:	463b      	mov	r3, r7
 8006a6e:	f7f9 fbb7 	bl	80001e0 <__aeabi_dsub>
 8006a72:	a31b      	add	r3, pc, #108	@ (adr r3, 8006ae0 <__ieee754_rem_pio2+0x318>)
 8006a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a78:	4606      	mov	r6, r0
 8006a7a:	460f      	mov	r7, r1
 8006a7c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006a80:	f7f9 fd66 	bl	8000550 <__aeabi_dmul>
 8006a84:	4632      	mov	r2, r6
 8006a86:	463b      	mov	r3, r7
 8006a88:	f7f9 fbaa 	bl	80001e0 <__aeabi_dsub>
 8006a8c:	4606      	mov	r6, r0
 8006a8e:	460f      	mov	r7, r1
 8006a90:	e764      	b.n	800695c <__ieee754_rem_pio2+0x194>
 8006a92:	4b1b      	ldr	r3, [pc, #108]	@ (8006b00 <__ieee754_rem_pio2+0x338>)
 8006a94:	4598      	cmp	r8, r3
 8006a96:	d935      	bls.n	8006b04 <__ieee754_rem_pio2+0x33c>
 8006a98:	4632      	mov	r2, r6
 8006a9a:	463b      	mov	r3, r7
 8006a9c:	4630      	mov	r0, r6
 8006a9e:	4639      	mov	r1, r7
 8006aa0:	f7f9 fb9e 	bl	80001e0 <__aeabi_dsub>
 8006aa4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006aa8:	e9c4 0100 	strd	r0, r1, [r4]
 8006aac:	e69e      	b.n	80067ec <__ieee754_rem_pio2+0x24>
 8006aae:	bf00      	nop
 8006ab0:	54400000 	.word	0x54400000
 8006ab4:	3ff921fb 	.word	0x3ff921fb
 8006ab8:	1a626331 	.word	0x1a626331
 8006abc:	3dd0b461 	.word	0x3dd0b461
 8006ac0:	1a600000 	.word	0x1a600000
 8006ac4:	3dd0b461 	.word	0x3dd0b461
 8006ac8:	2e037073 	.word	0x2e037073
 8006acc:	3ba3198a 	.word	0x3ba3198a
 8006ad0:	6dc9c883 	.word	0x6dc9c883
 8006ad4:	3fe45f30 	.word	0x3fe45f30
 8006ad8:	2e000000 	.word	0x2e000000
 8006adc:	3ba3198a 	.word	0x3ba3198a
 8006ae0:	252049c1 	.word	0x252049c1
 8006ae4:	397b839a 	.word	0x397b839a
 8006ae8:	3fe921fb 	.word	0x3fe921fb
 8006aec:	4002d97b 	.word	0x4002d97b
 8006af0:	3ff921fb 	.word	0x3ff921fb
 8006af4:	413921fb 	.word	0x413921fb
 8006af8:	3fe00000 	.word	0x3fe00000
 8006afc:	08007508 	.word	0x08007508
 8006b00:	7fefffff 	.word	0x7fefffff
 8006b04:	ea4f 5528 	mov.w	r5, r8, asr #20
 8006b08:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 8006b0c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8006b10:	4630      	mov	r0, r6
 8006b12:	460f      	mov	r7, r1
 8006b14:	f7f9 ffcc 	bl	8000ab0 <__aeabi_d2iz>
 8006b18:	f7f9 fcb0 	bl	800047c <__aeabi_i2d>
 8006b1c:	4602      	mov	r2, r0
 8006b1e:	460b      	mov	r3, r1
 8006b20:	4630      	mov	r0, r6
 8006b22:	4639      	mov	r1, r7
 8006b24:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006b28:	f7f9 fb5a 	bl	80001e0 <__aeabi_dsub>
 8006b2c:	4b22      	ldr	r3, [pc, #136]	@ (8006bb8 <__ieee754_rem_pio2+0x3f0>)
 8006b2e:	2200      	movs	r2, #0
 8006b30:	f7f9 fd0e 	bl	8000550 <__aeabi_dmul>
 8006b34:	460f      	mov	r7, r1
 8006b36:	4606      	mov	r6, r0
 8006b38:	f7f9 ffba 	bl	8000ab0 <__aeabi_d2iz>
 8006b3c:	f7f9 fc9e 	bl	800047c <__aeabi_i2d>
 8006b40:	4602      	mov	r2, r0
 8006b42:	460b      	mov	r3, r1
 8006b44:	4630      	mov	r0, r6
 8006b46:	4639      	mov	r1, r7
 8006b48:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006b4c:	f7f9 fb48 	bl	80001e0 <__aeabi_dsub>
 8006b50:	4b19      	ldr	r3, [pc, #100]	@ (8006bb8 <__ieee754_rem_pio2+0x3f0>)
 8006b52:	2200      	movs	r2, #0
 8006b54:	f7f9 fcfc 	bl	8000550 <__aeabi_dmul>
 8006b58:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8006b5c:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8006b60:	f04f 0803 	mov.w	r8, #3
 8006b64:	2600      	movs	r6, #0
 8006b66:	2700      	movs	r7, #0
 8006b68:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8006b6c:	4632      	mov	r2, r6
 8006b6e:	463b      	mov	r3, r7
 8006b70:	46c2      	mov	sl, r8
 8006b72:	f108 38ff 	add.w	r8, r8, #4294967295
 8006b76:	f7f9 ff53 	bl	8000a20 <__aeabi_dcmpeq>
 8006b7a:	2800      	cmp	r0, #0
 8006b7c:	d1f4      	bne.n	8006b68 <__ieee754_rem_pio2+0x3a0>
 8006b7e:	4b0f      	ldr	r3, [pc, #60]	@ (8006bbc <__ieee754_rem_pio2+0x3f4>)
 8006b80:	9301      	str	r3, [sp, #4]
 8006b82:	2302      	movs	r3, #2
 8006b84:	9300      	str	r3, [sp, #0]
 8006b86:	462a      	mov	r2, r5
 8006b88:	4653      	mov	r3, sl
 8006b8a:	4621      	mov	r1, r4
 8006b8c:	a806      	add	r0, sp, #24
 8006b8e:	f000 f817 	bl	8006bc0 <__kernel_rem_pio2>
 8006b92:	9b04      	ldr	r3, [sp, #16]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	4605      	mov	r5, r0
 8006b98:	f6bf ae53 	bge.w	8006842 <__ieee754_rem_pio2+0x7a>
 8006b9c:	e9d4 2100 	ldrd	r2, r1, [r4]
 8006ba0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006ba4:	e9c4 2300 	strd	r2, r3, [r4]
 8006ba8:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8006bac:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006bb0:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8006bb4:	e740      	b.n	8006a38 <__ieee754_rem_pio2+0x270>
 8006bb6:	bf00      	nop
 8006bb8:	41700000 	.word	0x41700000
 8006bbc:	08007588 	.word	0x08007588

08006bc0 <__kernel_rem_pio2>:
 8006bc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bc4:	ed2d 8b02 	vpush	{d8}
 8006bc8:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8006bcc:	f112 0f14 	cmn.w	r2, #20
 8006bd0:	9306      	str	r3, [sp, #24]
 8006bd2:	9104      	str	r1, [sp, #16]
 8006bd4:	4bbe      	ldr	r3, [pc, #760]	@ (8006ed0 <__kernel_rem_pio2+0x310>)
 8006bd6:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8006bd8:	9008      	str	r0, [sp, #32]
 8006bda:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006bde:	9300      	str	r3, [sp, #0]
 8006be0:	9b06      	ldr	r3, [sp, #24]
 8006be2:	f103 33ff 	add.w	r3, r3, #4294967295
 8006be6:	bfa8      	it	ge
 8006be8:	1ed4      	subge	r4, r2, #3
 8006bea:	9305      	str	r3, [sp, #20]
 8006bec:	bfb2      	itee	lt
 8006bee:	2400      	movlt	r4, #0
 8006bf0:	2318      	movge	r3, #24
 8006bf2:	fb94 f4f3 	sdivge	r4, r4, r3
 8006bf6:	f06f 0317 	mvn.w	r3, #23
 8006bfa:	fb04 3303 	mla	r3, r4, r3, r3
 8006bfe:	eb03 0b02 	add.w	fp, r3, r2
 8006c02:	9b00      	ldr	r3, [sp, #0]
 8006c04:	9a05      	ldr	r2, [sp, #20]
 8006c06:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 8006ec0 <__kernel_rem_pio2+0x300>
 8006c0a:	eb03 0802 	add.w	r8, r3, r2
 8006c0e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8006c10:	1aa7      	subs	r7, r4, r2
 8006c12:	ae20      	add	r6, sp, #128	@ 0x80
 8006c14:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8006c18:	2500      	movs	r5, #0
 8006c1a:	4545      	cmp	r5, r8
 8006c1c:	dd13      	ble.n	8006c46 <__kernel_rem_pio2+0x86>
 8006c1e:	9b06      	ldr	r3, [sp, #24]
 8006c20:	aa20      	add	r2, sp, #128	@ 0x80
 8006c22:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8006c26:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 8006c2a:	f04f 0800 	mov.w	r8, #0
 8006c2e:	9b00      	ldr	r3, [sp, #0]
 8006c30:	4598      	cmp	r8, r3
 8006c32:	dc31      	bgt.n	8006c98 <__kernel_rem_pio2+0xd8>
 8006c34:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 8006ec0 <__kernel_rem_pio2+0x300>
 8006c38:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006c3c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006c40:	462f      	mov	r7, r5
 8006c42:	2600      	movs	r6, #0
 8006c44:	e01b      	b.n	8006c7e <__kernel_rem_pio2+0xbe>
 8006c46:	42ef      	cmn	r7, r5
 8006c48:	d407      	bmi.n	8006c5a <__kernel_rem_pio2+0x9a>
 8006c4a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8006c4e:	f7f9 fc15 	bl	800047c <__aeabi_i2d>
 8006c52:	e8e6 0102 	strd	r0, r1, [r6], #8
 8006c56:	3501      	adds	r5, #1
 8006c58:	e7df      	b.n	8006c1a <__kernel_rem_pio2+0x5a>
 8006c5a:	ec51 0b18 	vmov	r0, r1, d8
 8006c5e:	e7f8      	b.n	8006c52 <__kernel_rem_pio2+0x92>
 8006c60:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c64:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8006c68:	f7f9 fc72 	bl	8000550 <__aeabi_dmul>
 8006c6c:	4602      	mov	r2, r0
 8006c6e:	460b      	mov	r3, r1
 8006c70:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006c74:	f7f9 fab6 	bl	80001e4 <__adddf3>
 8006c78:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006c7c:	3601      	adds	r6, #1
 8006c7e:	9b05      	ldr	r3, [sp, #20]
 8006c80:	429e      	cmp	r6, r3
 8006c82:	f1a7 0708 	sub.w	r7, r7, #8
 8006c86:	ddeb      	ble.n	8006c60 <__kernel_rem_pio2+0xa0>
 8006c88:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006c8c:	f108 0801 	add.w	r8, r8, #1
 8006c90:	ecaa 7b02 	vstmia	sl!, {d7}
 8006c94:	3508      	adds	r5, #8
 8006c96:	e7ca      	b.n	8006c2e <__kernel_rem_pio2+0x6e>
 8006c98:	9b00      	ldr	r3, [sp, #0]
 8006c9a:	f8dd 8000 	ldr.w	r8, [sp]
 8006c9e:	aa0c      	add	r2, sp, #48	@ 0x30
 8006ca0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006ca4:	930a      	str	r3, [sp, #40]	@ 0x28
 8006ca6:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8006ca8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8006cac:	9309      	str	r3, [sp, #36]	@ 0x24
 8006cae:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8006cb2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006cb4:	ab98      	add	r3, sp, #608	@ 0x260
 8006cb6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8006cba:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 8006cbe:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006cc2:	ac0c      	add	r4, sp, #48	@ 0x30
 8006cc4:	ab70      	add	r3, sp, #448	@ 0x1c0
 8006cc6:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 8006cca:	46a1      	mov	r9, r4
 8006ccc:	46c2      	mov	sl, r8
 8006cce:	f1ba 0f00 	cmp.w	sl, #0
 8006cd2:	f1a5 0508 	sub.w	r5, r5, #8
 8006cd6:	dc77      	bgt.n	8006dc8 <__kernel_rem_pio2+0x208>
 8006cd8:	4658      	mov	r0, fp
 8006cda:	ed9d 0b02 	vldr	d0, [sp, #8]
 8006cde:	f000 fac7 	bl	8007270 <scalbn>
 8006ce2:	ec57 6b10 	vmov	r6, r7, d0
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8006cec:	4630      	mov	r0, r6
 8006cee:	4639      	mov	r1, r7
 8006cf0:	f7f9 fc2e 	bl	8000550 <__aeabi_dmul>
 8006cf4:	ec41 0b10 	vmov	d0, r0, r1
 8006cf8:	f000 fb3a 	bl	8007370 <floor>
 8006cfc:	4b75      	ldr	r3, [pc, #468]	@ (8006ed4 <__kernel_rem_pio2+0x314>)
 8006cfe:	ec51 0b10 	vmov	r0, r1, d0
 8006d02:	2200      	movs	r2, #0
 8006d04:	f7f9 fc24 	bl	8000550 <__aeabi_dmul>
 8006d08:	4602      	mov	r2, r0
 8006d0a:	460b      	mov	r3, r1
 8006d0c:	4630      	mov	r0, r6
 8006d0e:	4639      	mov	r1, r7
 8006d10:	f7f9 fa66 	bl	80001e0 <__aeabi_dsub>
 8006d14:	460f      	mov	r7, r1
 8006d16:	4606      	mov	r6, r0
 8006d18:	f7f9 feca 	bl	8000ab0 <__aeabi_d2iz>
 8006d1c:	9002      	str	r0, [sp, #8]
 8006d1e:	f7f9 fbad 	bl	800047c <__aeabi_i2d>
 8006d22:	4602      	mov	r2, r0
 8006d24:	460b      	mov	r3, r1
 8006d26:	4630      	mov	r0, r6
 8006d28:	4639      	mov	r1, r7
 8006d2a:	f7f9 fa59 	bl	80001e0 <__aeabi_dsub>
 8006d2e:	f1bb 0f00 	cmp.w	fp, #0
 8006d32:	4606      	mov	r6, r0
 8006d34:	460f      	mov	r7, r1
 8006d36:	dd6c      	ble.n	8006e12 <__kernel_rem_pio2+0x252>
 8006d38:	f108 31ff 	add.w	r1, r8, #4294967295
 8006d3c:	ab0c      	add	r3, sp, #48	@ 0x30
 8006d3e:	9d02      	ldr	r5, [sp, #8]
 8006d40:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006d44:	f1cb 0018 	rsb	r0, fp, #24
 8006d48:	fa43 f200 	asr.w	r2, r3, r0
 8006d4c:	4415      	add	r5, r2
 8006d4e:	4082      	lsls	r2, r0
 8006d50:	1a9b      	subs	r3, r3, r2
 8006d52:	aa0c      	add	r2, sp, #48	@ 0x30
 8006d54:	9502      	str	r5, [sp, #8]
 8006d56:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8006d5a:	f1cb 0217 	rsb	r2, fp, #23
 8006d5e:	fa43 f902 	asr.w	r9, r3, r2
 8006d62:	f1b9 0f00 	cmp.w	r9, #0
 8006d66:	dd64      	ble.n	8006e32 <__kernel_rem_pio2+0x272>
 8006d68:	9b02      	ldr	r3, [sp, #8]
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	3301      	adds	r3, #1
 8006d6e:	9302      	str	r3, [sp, #8]
 8006d70:	4615      	mov	r5, r2
 8006d72:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8006d76:	4590      	cmp	r8, r2
 8006d78:	f300 80b8 	bgt.w	8006eec <__kernel_rem_pio2+0x32c>
 8006d7c:	f1bb 0f00 	cmp.w	fp, #0
 8006d80:	dd07      	ble.n	8006d92 <__kernel_rem_pio2+0x1d2>
 8006d82:	f1bb 0f01 	cmp.w	fp, #1
 8006d86:	f000 80bf 	beq.w	8006f08 <__kernel_rem_pio2+0x348>
 8006d8a:	f1bb 0f02 	cmp.w	fp, #2
 8006d8e:	f000 80c6 	beq.w	8006f1e <__kernel_rem_pio2+0x35e>
 8006d92:	f1b9 0f02 	cmp.w	r9, #2
 8006d96:	d14c      	bne.n	8006e32 <__kernel_rem_pio2+0x272>
 8006d98:	4632      	mov	r2, r6
 8006d9a:	463b      	mov	r3, r7
 8006d9c:	494e      	ldr	r1, [pc, #312]	@ (8006ed8 <__kernel_rem_pio2+0x318>)
 8006d9e:	2000      	movs	r0, #0
 8006da0:	f7f9 fa1e 	bl	80001e0 <__aeabi_dsub>
 8006da4:	4606      	mov	r6, r0
 8006da6:	460f      	mov	r7, r1
 8006da8:	2d00      	cmp	r5, #0
 8006daa:	d042      	beq.n	8006e32 <__kernel_rem_pio2+0x272>
 8006dac:	4658      	mov	r0, fp
 8006dae:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 8006ec8 <__kernel_rem_pio2+0x308>
 8006db2:	f000 fa5d 	bl	8007270 <scalbn>
 8006db6:	4630      	mov	r0, r6
 8006db8:	4639      	mov	r1, r7
 8006dba:	ec53 2b10 	vmov	r2, r3, d0
 8006dbe:	f7f9 fa0f 	bl	80001e0 <__aeabi_dsub>
 8006dc2:	4606      	mov	r6, r0
 8006dc4:	460f      	mov	r7, r1
 8006dc6:	e034      	b.n	8006e32 <__kernel_rem_pio2+0x272>
 8006dc8:	4b44      	ldr	r3, [pc, #272]	@ (8006edc <__kernel_rem_pio2+0x31c>)
 8006dca:	2200      	movs	r2, #0
 8006dcc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006dd0:	f7f9 fbbe 	bl	8000550 <__aeabi_dmul>
 8006dd4:	f7f9 fe6c 	bl	8000ab0 <__aeabi_d2iz>
 8006dd8:	f7f9 fb50 	bl	800047c <__aeabi_i2d>
 8006ddc:	4b40      	ldr	r3, [pc, #256]	@ (8006ee0 <__kernel_rem_pio2+0x320>)
 8006dde:	2200      	movs	r2, #0
 8006de0:	4606      	mov	r6, r0
 8006de2:	460f      	mov	r7, r1
 8006de4:	f7f9 fbb4 	bl	8000550 <__aeabi_dmul>
 8006de8:	4602      	mov	r2, r0
 8006dea:	460b      	mov	r3, r1
 8006dec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006df0:	f7f9 f9f6 	bl	80001e0 <__aeabi_dsub>
 8006df4:	f7f9 fe5c 	bl	8000ab0 <__aeabi_d2iz>
 8006df8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006dfc:	f849 0b04 	str.w	r0, [r9], #4
 8006e00:	4639      	mov	r1, r7
 8006e02:	4630      	mov	r0, r6
 8006e04:	f7f9 f9ee 	bl	80001e4 <__adddf3>
 8006e08:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006e0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006e10:	e75d      	b.n	8006cce <__kernel_rem_pio2+0x10e>
 8006e12:	d107      	bne.n	8006e24 <__kernel_rem_pio2+0x264>
 8006e14:	f108 33ff 	add.w	r3, r8, #4294967295
 8006e18:	aa0c      	add	r2, sp, #48	@ 0x30
 8006e1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e1e:	ea4f 59e3 	mov.w	r9, r3, asr #23
 8006e22:	e79e      	b.n	8006d62 <__kernel_rem_pio2+0x1a2>
 8006e24:	4b2f      	ldr	r3, [pc, #188]	@ (8006ee4 <__kernel_rem_pio2+0x324>)
 8006e26:	2200      	movs	r2, #0
 8006e28:	f7f9 fe18 	bl	8000a5c <__aeabi_dcmpge>
 8006e2c:	2800      	cmp	r0, #0
 8006e2e:	d143      	bne.n	8006eb8 <__kernel_rem_pio2+0x2f8>
 8006e30:	4681      	mov	r9, r0
 8006e32:	2200      	movs	r2, #0
 8006e34:	2300      	movs	r3, #0
 8006e36:	4630      	mov	r0, r6
 8006e38:	4639      	mov	r1, r7
 8006e3a:	f7f9 fdf1 	bl	8000a20 <__aeabi_dcmpeq>
 8006e3e:	2800      	cmp	r0, #0
 8006e40:	f000 80bf 	beq.w	8006fc2 <__kernel_rem_pio2+0x402>
 8006e44:	f108 33ff 	add.w	r3, r8, #4294967295
 8006e48:	2200      	movs	r2, #0
 8006e4a:	9900      	ldr	r1, [sp, #0]
 8006e4c:	428b      	cmp	r3, r1
 8006e4e:	da6e      	bge.n	8006f2e <__kernel_rem_pio2+0x36e>
 8006e50:	2a00      	cmp	r2, #0
 8006e52:	f000 8089 	beq.w	8006f68 <__kernel_rem_pio2+0x3a8>
 8006e56:	f108 38ff 	add.w	r8, r8, #4294967295
 8006e5a:	ab0c      	add	r3, sp, #48	@ 0x30
 8006e5c:	f1ab 0b18 	sub.w	fp, fp, #24
 8006e60:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d0f6      	beq.n	8006e56 <__kernel_rem_pio2+0x296>
 8006e68:	4658      	mov	r0, fp
 8006e6a:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8006ec8 <__kernel_rem_pio2+0x308>
 8006e6e:	f000 f9ff 	bl	8007270 <scalbn>
 8006e72:	f108 0301 	add.w	r3, r8, #1
 8006e76:	00da      	lsls	r2, r3, #3
 8006e78:	9205      	str	r2, [sp, #20]
 8006e7a:	ec55 4b10 	vmov	r4, r5, d0
 8006e7e:	aa70      	add	r2, sp, #448	@ 0x1c0
 8006e80:	f8df b058 	ldr.w	fp, [pc, #88]	@ 8006edc <__kernel_rem_pio2+0x31c>
 8006e84:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8006e88:	4646      	mov	r6, r8
 8006e8a:	f04f 0a00 	mov.w	sl, #0
 8006e8e:	2e00      	cmp	r6, #0
 8006e90:	f280 80cf 	bge.w	8007032 <__kernel_rem_pio2+0x472>
 8006e94:	4644      	mov	r4, r8
 8006e96:	2c00      	cmp	r4, #0
 8006e98:	f2c0 80fd 	blt.w	8007096 <__kernel_rem_pio2+0x4d6>
 8006e9c:	4b12      	ldr	r3, [pc, #72]	@ (8006ee8 <__kernel_rem_pio2+0x328>)
 8006e9e:	461f      	mov	r7, r3
 8006ea0:	ab70      	add	r3, sp, #448	@ 0x1c0
 8006ea2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006ea6:	9306      	str	r3, [sp, #24]
 8006ea8:	f04f 0a00 	mov.w	sl, #0
 8006eac:	f04f 0b00 	mov.w	fp, #0
 8006eb0:	2600      	movs	r6, #0
 8006eb2:	eba8 0504 	sub.w	r5, r8, r4
 8006eb6:	e0e2      	b.n	800707e <__kernel_rem_pio2+0x4be>
 8006eb8:	f04f 0902 	mov.w	r9, #2
 8006ebc:	e754      	b.n	8006d68 <__kernel_rem_pio2+0x1a8>
 8006ebe:	bf00      	nop
	...
 8006ecc:	3ff00000 	.word	0x3ff00000
 8006ed0:	080076d0 	.word	0x080076d0
 8006ed4:	40200000 	.word	0x40200000
 8006ed8:	3ff00000 	.word	0x3ff00000
 8006edc:	3e700000 	.word	0x3e700000
 8006ee0:	41700000 	.word	0x41700000
 8006ee4:	3fe00000 	.word	0x3fe00000
 8006ee8:	08007690 	.word	0x08007690
 8006eec:	f854 3b04 	ldr.w	r3, [r4], #4
 8006ef0:	b945      	cbnz	r5, 8006f04 <__kernel_rem_pio2+0x344>
 8006ef2:	b123      	cbz	r3, 8006efe <__kernel_rem_pio2+0x33e>
 8006ef4:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8006ef8:	f844 3c04 	str.w	r3, [r4, #-4]
 8006efc:	2301      	movs	r3, #1
 8006efe:	3201      	adds	r2, #1
 8006f00:	461d      	mov	r5, r3
 8006f02:	e738      	b.n	8006d76 <__kernel_rem_pio2+0x1b6>
 8006f04:	1acb      	subs	r3, r1, r3
 8006f06:	e7f7      	b.n	8006ef8 <__kernel_rem_pio2+0x338>
 8006f08:	f108 32ff 	add.w	r2, r8, #4294967295
 8006f0c:	ab0c      	add	r3, sp, #48	@ 0x30
 8006f0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f12:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8006f16:	a90c      	add	r1, sp, #48	@ 0x30
 8006f18:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8006f1c:	e739      	b.n	8006d92 <__kernel_rem_pio2+0x1d2>
 8006f1e:	f108 32ff 	add.w	r2, r8, #4294967295
 8006f22:	ab0c      	add	r3, sp, #48	@ 0x30
 8006f24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f28:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8006f2c:	e7f3      	b.n	8006f16 <__kernel_rem_pio2+0x356>
 8006f2e:	a90c      	add	r1, sp, #48	@ 0x30
 8006f30:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8006f34:	3b01      	subs	r3, #1
 8006f36:	430a      	orrs	r2, r1
 8006f38:	e787      	b.n	8006e4a <__kernel_rem_pio2+0x28a>
 8006f3a:	3401      	adds	r4, #1
 8006f3c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8006f40:	2a00      	cmp	r2, #0
 8006f42:	d0fa      	beq.n	8006f3a <__kernel_rem_pio2+0x37a>
 8006f44:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006f46:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8006f4a:	eb0d 0503 	add.w	r5, sp, r3
 8006f4e:	9b06      	ldr	r3, [sp, #24]
 8006f50:	aa20      	add	r2, sp, #128	@ 0x80
 8006f52:	4443      	add	r3, r8
 8006f54:	f108 0701 	add.w	r7, r8, #1
 8006f58:	3d98      	subs	r5, #152	@ 0x98
 8006f5a:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 8006f5e:	4444      	add	r4, r8
 8006f60:	42bc      	cmp	r4, r7
 8006f62:	da04      	bge.n	8006f6e <__kernel_rem_pio2+0x3ae>
 8006f64:	46a0      	mov	r8, r4
 8006f66:	e6a2      	b.n	8006cae <__kernel_rem_pio2+0xee>
 8006f68:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006f6a:	2401      	movs	r4, #1
 8006f6c:	e7e6      	b.n	8006f3c <__kernel_rem_pio2+0x37c>
 8006f6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f70:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8006f74:	f7f9 fa82 	bl	800047c <__aeabi_i2d>
 8006f78:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 8007240 <__kernel_rem_pio2+0x680>
 8006f7c:	e8e6 0102 	strd	r0, r1, [r6], #8
 8006f80:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006f84:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006f88:	46b2      	mov	sl, r6
 8006f8a:	f04f 0800 	mov.w	r8, #0
 8006f8e:	9b05      	ldr	r3, [sp, #20]
 8006f90:	4598      	cmp	r8, r3
 8006f92:	dd05      	ble.n	8006fa0 <__kernel_rem_pio2+0x3e0>
 8006f94:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006f98:	3701      	adds	r7, #1
 8006f9a:	eca5 7b02 	vstmia	r5!, {d7}
 8006f9e:	e7df      	b.n	8006f60 <__kernel_rem_pio2+0x3a0>
 8006fa0:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 8006fa4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8006fa8:	f7f9 fad2 	bl	8000550 <__aeabi_dmul>
 8006fac:	4602      	mov	r2, r0
 8006fae:	460b      	mov	r3, r1
 8006fb0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006fb4:	f7f9 f916 	bl	80001e4 <__adddf3>
 8006fb8:	f108 0801 	add.w	r8, r8, #1
 8006fbc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006fc0:	e7e5      	b.n	8006f8e <__kernel_rem_pio2+0x3ce>
 8006fc2:	f1cb 0000 	rsb	r0, fp, #0
 8006fc6:	ec47 6b10 	vmov	d0, r6, r7
 8006fca:	f000 f951 	bl	8007270 <scalbn>
 8006fce:	ec55 4b10 	vmov	r4, r5, d0
 8006fd2:	4b9d      	ldr	r3, [pc, #628]	@ (8007248 <__kernel_rem_pio2+0x688>)
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	4620      	mov	r0, r4
 8006fd8:	4629      	mov	r1, r5
 8006fda:	f7f9 fd3f 	bl	8000a5c <__aeabi_dcmpge>
 8006fde:	b300      	cbz	r0, 8007022 <__kernel_rem_pio2+0x462>
 8006fe0:	4b9a      	ldr	r3, [pc, #616]	@ (800724c <__kernel_rem_pio2+0x68c>)
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	4620      	mov	r0, r4
 8006fe6:	4629      	mov	r1, r5
 8006fe8:	f7f9 fab2 	bl	8000550 <__aeabi_dmul>
 8006fec:	f7f9 fd60 	bl	8000ab0 <__aeabi_d2iz>
 8006ff0:	4606      	mov	r6, r0
 8006ff2:	f7f9 fa43 	bl	800047c <__aeabi_i2d>
 8006ff6:	4b94      	ldr	r3, [pc, #592]	@ (8007248 <__kernel_rem_pio2+0x688>)
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	f7f9 faa9 	bl	8000550 <__aeabi_dmul>
 8006ffe:	460b      	mov	r3, r1
 8007000:	4602      	mov	r2, r0
 8007002:	4629      	mov	r1, r5
 8007004:	4620      	mov	r0, r4
 8007006:	f7f9 f8eb 	bl	80001e0 <__aeabi_dsub>
 800700a:	f7f9 fd51 	bl	8000ab0 <__aeabi_d2iz>
 800700e:	ab0c      	add	r3, sp, #48	@ 0x30
 8007010:	f10b 0b18 	add.w	fp, fp, #24
 8007014:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8007018:	f108 0801 	add.w	r8, r8, #1
 800701c:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8007020:	e722      	b.n	8006e68 <__kernel_rem_pio2+0x2a8>
 8007022:	4620      	mov	r0, r4
 8007024:	4629      	mov	r1, r5
 8007026:	f7f9 fd43 	bl	8000ab0 <__aeabi_d2iz>
 800702a:	ab0c      	add	r3, sp, #48	@ 0x30
 800702c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8007030:	e71a      	b.n	8006e68 <__kernel_rem_pio2+0x2a8>
 8007032:	ab0c      	add	r3, sp, #48	@ 0x30
 8007034:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8007038:	f7f9 fa20 	bl	800047c <__aeabi_i2d>
 800703c:	4622      	mov	r2, r4
 800703e:	462b      	mov	r3, r5
 8007040:	f7f9 fa86 	bl	8000550 <__aeabi_dmul>
 8007044:	4652      	mov	r2, sl
 8007046:	e967 0102 	strd	r0, r1, [r7, #-8]!
 800704a:	465b      	mov	r3, fp
 800704c:	4620      	mov	r0, r4
 800704e:	4629      	mov	r1, r5
 8007050:	f7f9 fa7e 	bl	8000550 <__aeabi_dmul>
 8007054:	3e01      	subs	r6, #1
 8007056:	4604      	mov	r4, r0
 8007058:	460d      	mov	r5, r1
 800705a:	e718      	b.n	8006e8e <__kernel_rem_pio2+0x2ce>
 800705c:	9906      	ldr	r1, [sp, #24]
 800705e:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 8007062:	9106      	str	r1, [sp, #24]
 8007064:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8007068:	f7f9 fa72 	bl	8000550 <__aeabi_dmul>
 800706c:	4602      	mov	r2, r0
 800706e:	460b      	mov	r3, r1
 8007070:	4650      	mov	r0, sl
 8007072:	4659      	mov	r1, fp
 8007074:	f7f9 f8b6 	bl	80001e4 <__adddf3>
 8007078:	3601      	adds	r6, #1
 800707a:	4682      	mov	sl, r0
 800707c:	468b      	mov	fp, r1
 800707e:	9b00      	ldr	r3, [sp, #0]
 8007080:	429e      	cmp	r6, r3
 8007082:	dc01      	bgt.n	8007088 <__kernel_rem_pio2+0x4c8>
 8007084:	42b5      	cmp	r5, r6
 8007086:	dae9      	bge.n	800705c <__kernel_rem_pio2+0x49c>
 8007088:	ab48      	add	r3, sp, #288	@ 0x120
 800708a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800708e:	e9c5 ab00 	strd	sl, fp, [r5]
 8007092:	3c01      	subs	r4, #1
 8007094:	e6ff      	b.n	8006e96 <__kernel_rem_pio2+0x2d6>
 8007096:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8007098:	2b02      	cmp	r3, #2
 800709a:	dc0b      	bgt.n	80070b4 <__kernel_rem_pio2+0x4f4>
 800709c:	2b00      	cmp	r3, #0
 800709e:	dc39      	bgt.n	8007114 <__kernel_rem_pio2+0x554>
 80070a0:	d05d      	beq.n	800715e <__kernel_rem_pio2+0x59e>
 80070a2:	9b02      	ldr	r3, [sp, #8]
 80070a4:	f003 0007 	and.w	r0, r3, #7
 80070a8:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 80070ac:	ecbd 8b02 	vpop	{d8}
 80070b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070b4:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 80070b6:	2b03      	cmp	r3, #3
 80070b8:	d1f3      	bne.n	80070a2 <__kernel_rem_pio2+0x4e2>
 80070ba:	9b05      	ldr	r3, [sp, #20]
 80070bc:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80070c0:	eb0d 0403 	add.w	r4, sp, r3
 80070c4:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 80070c8:	4625      	mov	r5, r4
 80070ca:	46c2      	mov	sl, r8
 80070cc:	f1ba 0f00 	cmp.w	sl, #0
 80070d0:	f1a5 0508 	sub.w	r5, r5, #8
 80070d4:	dc6b      	bgt.n	80071ae <__kernel_rem_pio2+0x5ee>
 80070d6:	4645      	mov	r5, r8
 80070d8:	2d01      	cmp	r5, #1
 80070da:	f1a4 0408 	sub.w	r4, r4, #8
 80070de:	f300 8087 	bgt.w	80071f0 <__kernel_rem_pio2+0x630>
 80070e2:	9c05      	ldr	r4, [sp, #20]
 80070e4:	ab48      	add	r3, sp, #288	@ 0x120
 80070e6:	441c      	add	r4, r3
 80070e8:	2000      	movs	r0, #0
 80070ea:	2100      	movs	r1, #0
 80070ec:	f1b8 0f01 	cmp.w	r8, #1
 80070f0:	f300 809c 	bgt.w	800722c <__kernel_rem_pio2+0x66c>
 80070f4:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 80070f8:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 80070fc:	f1b9 0f00 	cmp.w	r9, #0
 8007100:	f040 80a6 	bne.w	8007250 <__kernel_rem_pio2+0x690>
 8007104:	9b04      	ldr	r3, [sp, #16]
 8007106:	e9c3 7800 	strd	r7, r8, [r3]
 800710a:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800710e:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8007112:	e7c6      	b.n	80070a2 <__kernel_rem_pio2+0x4e2>
 8007114:	9d05      	ldr	r5, [sp, #20]
 8007116:	ab48      	add	r3, sp, #288	@ 0x120
 8007118:	441d      	add	r5, r3
 800711a:	4644      	mov	r4, r8
 800711c:	2000      	movs	r0, #0
 800711e:	2100      	movs	r1, #0
 8007120:	2c00      	cmp	r4, #0
 8007122:	da35      	bge.n	8007190 <__kernel_rem_pio2+0x5d0>
 8007124:	f1b9 0f00 	cmp.w	r9, #0
 8007128:	d038      	beq.n	800719c <__kernel_rem_pio2+0x5dc>
 800712a:	4602      	mov	r2, r0
 800712c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007130:	9c04      	ldr	r4, [sp, #16]
 8007132:	e9c4 2300 	strd	r2, r3, [r4]
 8007136:	4602      	mov	r2, r0
 8007138:	460b      	mov	r3, r1
 800713a:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800713e:	f7f9 f84f 	bl	80001e0 <__aeabi_dsub>
 8007142:	ad4a      	add	r5, sp, #296	@ 0x128
 8007144:	2401      	movs	r4, #1
 8007146:	45a0      	cmp	r8, r4
 8007148:	da2b      	bge.n	80071a2 <__kernel_rem_pio2+0x5e2>
 800714a:	f1b9 0f00 	cmp.w	r9, #0
 800714e:	d002      	beq.n	8007156 <__kernel_rem_pio2+0x596>
 8007150:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007154:	4619      	mov	r1, r3
 8007156:	9b04      	ldr	r3, [sp, #16]
 8007158:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800715c:	e7a1      	b.n	80070a2 <__kernel_rem_pio2+0x4e2>
 800715e:	9c05      	ldr	r4, [sp, #20]
 8007160:	ab48      	add	r3, sp, #288	@ 0x120
 8007162:	441c      	add	r4, r3
 8007164:	2000      	movs	r0, #0
 8007166:	2100      	movs	r1, #0
 8007168:	f1b8 0f00 	cmp.w	r8, #0
 800716c:	da09      	bge.n	8007182 <__kernel_rem_pio2+0x5c2>
 800716e:	f1b9 0f00 	cmp.w	r9, #0
 8007172:	d002      	beq.n	800717a <__kernel_rem_pio2+0x5ba>
 8007174:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007178:	4619      	mov	r1, r3
 800717a:	9b04      	ldr	r3, [sp, #16]
 800717c:	e9c3 0100 	strd	r0, r1, [r3]
 8007180:	e78f      	b.n	80070a2 <__kernel_rem_pio2+0x4e2>
 8007182:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8007186:	f7f9 f82d 	bl	80001e4 <__adddf3>
 800718a:	f108 38ff 	add.w	r8, r8, #4294967295
 800718e:	e7eb      	b.n	8007168 <__kernel_rem_pio2+0x5a8>
 8007190:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8007194:	f7f9 f826 	bl	80001e4 <__adddf3>
 8007198:	3c01      	subs	r4, #1
 800719a:	e7c1      	b.n	8007120 <__kernel_rem_pio2+0x560>
 800719c:	4602      	mov	r2, r0
 800719e:	460b      	mov	r3, r1
 80071a0:	e7c6      	b.n	8007130 <__kernel_rem_pio2+0x570>
 80071a2:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 80071a6:	f7f9 f81d 	bl	80001e4 <__adddf3>
 80071aa:	3401      	adds	r4, #1
 80071ac:	e7cb      	b.n	8007146 <__kernel_rem_pio2+0x586>
 80071ae:	ed95 7b00 	vldr	d7, [r5]
 80071b2:	ed8d 7b00 	vstr	d7, [sp]
 80071b6:	ed95 7b02 	vldr	d7, [r5, #8]
 80071ba:	e9dd 0100 	ldrd	r0, r1, [sp]
 80071be:	ec53 2b17 	vmov	r2, r3, d7
 80071c2:	ed8d 7b06 	vstr	d7, [sp, #24]
 80071c6:	f7f9 f80d 	bl	80001e4 <__adddf3>
 80071ca:	4602      	mov	r2, r0
 80071cc:	460b      	mov	r3, r1
 80071ce:	4606      	mov	r6, r0
 80071d0:	460f      	mov	r7, r1
 80071d2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80071d6:	f7f9 f803 	bl	80001e0 <__aeabi_dsub>
 80071da:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80071de:	f7f9 f801 	bl	80001e4 <__adddf3>
 80071e2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80071e6:	e9c5 0102 	strd	r0, r1, [r5, #8]
 80071ea:	e9c5 6700 	strd	r6, r7, [r5]
 80071ee:	e76d      	b.n	80070cc <__kernel_rem_pio2+0x50c>
 80071f0:	ed94 7b00 	vldr	d7, [r4]
 80071f4:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 80071f8:	ec51 0b17 	vmov	r0, r1, d7
 80071fc:	4652      	mov	r2, sl
 80071fe:	465b      	mov	r3, fp
 8007200:	ed8d 7b00 	vstr	d7, [sp]
 8007204:	f7f8 ffee 	bl	80001e4 <__adddf3>
 8007208:	4602      	mov	r2, r0
 800720a:	460b      	mov	r3, r1
 800720c:	4606      	mov	r6, r0
 800720e:	460f      	mov	r7, r1
 8007210:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007214:	f7f8 ffe4 	bl	80001e0 <__aeabi_dsub>
 8007218:	4652      	mov	r2, sl
 800721a:	465b      	mov	r3, fp
 800721c:	f7f8 ffe2 	bl	80001e4 <__adddf3>
 8007220:	3d01      	subs	r5, #1
 8007222:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007226:	e9c4 6700 	strd	r6, r7, [r4]
 800722a:	e755      	b.n	80070d8 <__kernel_rem_pio2+0x518>
 800722c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8007230:	f7f8 ffd8 	bl	80001e4 <__adddf3>
 8007234:	f108 38ff 	add.w	r8, r8, #4294967295
 8007238:	e758      	b.n	80070ec <__kernel_rem_pio2+0x52c>
 800723a:	bf00      	nop
 800723c:	f3af 8000 	nop.w
	...
 8007248:	41700000 	.word	0x41700000
 800724c:	3e700000 	.word	0x3e700000
 8007250:	9b04      	ldr	r3, [sp, #16]
 8007252:	9a04      	ldr	r2, [sp, #16]
 8007254:	601f      	str	r7, [r3, #0]
 8007256:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 800725a:	605c      	str	r4, [r3, #4]
 800725c:	609d      	str	r5, [r3, #8]
 800725e:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007262:	60d3      	str	r3, [r2, #12]
 8007264:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007268:	6110      	str	r0, [r2, #16]
 800726a:	6153      	str	r3, [r2, #20]
 800726c:	e719      	b.n	80070a2 <__kernel_rem_pio2+0x4e2>
 800726e:	bf00      	nop

08007270 <scalbn>:
 8007270:	b570      	push	{r4, r5, r6, lr}
 8007272:	ec55 4b10 	vmov	r4, r5, d0
 8007276:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800727a:	4606      	mov	r6, r0
 800727c:	462b      	mov	r3, r5
 800727e:	b991      	cbnz	r1, 80072a6 <scalbn+0x36>
 8007280:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8007284:	4323      	orrs	r3, r4
 8007286:	d03d      	beq.n	8007304 <scalbn+0x94>
 8007288:	4b35      	ldr	r3, [pc, #212]	@ (8007360 <scalbn+0xf0>)
 800728a:	4620      	mov	r0, r4
 800728c:	4629      	mov	r1, r5
 800728e:	2200      	movs	r2, #0
 8007290:	f7f9 f95e 	bl	8000550 <__aeabi_dmul>
 8007294:	4b33      	ldr	r3, [pc, #204]	@ (8007364 <scalbn+0xf4>)
 8007296:	429e      	cmp	r6, r3
 8007298:	4604      	mov	r4, r0
 800729a:	460d      	mov	r5, r1
 800729c:	da0f      	bge.n	80072be <scalbn+0x4e>
 800729e:	a328      	add	r3, pc, #160	@ (adr r3, 8007340 <scalbn+0xd0>)
 80072a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072a4:	e01e      	b.n	80072e4 <scalbn+0x74>
 80072a6:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80072aa:	4291      	cmp	r1, r2
 80072ac:	d10b      	bne.n	80072c6 <scalbn+0x56>
 80072ae:	4622      	mov	r2, r4
 80072b0:	4620      	mov	r0, r4
 80072b2:	4629      	mov	r1, r5
 80072b4:	f7f8 ff96 	bl	80001e4 <__adddf3>
 80072b8:	4604      	mov	r4, r0
 80072ba:	460d      	mov	r5, r1
 80072bc:	e022      	b.n	8007304 <scalbn+0x94>
 80072be:	460b      	mov	r3, r1
 80072c0:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80072c4:	3936      	subs	r1, #54	@ 0x36
 80072c6:	f24c 3250 	movw	r2, #50000	@ 0xc350
 80072ca:	4296      	cmp	r6, r2
 80072cc:	dd0d      	ble.n	80072ea <scalbn+0x7a>
 80072ce:	2d00      	cmp	r5, #0
 80072d0:	a11d      	add	r1, pc, #116	@ (adr r1, 8007348 <scalbn+0xd8>)
 80072d2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80072d6:	da02      	bge.n	80072de <scalbn+0x6e>
 80072d8:	a11d      	add	r1, pc, #116	@ (adr r1, 8007350 <scalbn+0xe0>)
 80072da:	e9d1 0100 	ldrd	r0, r1, [r1]
 80072de:	a31a      	add	r3, pc, #104	@ (adr r3, 8007348 <scalbn+0xd8>)
 80072e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072e4:	f7f9 f934 	bl	8000550 <__aeabi_dmul>
 80072e8:	e7e6      	b.n	80072b8 <scalbn+0x48>
 80072ea:	1872      	adds	r2, r6, r1
 80072ec:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 80072f0:	428a      	cmp	r2, r1
 80072f2:	dcec      	bgt.n	80072ce <scalbn+0x5e>
 80072f4:	2a00      	cmp	r2, #0
 80072f6:	dd08      	ble.n	800730a <scalbn+0x9a>
 80072f8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80072fc:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8007300:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007304:	ec45 4b10 	vmov	d0, r4, r5
 8007308:	bd70      	pop	{r4, r5, r6, pc}
 800730a:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800730e:	da08      	bge.n	8007322 <scalbn+0xb2>
 8007310:	2d00      	cmp	r5, #0
 8007312:	a10b      	add	r1, pc, #44	@ (adr r1, 8007340 <scalbn+0xd0>)
 8007314:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007318:	dac1      	bge.n	800729e <scalbn+0x2e>
 800731a:	a10f      	add	r1, pc, #60	@ (adr r1, 8007358 <scalbn+0xe8>)
 800731c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007320:	e7bd      	b.n	800729e <scalbn+0x2e>
 8007322:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8007326:	3236      	adds	r2, #54	@ 0x36
 8007328:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800732c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007330:	4620      	mov	r0, r4
 8007332:	4b0d      	ldr	r3, [pc, #52]	@ (8007368 <scalbn+0xf8>)
 8007334:	4629      	mov	r1, r5
 8007336:	2200      	movs	r2, #0
 8007338:	e7d4      	b.n	80072e4 <scalbn+0x74>
 800733a:	bf00      	nop
 800733c:	f3af 8000 	nop.w
 8007340:	c2f8f359 	.word	0xc2f8f359
 8007344:	01a56e1f 	.word	0x01a56e1f
 8007348:	8800759c 	.word	0x8800759c
 800734c:	7e37e43c 	.word	0x7e37e43c
 8007350:	8800759c 	.word	0x8800759c
 8007354:	fe37e43c 	.word	0xfe37e43c
 8007358:	c2f8f359 	.word	0xc2f8f359
 800735c:	81a56e1f 	.word	0x81a56e1f
 8007360:	43500000 	.word	0x43500000
 8007364:	ffff3cb0 	.word	0xffff3cb0
 8007368:	3c900000 	.word	0x3c900000
 800736c:	00000000 	.word	0x00000000

08007370 <floor>:
 8007370:	ec51 0b10 	vmov	r0, r1, d0
 8007374:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007378:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800737c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8007380:	2e13      	cmp	r6, #19
 8007382:	460c      	mov	r4, r1
 8007384:	4605      	mov	r5, r0
 8007386:	4680      	mov	r8, r0
 8007388:	dc34      	bgt.n	80073f4 <floor+0x84>
 800738a:	2e00      	cmp	r6, #0
 800738c:	da17      	bge.n	80073be <floor+0x4e>
 800738e:	a332      	add	r3, pc, #200	@ (adr r3, 8007458 <floor+0xe8>)
 8007390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007394:	f7f8 ff26 	bl	80001e4 <__adddf3>
 8007398:	2200      	movs	r2, #0
 800739a:	2300      	movs	r3, #0
 800739c:	f7f9 fb68 	bl	8000a70 <__aeabi_dcmpgt>
 80073a0:	b150      	cbz	r0, 80073b8 <floor+0x48>
 80073a2:	2c00      	cmp	r4, #0
 80073a4:	da55      	bge.n	8007452 <floor+0xe2>
 80073a6:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 80073aa:	432c      	orrs	r4, r5
 80073ac:	2500      	movs	r5, #0
 80073ae:	42ac      	cmp	r4, r5
 80073b0:	4c2b      	ldr	r4, [pc, #172]	@ (8007460 <floor+0xf0>)
 80073b2:	bf08      	it	eq
 80073b4:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 80073b8:	4621      	mov	r1, r4
 80073ba:	4628      	mov	r0, r5
 80073bc:	e023      	b.n	8007406 <floor+0x96>
 80073be:	4f29      	ldr	r7, [pc, #164]	@ (8007464 <floor+0xf4>)
 80073c0:	4137      	asrs	r7, r6
 80073c2:	ea01 0307 	and.w	r3, r1, r7
 80073c6:	4303      	orrs	r3, r0
 80073c8:	d01d      	beq.n	8007406 <floor+0x96>
 80073ca:	a323      	add	r3, pc, #140	@ (adr r3, 8007458 <floor+0xe8>)
 80073cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073d0:	f7f8 ff08 	bl	80001e4 <__adddf3>
 80073d4:	2200      	movs	r2, #0
 80073d6:	2300      	movs	r3, #0
 80073d8:	f7f9 fb4a 	bl	8000a70 <__aeabi_dcmpgt>
 80073dc:	2800      	cmp	r0, #0
 80073de:	d0eb      	beq.n	80073b8 <floor+0x48>
 80073e0:	2c00      	cmp	r4, #0
 80073e2:	bfbe      	ittt	lt
 80073e4:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 80073e8:	4133      	asrlt	r3, r6
 80073ea:	18e4      	addlt	r4, r4, r3
 80073ec:	ea24 0407 	bic.w	r4, r4, r7
 80073f0:	2500      	movs	r5, #0
 80073f2:	e7e1      	b.n	80073b8 <floor+0x48>
 80073f4:	2e33      	cmp	r6, #51	@ 0x33
 80073f6:	dd0a      	ble.n	800740e <floor+0x9e>
 80073f8:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 80073fc:	d103      	bne.n	8007406 <floor+0x96>
 80073fe:	4602      	mov	r2, r0
 8007400:	460b      	mov	r3, r1
 8007402:	f7f8 feef 	bl	80001e4 <__adddf3>
 8007406:	ec41 0b10 	vmov	d0, r0, r1
 800740a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800740e:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8007412:	f04f 37ff 	mov.w	r7, #4294967295
 8007416:	40df      	lsrs	r7, r3
 8007418:	4207      	tst	r7, r0
 800741a:	d0f4      	beq.n	8007406 <floor+0x96>
 800741c:	a30e      	add	r3, pc, #56	@ (adr r3, 8007458 <floor+0xe8>)
 800741e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007422:	f7f8 fedf 	bl	80001e4 <__adddf3>
 8007426:	2200      	movs	r2, #0
 8007428:	2300      	movs	r3, #0
 800742a:	f7f9 fb21 	bl	8000a70 <__aeabi_dcmpgt>
 800742e:	2800      	cmp	r0, #0
 8007430:	d0c2      	beq.n	80073b8 <floor+0x48>
 8007432:	2c00      	cmp	r4, #0
 8007434:	da0a      	bge.n	800744c <floor+0xdc>
 8007436:	2e14      	cmp	r6, #20
 8007438:	d101      	bne.n	800743e <floor+0xce>
 800743a:	3401      	adds	r4, #1
 800743c:	e006      	b.n	800744c <floor+0xdc>
 800743e:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8007442:	2301      	movs	r3, #1
 8007444:	40b3      	lsls	r3, r6
 8007446:	441d      	add	r5, r3
 8007448:	4545      	cmp	r5, r8
 800744a:	d3f6      	bcc.n	800743a <floor+0xca>
 800744c:	ea25 0507 	bic.w	r5, r5, r7
 8007450:	e7b2      	b.n	80073b8 <floor+0x48>
 8007452:	2500      	movs	r5, #0
 8007454:	462c      	mov	r4, r5
 8007456:	e7af      	b.n	80073b8 <floor+0x48>
 8007458:	8800759c 	.word	0x8800759c
 800745c:	7e37e43c 	.word	0x7e37e43c
 8007460:	bff00000 	.word	0xbff00000
 8007464:	000fffff 	.word	0x000fffff

08007468 <_init>:
 8007468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800746a:	bf00      	nop
 800746c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800746e:	bc08      	pop	{r3}
 8007470:	469e      	mov	lr, r3
 8007472:	4770      	bx	lr

08007474 <_fini>:
 8007474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007476:	bf00      	nop
 8007478:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800747a:	bc08      	pop	{r3}
 800747c:	469e      	mov	lr, r3
 800747e:	4770      	bx	lr
